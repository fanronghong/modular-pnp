// This code conforms with the UFC specification version 2016.1.0
// and was automatically generated by FFC version 2016.1.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   optimize:                       True
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   split:                          False

#ifndef __VECTOR_LINEAR_PNP_FORMS_H
#define __VECTOR_LINEAR_PNP_FORMS_H
#include <cmath>
#include <stdexcept>
#include <ufc.h>

class vector_linear_pnp_forms_finite_element_0: public ufc::finite_element
{
public:

  vector_linear_pnp_forms_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new vector_linear_pnp_forms_finite_element_0();
  }

};


class vector_linear_pnp_forms_finite_element_1: public ufc::finite_element
{
public:

  vector_linear_pnp_forms_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = coordinate_dofs[6];
    dof_coordinates[19] = coordinate_dofs[7];
    dof_coordinates[20] = coordinate_dofs[8];
    dof_coordinates[21] = coordinate_dofs[9];
    dof_coordinates[22] = coordinate_dofs[10];
    dof_coordinates[23] = coordinate_dofs[11];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[6];
    dof_coordinates[31] = coordinate_dofs[7];
    dof_coordinates[32] = coordinate_dofs[8];
    dof_coordinates[33] = coordinate_dofs[9];
    dof_coordinates[34] = coordinate_dofs[10];
    dof_coordinates[35] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new vector_linear_pnp_forms_finite_element_0();
        break;
      }
    case 1:
      {
        return new vector_linear_pnp_forms_finite_element_0();
        break;
      }
    case 2:
      {
        return new vector_linear_pnp_forms_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new vector_linear_pnp_forms_finite_element_1();
  }

};


class vector_linear_pnp_forms_finite_element_2: public ufc::finite_element
{
public:

  vector_linear_pnp_forms_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Raviart-Thomas', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Raviart-Thomas";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {-0.288675134594813, 0.0, -0.210818510677892, 0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.866025403784439, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.866025403784439, 0.0, -0.210818510677892, 0.0745355992499929};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.866025403784439, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {-0.288675134594813, 0.0, -0.210818510677892, 0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.866025403784439, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.866025403784439, 0.0, -0.210818510677892, 0.0745355992499929};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.866025403784439, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    
    double result;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
      y[1] = 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
      y[2] = 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      result = (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2])) + (-1.0)*(detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2])) + (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
      return result;
        break;
      }
    case 1:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
      y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      result = (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2]));
      return result;
        break;
      }
    case 2:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[9];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[10];
      y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      result = (detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2]));
      return result;
        break;
      }
    case 3:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7];
      y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      result = (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
      return result;
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    
    double result;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    y[0] = 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
    y[1] = 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
    y[2] = 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    result = (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2])) + (-1.0)*(detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2])) + (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
    values[0] = result;
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
    y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    result = (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2]));
    values[1] = result;
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[9];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[10];
    y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    result = (detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2]));
    values[2] = result;
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7];
    y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8];
    f.evaluate(vals, y, c);
    result = (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
    values[3] = result;
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Evaluate function and change variables
    vertex_values[0] = dof_values[1]*((1.0/detJ)*(J[0]*(-1.0))) + dof_values[2]*(1.0/detJ)*J[1] + dof_values[3]*((1.0/detJ)*(J[2]*(-1.0)));
    vertex_values[3] = dof_values[0]*((1.0/detJ)*(J[0]*(-1.0))) + dof_values[2]*((1.0/detJ)*(J[0]*(-1.0) + J[1])) + dof_values[3]*((1.0/detJ)*(J[0] + J[2]*(-1.0)));
    vertex_values[6] = dof_values[0]*((1.0/detJ)*(J[1]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[0]*(-1.0) + J[1])) + dof_values[3]*((1.0/detJ)*(J[1] + J[2]*(-1.0)));
    vertex_values[9] = dof_values[0]*((1.0/detJ)*(J[2]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[0]*(-1.0) + J[2])) + dof_values[2]*((1.0/detJ)*(J[1] + J[2]*(-1.0)));
    vertex_values[1] = dof_values[1]*((1.0/detJ)*(J[3]*(-1.0))) + dof_values[2]*(1.0/detJ)*J[4] + dof_values[3]*((1.0/detJ)*(J[5]*(-1.0)));
    vertex_values[4] = dof_values[0]*((1.0/detJ)*(J[3]*(-1.0))) + dof_values[2]*((1.0/detJ)*(J[3]*(-1.0) + J[4])) + dof_values[3]*((1.0/detJ)*(J[3] + J[5]*(-1.0)));
    vertex_values[7] = dof_values[0]*((1.0/detJ)*(J[4]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[3]*(-1.0) + J[4])) + dof_values[3]*((1.0/detJ)*(J[4] + J[5]*(-1.0)));
    vertex_values[10] = dof_values[0]*((1.0/detJ)*(J[5]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[3]*(-1.0) + J[5])) + dof_values[2]*((1.0/detJ)*(J[4] + J[5]*(-1.0)));
    vertex_values[2] = dof_values[1]*((1.0/detJ)*(J[6]*(-1.0))) + dof_values[2]*(1.0/detJ)*J[7] + dof_values[3]*((1.0/detJ)*(J[8]*(-1.0)));
    vertex_values[5] = dof_values[0]*((1.0/detJ)*(J[6]*(-1.0))) + dof_values[2]*((1.0/detJ)*(J[6]*(-1.0) + J[7])) + dof_values[3]*((1.0/detJ)*(J[6] + J[8]*(-1.0)));
    vertex_values[8] = dof_values[0]*((1.0/detJ)*(J[7]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[6]*(-1.0) + J[7])) + dof_values[3]*((1.0/detJ)*(J[7] + J[8]*(-1.0)));
    vertex_values[11] = dof_values[0]*((1.0/detJ)*(J[8]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[6]*(-1.0) + J[8])) + dof_values[2]*((1.0/detJ)*(J[7] + J[8]*(-1.0)));
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
    dof_coordinates[1] = 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
    dof_coordinates[2] = 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
    dof_coordinates[3] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
    dof_coordinates[4] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
    dof_coordinates[5] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
    dof_coordinates[6] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[9];
    dof_coordinates[7] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[10];
    dof_coordinates[8] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[11];
    dof_coordinates[9] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6];
    dof_coordinates[10] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7];
    dof_coordinates[11] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new vector_linear_pnp_forms_finite_element_2();
  }

};


class vector_linear_pnp_forms_finite_element_3: public ufc::finite_element
{
public:

  vector_linear_pnp_forms_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Discontinuous Lagrange', tetrahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    dof_coordinates[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    dof_coordinates[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new vector_linear_pnp_forms_finite_element_3();
  }

};


class vector_linear_pnp_forms_finite_element_4: public ufc::finite_element
{
public:

  vector_linear_pnp_forms_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Raviart-Thomas', tetrahedron, 1), FiniteElement('Discontinuous Lagrange', tetrahedron, 0))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 17;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 7;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 7;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 7;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 7;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    values[4] = 0.0;
    values[5] = 0.0;
    values[6] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {-0.288675134594813, 0.0, -0.210818510677892, 0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
        values[4] += coefficients1[r]*basisvalues[r];
        values[5] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[3];
      const double tmp_ref1 = values[4];
      const double tmp_ref2 = values[5];
      values[3] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[4] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[5] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.866025403784439, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
        values[4] += coefficients1[r]*basisvalues[r];
        values[5] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[3];
      const double tmp_ref1 = values[4];
      const double tmp_ref2 = values[5];
      values[3] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[4] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[5] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.866025403784439, 0.0, -0.210818510677892, 0.0745355992499929};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
        values[4] += coefficients1[r]*basisvalues[r];
        values[5] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[3];
      const double tmp_ref1 = values[4];
      const double tmp_ref2 = values[5];
      values[3] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[4] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[5] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.866025403784439, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[3] += coefficients0[r]*basisvalues[r];
        values[4] += coefficients1[r]*basisvalues[r];
        values[5] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[3];
      const double tmp_ref1 = values[4];
      const double tmp_ref2 = values[5];
      values[3] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[4] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[5] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 1; r++)
      {
        values[6] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[7] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 17; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 7; s++)
      {
        values[r*7 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 7*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 12:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {-0.288675134594813, 0.0, -0.210818510677892, 0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives_p[s];
          values[4*num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[5*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 13:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.866025403784439, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives_p[s];
          values[4*num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[5*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 14:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.866025403784439, 0.0, -0.210818510677892, 0.0745355992499929};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives_p[s];
          values[4*num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[5*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 15:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.866025403784439, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[3*num_derivatives + r] += transform[r][s]*derivatives_p[s];
          values[4*num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[5*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 16:
      {
        
      // Array of basisvalues
      double basisvalues[1] = {0.0};
      
      // Declare helper variables
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      
      // Table(s) of coefficients
      static const double coefficients0[1] = \
      {1.0};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[1][1] = \
      {{0.0}};
      
      static const double dmats1[1][1] = \
      {{0.0}};
      
      static const double dmats2[1][1] = \
      {{0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[1][1] = \
      {{1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[1][1] = \
      {{1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 1; t++)
        {
          for (unsigned int u = 0; u < 1; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 1; t++)
          {
            for (unsigned int u = 0; u < 1; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 1; t++)
          {
            for (unsigned int u = 0; u < 1; u++)
            {
              for (unsigned int tu = 0; tu < 1; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 1; t++)
          {
            for (unsigned int u = 0; u < 1; u++)
            {
              for (unsigned int tu = 0; tu < 1; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 1; t++)
          {
            for (unsigned int u = 0; u < 1; u++)
            {
              for (unsigned int tu = 0; tu < 1; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 1; s++)
        {
          for (unsigned int t = 0; t < 1; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[6*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 17; r++)
    {
      for (unsigned int s = 0; s < 7*num_derivatives; s++)
      {
        values[r*7*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[21];
    for (unsigned int r = 0; r < 21; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 17; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 7*num_derivatives; s++)
      {
        values[r*7*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[7];
    
    // Declare variable for physical coordinates
    double y[3];
    
    double result;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 12:
      {
        y[0] = 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
      y[1] = 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
      y[2] = 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      result = (-1.0)*(detJ*(K[0]*vals[3] + K[1]*vals[4] + K[2]*vals[5])) + (-1.0)*(detJ*(K[3]*vals[3] + K[4]*vals[4] + K[5]*vals[5])) + (-1.0)*(detJ*(K[6]*vals[3] + K[7]*vals[4] + K[8]*vals[5]));
      return result;
        break;
      }
    case 13:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
      y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      result = (-1.0)*(detJ*(K[0]*vals[3] + K[1]*vals[4] + K[2]*vals[5]));
      return result;
        break;
      }
    case 14:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[9];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[10];
      y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      result = (detJ*(K[3]*vals[3] + K[4]*vals[4] + K[5]*vals[5]));
      return result;
        break;
      }
    case 15:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7];
      y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      result = (-1.0)*(detJ*(K[6]*vals[3] + K[7]*vals[4] + K[8]*vals[5]));
      return result;
        break;
      }
    case 16:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[6];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[7];
    
    // Declare variable for physical coordinates
    double y[3];
    
    double result;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
    y[0] = 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
    y[1] = 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
    y[2] = 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    result = (-1.0)*(detJ*(K[0]*vals[3] + K[1]*vals[4] + K[2]*vals[5])) + (-1.0)*(detJ*(K[3]*vals[3] + K[4]*vals[4] + K[5]*vals[5])) + (-1.0)*(detJ*(K[6]*vals[3] + K[7]*vals[4] + K[8]*vals[5]));
    values[12] = result;
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
    y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    result = (-1.0)*(detJ*(K[0]*vals[3] + K[1]*vals[4] + K[2]*vals[5]));
    values[13] = result;
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[9];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[10];
    y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    result = (detJ*(K[3]*vals[3] + K[4]*vals[4] + K[5]*vals[5]));
    values[14] = result;
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7];
    y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8];
    f.evaluate(vals, y, c);
    result = (-1.0)*(detJ*(K[6]*vals[3] + K[7]*vals[4] + K[8]*vals[5]));
    values[15] = result;
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[16] = vals[6];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[7] = dof_values[1];
    vertex_values[14] = dof_values[2];
    vertex_values[21] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[8] = dof_values[5];
    vertex_values[15] = dof_values[6];
    vertex_values[22] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[9] = dof_values[9];
    vertex_values[16] = dof_values[10];
    vertex_values[23] = dof_values[11];
    // Evaluate function and change variables
    vertex_values[3] = dof_values[13]*((1.0/detJ)*(J[0]*(-1.0))) + dof_values[14]*(1.0/detJ)*J[1] + dof_values[15]*((1.0/detJ)*(J[2]*(-1.0)));
    vertex_values[10] = dof_values[12]*((1.0/detJ)*(J[0]*(-1.0))) + dof_values[14]*((1.0/detJ)*(J[0]*(-1.0) + J[1])) + dof_values[15]*((1.0/detJ)*(J[0] + J[2]*(-1.0)));
    vertex_values[17] = dof_values[12]*((1.0/detJ)*(J[1]*(-1.0))) + dof_values[13]*((1.0/detJ)*(J[0]*(-1.0) + J[1])) + dof_values[15]*((1.0/detJ)*(J[1] + J[2]*(-1.0)));
    vertex_values[24] = dof_values[12]*((1.0/detJ)*(J[2]*(-1.0))) + dof_values[13]*((1.0/detJ)*(J[0]*(-1.0) + J[2])) + dof_values[14]*((1.0/detJ)*(J[1] + J[2]*(-1.0)));
    vertex_values[4] = dof_values[13]*((1.0/detJ)*(J[3]*(-1.0))) + dof_values[14]*(1.0/detJ)*J[4] + dof_values[15]*((1.0/detJ)*(J[5]*(-1.0)));
    vertex_values[11] = dof_values[12]*((1.0/detJ)*(J[3]*(-1.0))) + dof_values[14]*((1.0/detJ)*(J[3]*(-1.0) + J[4])) + dof_values[15]*((1.0/detJ)*(J[3] + J[5]*(-1.0)));
    vertex_values[18] = dof_values[12]*((1.0/detJ)*(J[4]*(-1.0))) + dof_values[13]*((1.0/detJ)*(J[3]*(-1.0) + J[4])) + dof_values[15]*((1.0/detJ)*(J[4] + J[5]*(-1.0)));
    vertex_values[25] = dof_values[12]*((1.0/detJ)*(J[5]*(-1.0))) + dof_values[13]*((1.0/detJ)*(J[3]*(-1.0) + J[5])) + dof_values[14]*((1.0/detJ)*(J[4] + J[5]*(-1.0)));
    vertex_values[5] = dof_values[13]*((1.0/detJ)*(J[6]*(-1.0))) + dof_values[14]*(1.0/detJ)*J[7] + dof_values[15]*((1.0/detJ)*(J[8]*(-1.0)));
    vertex_values[12] = dof_values[12]*((1.0/detJ)*(J[6]*(-1.0))) + dof_values[14]*((1.0/detJ)*(J[6]*(-1.0) + J[7])) + dof_values[15]*((1.0/detJ)*(J[6] + J[8]*(-1.0)));
    vertex_values[19] = dof_values[12]*((1.0/detJ)*(J[7]*(-1.0))) + dof_values[13]*((1.0/detJ)*(J[6]*(-1.0) + J[7])) + dof_values[15]*((1.0/detJ)*(J[7] + J[8]*(-1.0)));
    vertex_values[26] = dof_values[12]*((1.0/detJ)*(J[8]*(-1.0))) + dof_values[13]*((1.0/detJ)*(J[6]*(-1.0) + J[8])) + dof_values[14]*((1.0/detJ)*(J[7] + J[8]*(-1.0)));
    // Evaluate function and change variables
    vertex_values[6] = dof_values[16];
    vertex_values[13] = dof_values[16];
    vertex_values[20] = dof_values[16];
    vertex_values[27] = dof_values[16];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = coordinate_dofs[6];
    dof_coordinates[19] = coordinate_dofs[7];
    dof_coordinates[20] = coordinate_dofs[8];
    dof_coordinates[21] = coordinate_dofs[9];
    dof_coordinates[22] = coordinate_dofs[10];
    dof_coordinates[23] = coordinate_dofs[11];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[6];
    dof_coordinates[31] = coordinate_dofs[7];
    dof_coordinates[32] = coordinate_dofs[8];
    dof_coordinates[33] = coordinate_dofs[9];
    dof_coordinates[34] = coordinate_dofs[10];
    dof_coordinates[35] = coordinate_dofs[11];
    dof_coordinates[36] = 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
    dof_coordinates[37] = 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
    dof_coordinates[38] = 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
    dof_coordinates[39] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
    dof_coordinates[40] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
    dof_coordinates[41] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
    dof_coordinates[42] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[9];
    dof_coordinates[43] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[10];
    dof_coordinates[44] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[11];
    dof_coordinates[45] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6];
    dof_coordinates[46] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7];
    dof_coordinates[47] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8];
    dof_coordinates[48] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    dof_coordinates[49] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    dof_coordinates[50] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 5;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new vector_linear_pnp_forms_finite_element_0();
        break;
      }
    case 1:
      {
        return new vector_linear_pnp_forms_finite_element_0();
        break;
      }
    case 2:
      {
        return new vector_linear_pnp_forms_finite_element_0();
        break;
      }
    case 3:
      {
        return new vector_linear_pnp_forms_finite_element_2();
        break;
      }
    case 4:
      {
        return new vector_linear_pnp_forms_finite_element_3();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new vector_linear_pnp_forms_finite_element_4();
  }

};


class vector_linear_pnp_forms_finite_element_5: public ufc::finite_element
{
public:

  vector_linear_pnp_forms_finite_element_5() : ufc::finite_element()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_finite_element_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = coordinate_dofs[6];
    dof_coordinates[19] = coordinate_dofs[7];
    dof_coordinates[20] = coordinate_dofs[8];
    dof_coordinates[21] = coordinate_dofs[9];
    dof_coordinates[22] = coordinate_dofs[10];
    dof_coordinates[23] = coordinate_dofs[11];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[6];
    dof_coordinates[31] = coordinate_dofs[7];
    dof_coordinates[32] = coordinate_dofs[8];
    dof_coordinates[33] = coordinate_dofs[9];
    dof_coordinates[34] = coordinate_dofs[10];
    dof_coordinates[35] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new vector_linear_pnp_forms_finite_element_0();
        break;
      }
    case 1:
      {
        return new vector_linear_pnp_forms_finite_element_0();
        break;
      }
    case 2:
      {
        return new vector_linear_pnp_forms_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new vector_linear_pnp_forms_finite_element_5();
  }

};


class vector_linear_pnp_forms_finite_element_6: public ufc::finite_element
{
public:

  vector_linear_pnp_forms_finite_element_6() : ufc::finite_element()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_finite_element_6() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', tetrahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    dof_coordinates[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    dof_coordinates[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new vector_linear_pnp_forms_finite_element_6();
  }

};


class vector_linear_pnp_forms_dofmap_0: public ufc::dofmap
{
public:

  vector_linear_pnp_forms_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new vector_linear_pnp_forms_dofmap_0();
  }

};


class vector_linear_pnp_forms_dofmap_1: public ufc::dofmap
{
public:

  vector_linear_pnp_forms_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3*num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new vector_linear_pnp_forms_dofmap_0();
        break;
      }
    case 1:
      {
        return new vector_linear_pnp_forms_dofmap_0();
        break;
      }
    case 2:
      {
        return new vector_linear_pnp_forms_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new vector_linear_pnp_forms_dofmap_1();
  }

};


class vector_linear_pnp_forms_dofmap_2: public ufc::dofmap
{
public:

  vector_linear_pnp_forms_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Raviart-Thomas', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[2];
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 1;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[2][0];
    dofs[1] = entity_indices[2][1];
    dofs[2] = entity_indices[2][2];
    dofs[3] = entity_indices[2][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 0;
        break;
      }
    case 1:
      {
        dofs[0] = 1;
        break;
      }
    case 2:
      {
        dofs[0] = 2;
        break;
      }
    case 3:
      {
        dofs[0] = 3;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new vector_linear_pnp_forms_dofmap_2();
  }

};


class vector_linear_pnp_forms_dofmap_3: public ufc::dofmap
{
public:

  vector_linear_pnp_forms_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', tetrahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[3];
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[3][0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new vector_linear_pnp_forms_dofmap_3();
  }

};


class vector_linear_pnp_forms_dofmap_4: public ufc::dofmap
{
public:

  vector_linear_pnp_forms_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Raviart-Thomas', tetrahedron, 1), FiniteElement('Discontinuous Lagrange', tetrahedron, 0))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    case 3:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3*num_global_entities[0] + num_global_entities[2] + num_global_entities[3];
  }

  std::size_t num_element_dofs() const final override
  {
    return 17;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 10;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[12] = offset + entity_indices[2][0];
    dofs[13] = offset + entity_indices[2][1];
    dofs[14] = offset + entity_indices[2][2];
    dofs[15] = offset + entity_indices[2][3];
    offset += num_global_entities[2];
    dofs[16] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 12;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
      dofs[9] = 13;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
      dofs[9] = 14;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
      dofs[9] = 15;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 12;
          break;
        }
      case 1:
        {
          dofs[0] = 13;
          break;
        }
      case 2:
        {
          dofs[0] = 14;
          break;
        }
      case 3:
        {
          dofs[0] = 15;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 16;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 5;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new vector_linear_pnp_forms_dofmap_0();
        break;
      }
    case 1:
      {
        return new vector_linear_pnp_forms_dofmap_0();
        break;
      }
    case 2:
      {
        return new vector_linear_pnp_forms_dofmap_0();
        break;
      }
    case 3:
      {
        return new vector_linear_pnp_forms_dofmap_2();
        break;
      }
    case 4:
      {
        return new vector_linear_pnp_forms_dofmap_3();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new vector_linear_pnp_forms_dofmap_4();
  }

};


class vector_linear_pnp_forms_dofmap_5: public ufc::dofmap
{
public:

  vector_linear_pnp_forms_dofmap_5() : ufc::dofmap()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_dofmap_5() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3*num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new vector_linear_pnp_forms_dofmap_0();
        break;
      }
    case 1:
      {
        return new vector_linear_pnp_forms_dofmap_0();
        break;
      }
    case 2:
      {
        return new vector_linear_pnp_forms_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new vector_linear_pnp_forms_dofmap_5();
  }

};


class vector_linear_pnp_forms_dofmap_6: public ufc::dofmap
{
public:

  vector_linear_pnp_forms_dofmap_6() : ufc::dofmap()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_dofmap_6() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', tetrahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new vector_linear_pnp_forms_dofmap_6();
  }

};


class vector_linear_pnp_forms_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  vector_linear_pnp_forms_cell_integral_0_otherwise() : ufc::cell_integral()
  {
    
  }

  ~vector_linear_pnp_forms_cell_integral_0_otherwise() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({true, true, true, true, true, true, false, false});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W24[24] = {0.00665379170969465, 0.00665379170969465, 0.00665379170969465, 0.00665379170969465, 0.00167953517588678, 0.00167953517588678, 0.00167953517588678, 0.00167953517588678, 0.0092261969239424, 0.0092261969239424, 0.0092261969239424, 0.0092261969239424, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428, 0.00803571428571428};
    // Quadrature points on the UFC reference element: (0.356191386222545, 0.214602871259152, 0.214602871259152), (0.214602871259152, 0.214602871259152, 0.214602871259152), (0.214602871259152, 0.214602871259152, 0.356191386222545), (0.214602871259152, 0.356191386222545, 0.214602871259152), (0.877978124396166, 0.0406739585346113, 0.0406739585346113), (0.0406739585346113, 0.0406739585346113, 0.0406739585346113), (0.0406739585346113, 0.0406739585346113, 0.877978124396166), (0.0406739585346113, 0.877978124396166, 0.0406739585346113), (0.0329863295731731, 0.322337890142276, 0.322337890142276), (0.322337890142276, 0.322337890142276, 0.322337890142276), (0.322337890142276, 0.322337890142276, 0.0329863295731731), (0.322337890142276, 0.0329863295731731, 0.322337890142276), (0.269672331458316, 0.0636610018750175, 0.0636610018750175), (0.0636610018750175, 0.269672331458316, 0.0636610018750175), (0.0636610018750175, 0.0636610018750175, 0.269672331458316), (0.603005664791649, 0.0636610018750175, 0.0636610018750175), (0.0636610018750175, 0.603005664791649, 0.0636610018750175), (0.0636610018750175, 0.0636610018750175, 0.603005664791649), (0.0636610018750175, 0.269672331458316, 0.603005664791649), (0.269672331458316, 0.603005664791649, 0.0636610018750175), (0.603005664791649, 0.0636610018750175, 0.269672331458316), (0.0636610018750175, 0.603005664791649, 0.269672331458316), (0.269672331458316, 0.0636610018750175, 0.603005664791649), (0.603005664791649, 0.269672331458316, 0.0636610018750175)
    
    // Values of basis functions at quadrature points.
    static const double FE0[24][4] = \
    {{0.214602871259152, 0.356191386222545, 0.214602871259152, 0.214602871259152},
    {0.356191386222545, 0.214602871259152, 0.214602871259152, 0.214602871259152},
    {0.214602871259152, 0.214602871259152, 0.214602871259152, 0.356191386222545},
    {0.214602871259152, 0.214602871259152, 0.356191386222545, 0.214602871259152},
    {0.0406739585346115, 0.877978124396166, 0.0406739585346114, 0.0406739585346113},
    {0.877978124396166, 0.0406739585346112, 0.0406739585346114, 0.0406739585346113},
    {0.0406739585346115, 0.0406739585346113, 0.0406739585346113, 0.877978124396166},
    {0.0406739585346115, 0.0406739585346113, 0.877978124396166, 0.0406739585346113},
    {0.322337890142276, 0.0329863295731731, 0.322337890142276, 0.322337890142276},
    {0.0329863295731729, 0.322337890142276, 0.322337890142276, 0.322337890142276},
    {0.322337890142276, 0.322337890142276, 0.322337890142276, 0.0329863295731731},
    {0.322337890142276, 0.322337890142276, 0.0329863295731731, 0.322337890142276},
    {0.603005664791649, 0.269672331458316, 0.0636610018750175, 0.0636610018750175},
    {0.603005664791649, 0.0636610018750174, 0.269672331458316, 0.0636610018750175},
    {0.603005664791649, 0.0636610018750175, 0.0636610018750175, 0.269672331458316},
    {0.269672331458316, 0.603005664791649, 0.0636610018750175, 0.0636610018750175},
    {0.269672331458316, 0.0636610018750175, 0.603005664791649, 0.0636610018750175},
    {0.269672331458316, 0.0636610018750175, 0.0636610018750175, 0.603005664791649},
    {0.0636610018750176, 0.0636610018750175, 0.269672331458316, 0.603005664791649},
    {0.0636610018750176, 0.269672331458316, 0.603005664791649, 0.0636610018750175},
    {0.0636610018750177, 0.603005664791649, 0.0636610018750175, 0.269672331458316},
    {0.0636610018750176, 0.0636610018750175, 0.603005664791649, 0.269672331458316},
    {0.0636610018750177, 0.269672331458316, 0.0636610018750175, 0.603005664791649},
    {0.0636610018750177, 0.603005664791649, 0.269672331458316, 0.0636610018750175}};
    
    // Array of non-zero columns
    static const unsigned int nzc4[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc8[4] = {8, 9, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc12[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc16[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc20[4] = {8, 9, 10, 11};
    
    static const double FE1_C0_D001[24][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc7[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc11[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc15[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc17[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc18[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc19[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc21[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc22[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc23[2] = {8, 9};
    
    static const double FE2_C3[24][4] = \
    {{-0.356191386222545, -0.643808613777455, -0.356191386222545, 0.356191386222545},
    {-0.214602871259152, -0.785397128740848, -0.214602871259152, 0.214602871259152},
    {-0.214602871259152, -0.785397128740848, -0.214602871259152, 0.214602871259152},
    {-0.214602871259152, -0.785397128740848, -0.214602871259152, 0.214602871259152},
    {-0.877978124396166, -0.122021875603834, -0.877978124396166, 0.877978124396166},
    {-0.0406739585346109, -0.959326041465389, -0.040673958534611, 0.040673958534611},
    {-0.0406739585346113, -0.959326041465389, -0.0406739585346114, 0.0406739585346114},
    {-0.0406739585346116, -0.959326041465388, -0.0406739585346117, 0.0406739585346117},
    {-0.0329863295731731, -0.967013670426827, -0.0329863295731732, 0.0329863295731732},
    {-0.322337890142276, -0.677662109857724, -0.322337890142276, 0.322337890142276},
    {-0.322337890142276, -0.677662109857724, -0.322337890142276, 0.322337890142276},
    {-0.322337890142276, -0.677662109857724, -0.322337890142276, 0.322337890142276},
    {-0.269672331458316, -0.730327668541684, -0.269672331458316, 0.269672331458316},
    {-0.0636610018750174, -0.936338998124983, -0.0636610018750174, 0.0636610018750175},
    {-0.0636610018750173, -0.936338998124983, -0.0636610018750174, 0.0636610018750174},
    {-0.603005664791649, -0.396994335208351, -0.603005664791649, 0.603005664791649},
    {-0.0636610018750176, -0.936338998124982, -0.0636610018750177, 0.0636610018750177},
    {-0.0636610018750174, -0.936338998124983, -0.0636610018750175, 0.0636610018750175},
    {-0.0636610018750176, -0.936338998124982, -0.0636610018750176, 0.0636610018750176},
    {-0.269672331458316, -0.730327668541684, -0.269672331458316, 0.269672331458316},
    {-0.603005664791649, -0.396994335208351, -0.603005664791649, 0.603005664791649},
    {-0.0636610018750177, -0.936338998124982, -0.0636610018750177, 0.0636610018750177},
    {-0.269672331458316, -0.730327668541684, -0.269672331458316, 0.269672331458316},
    {-0.603005664791649, -0.396994335208351, -0.603005664791649, 0.603005664791649}};
    
    // Array of non-zero columns
    static const unsigned int nzc24[4] = {12, 13, 14, 15};
    
    static const double FE2_C3_D100[24][4] = \
    {{-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc25[4] = {12, 13, 14, 15};
    
    static const double FE2_C4[24][4] = \
    {{-0.214602871259152, 0.214602871259152, 0.785397128740848, 0.214602871259152},
    {-0.214602871259152, 0.214602871259152, 0.785397128740848, 0.214602871259152},
    {-0.214602871259152, 0.214602871259152, 0.785397128740848, 0.214602871259152},
    {-0.356191386222545, 0.356191386222545, 0.643808613777455, 0.356191386222545},
    {-0.0406739585346117, 0.0406739585346116, 0.959326041465388, 0.0406739585346117},
    {-0.0406739585346113, 0.0406739585346111, 0.959326041465389, 0.0406739585346113},
    {-0.0406739585346115, 0.0406739585346113, 0.959326041465389, 0.0406739585346115},
    {-0.877978124396166, 0.877978124396166, 0.122021875603834, 0.877978124396166},
    {-0.322337890142276, 0.322337890142275, 0.677662109857724, 0.322337890142276},
    {-0.322337890142276, 0.322337890142276, 0.677662109857724, 0.322337890142276},
    {-0.322337890142276, 0.322337890142276, 0.677662109857724, 0.322337890142276},
    {-0.0329863295731732, 0.032986329573173, 0.967013670426827, 0.0329863295731732},
    {-0.0636610018750175, 0.0636610018750174, 0.936338998124982, 0.0636610018750175},
    {-0.269672331458316, 0.269672331458316, 0.730327668541684, 0.269672331458316},
    {-0.0636610018750175, 0.0636610018750173, 0.936338998124982, 0.0636610018750175},
    {-0.0636610018750177, 0.0636610018750175, 0.936338998124982, 0.0636610018750177},
    {-0.603005664791649, 0.603005664791649, 0.396994335208351, 0.603005664791649},
    {-0.0636610018750176, 0.0636610018750174, 0.936338998124982, 0.0636610018750176},
    {-0.269672331458316, 0.269672331458316, 0.730327668541684, 0.269672331458316},
    {-0.603005664791649, 0.603005664791649, 0.396994335208351, 0.603005664791649},
    {-0.0636610018750177, 0.0636610018750176, 0.936338998124982, 0.0636610018750177},
    {-0.603005664791649, 0.603005664791649, 0.396994335208351, 0.603005664791649},
    {-0.0636610018750177, 0.0636610018750175, 0.936338998124982, 0.0636610018750177},
    {-0.269672331458316, 0.269672331458316, 0.730327668541684, 0.269672331458316}};
    
    // Array of non-zero columns
    static const unsigned int nzc26[4] = {12, 13, 14, 15};
    
    static const double FE2_C5[24][4] = \
    {{-0.214602871259152, 0.214602871259152, -0.214602871259152, -0.785397128740849},
    {-0.214602871259152, 0.214602871259152, -0.214602871259151, -0.785397128740849},
    {-0.356191386222545, 0.356191386222545, -0.356191386222545, -0.643808613777455},
    {-0.214602871259152, 0.214602871259152, -0.214602871259152, -0.785397128740849},
    {-0.0406739585346115, 0.0406739585346115, -0.0406739585346115, -0.959326041465388},
    {-0.0406739585346112, 0.0406739585346111, -0.0406739585346112, -0.959326041465389},
    {-0.877978124396165, 0.877978124396165, -0.877978124396165, -0.122021875603835},
    {-0.0406739585346113, 0.0406739585346113, -0.0406739585346113, -0.959326041465389},
    {-0.322337890142275, 0.322337890142275, -0.322337890142275, -0.677662109857725},
    {-0.322337890142276, 0.322337890142276, -0.322337890142275, -0.677662109857725},
    {-0.0329863295731731, 0.0329863295731731, -0.0329863295731731, -0.967013670426827},
    {-0.322337890142275, 0.322337890142275, -0.322337890142275, -0.677662109857725},
    {-0.0636610018750174, 0.0636610018750174, -0.0636610018750174, -0.936338998124983},
    {-0.0636610018750174, 0.0636610018750174, -0.0636610018750174, -0.936338998124983},
    {-0.269672331458316, 0.269672331458316, -0.269672331458316, -0.730327668541685},
    {-0.0636610018750176, 0.0636610018750175, -0.0636610018750175, -0.936338998124982},
    {-0.0636610018750175, 0.0636610018750174, -0.0636610018750174, -0.936338998124983},
    {-0.603005664791649, 0.603005664791649, -0.603005664791648, -0.396994335208351},
    {-0.603005664791649, 0.603005664791649, -0.603005664791648, -0.396994335208351},
    {-0.0636610018750175, 0.0636610018750175, -0.0636610018750175, -0.936338998124983},
    {-0.269672331458316, 0.269672331458316, -0.269672331458316, -0.730327668541684},
    {-0.269672331458316, 0.269672331458316, -0.269672331458316, -0.730327668541684},
    {-0.603005664791649, 0.603005664791649, -0.603005664791649, -0.396994335208351},
    {-0.0636610018750176, 0.0636610018750176, -0.0636610018750176, -0.936338998124982}};
    
    // Array of non-zero columns
    static const unsigned int nzc27[4] = {12, 13, 14, 15};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 289; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 958.
    double G[27];
    G[0] = det*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[1] = det*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[2] = det*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[3] = det*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[4] = det*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[5] = det*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[6] =  - det*(J[0]*K[6] + J[3]*K[7] + J[6]*K[8])/detJ;
    G[7] =  - det*(J[1]*K[6] + J[4]*K[7] + J[7]*K[8])/detJ;
    G[8] =  - det*(J[2]*K[6] + J[5]*K[7] + J[8]*K[8])/detJ;
    G[9] =  - det*(J[0]*K[3] + J[3]*K[4] + J[6]*K[5])/detJ;
    G[10] =  - det*(J[1]*K[3] + J[4]*K[4] + J[7]*K[5])/detJ;
    G[11] =  - det*(J[2]*K[3] + J[5]*K[4] + J[8]*K[5])/detJ;
    G[12] =  - det*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2])/detJ;
    G[13] =  - det*(J[1]*K[0] + J[4]*K[1] + J[7]*K[2])/detJ;
    G[14] =  - det*(J[2]*K[0] + J[5]*K[1] + J[8]*K[2])/detJ;
    G[15] =  - det*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])/detJ;
    G[16] = det*(K[6]*(K[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[1]*(J[0]*K[1] + J[1]*K[4]) + K[2]*(J[0]*K[2] + J[1]*K[5])) + K[7]*(K[0]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + K[1]*(J[2]*K[6] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7]) + K[2]*(J[3]*K[2] + J[4]*K[5])) + K[8]*(K[0]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[1]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[2]*(J[2]*K[6] + J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])))/detJ;
    G[17] = det*(K[6]*(K[3]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[4]*(J[0]*K[1] + J[1]*K[4]) + K[5]*(J[0]*K[2] + J[1]*K[5])) + K[7]*(K[3]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + K[4]*(J[2]*K[6] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7]) + K[5]*(J[3]*K[2] + J[4]*K[5])) + K[8]*(K[3]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[4]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[5]*(J[2]*K[6] + J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])))/detJ;
    G[18] = det*(K[6]*K[6]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[7]*(K[6]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + K[7]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7])) + K[8]*(K[6]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[7]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[8]*(J[6]*K[2] + J[7]*K[5] + J[8]*K[8])))/detJ;
    G[19] = det*(K[3]*(K[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[1]*(J[0]*K[1] + J[2]*K[7]) + K[2]*(J[0]*K[2] + J[2]*K[8])) + K[4]*(K[0]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + K[1]*(J[1]*K[3] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7]) + K[2]*(J[3]*K[2] + J[5]*K[8])) + K[5]*(K[0]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[1]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[2]*(J[1]*K[3] + J[4]*K[4] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])))/detJ;
    G[20] = det*(K[3]*K[3]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[4]*(K[3]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + K[4]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7])) + K[5]*(K[3]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[4]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[5]*(J[6]*K[2] + J[7]*K[5] + J[8]*K[8])))/detJ;
    G[21] = det*(K[3]*(K[6]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[7]*(J[0]*K[1] + J[2]*K[7]) + K[8]*(J[0]*K[2] + J[2]*K[8])) + K[4]*(K[6]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + K[7]*(J[1]*K[3] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7]) + K[8]*(J[3]*K[2] + J[5]*K[8])) + K[5]*(K[6]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[7]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[8]*(J[1]*K[3] + J[4]*K[4] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])))/detJ;
    G[22] = det*(K[0]*K[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[1]*(K[0]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + K[1]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7])) + K[2]*(K[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[1]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[2]*(J[6]*K[2] + J[7]*K[5] + J[8]*K[8])))/detJ;
    G[23] = det*(K[0]*(K[3]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[4]*(J[1]*K[4] + J[2]*K[7]) + K[5]*(J[1]*K[5] + J[2]*K[8])) + K[1]*(K[3]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + K[4]*(J[0]*K[0] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7]) + K[5]*(J[4]*K[5] + J[5]*K[8])) + K[2]*(K[3]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[4]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[5]*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])))/detJ;
    G[24] = det*(K[0]*(K[6]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[7]*(J[1]*K[4] + J[2]*K[7]) + K[8]*(J[1]*K[5] + J[2]*K[8])) + K[1]*(K[6]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + K[7]*(J[0]*K[0] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7]) + K[8]*(J[4]*K[5] + J[5]*K[8])) + K[2]*(K[6]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[7]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[8]*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])))/detJ;
    G[25] = det*w[5][0]*(2.0*(J[0]*J[0]*K[0]*K[0] + J[3]*K[1]*(J[0]*K[0] + J[3]*K[1]) + J[6]*K[2]*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2]) + K[3]*(J[0]*(J[4]*K[1] + J[7]*K[2]) + J[1]*J[1]*K[3] + K[0]*(J[3]*J[4] + J[6]*J[7])) + K[4]*(J[1]*(J[0]*K[1] + J[3]*K[0] + J[4]*K[3]) + J[4]*J[4]*K[4] + J[7]*(J[3]*K[2] + J[6]*K[1])) + K[5]*(J[6]*(J[1]*K[0] + J[4]*K[1]) + J[7]*(J[1]*K[3] + J[4]*K[4] + J[7]*K[5]) + K[2]*(J[0]*J[1] + J[3]*J[4])) + K[6]*(J[2]*J[2]*K[6] + J[5]*(J[0]*K[1] + J[1]*K[4] + J[3]*K[0] + J[4]*K[3]) + J[8]*(J[0]*K[2] + J[1]*K[5] + J[6]*K[0] + J[7]*K[3])) + K[7]*(J[2]*(J[0]*K[1] + J[1]*K[4] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[5]*J[5]*K[7] + J[8]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1] + J[7]*K[4])) + K[8]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[5]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + J[8]*J[8]*K[8])) + 4.0*(J[0]*J[1]*K[0]*K[3] + J[2]*K[6]*(J[0]*K[0] + J[1]*K[3]) + J[3]*J[4]*K[1]*K[4] + J[5]*K[7]*(J[3]*K[1] + J[4]*K[4]) + J[6]*J[7]*K[2]*K[5] + J[8]*K[8]*(J[6]*K[2] + J[7]*K[5])) + K[0]*K[0]*(J[3]*J[3] + J[6]*J[6]) + K[1]*K[1]*(J[0]*J[0] + J[6]*J[6]) + K[2]*K[2]*(J[0]*J[0] + J[3]*J[3]) + K[3]*K[3]*(J[4]*J[4] + J[7]*J[7]) + K[4]*K[4]*(J[1]*J[1] + J[7]*J[7]) + K[5]*K[5]*(J[1]*J[1] + J[4]*J[4]) + K[6]*K[6]*(J[5]*J[5] + J[8]*J[8]) + K[7]*K[7]*(J[2]*J[2] + J[8]*J[8]) + K[8]*K[8]*(J[2]*J[2] + J[5]*J[5]))/(detJ*detJ);
    G[26] = det*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])/detJ;
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 45096
    for (unsigned int ip = 0; ip < 24; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      double F21 = 0.0;
      double F22 = 0.0;
      
      // Total number of operations to compute function values = 48
      for (unsigned int r = 0; r < 2; r++)
      {
        F10 += FE1_C0_D001[ip][r]*w[0][nzc19[r]];
        F11 += FE1_C0_D001[ip][r]*w[0][nzc18[r]];
        F12 += FE1_C0_D001[ip][r]*w[0][nzc17[r]];
        F13 += FE1_C0_D001[ip][r]*w[0][nzc15[r]];
        F14 += FE1_C0_D001[ip][r]*w[0][nzc14[r]];
        F15 += FE1_C0_D001[ip][r]*w[0][nzc13[r]];
        F17 += FE1_C0_D001[ip][r]*w[4][nzc7[r]];
        F18 += FE1_C0_D001[ip][r]*w[4][nzc6[r]];
        F19 += FE1_C0_D001[ip][r]*w[4][nzc5[r]];
        F20 += FE1_C0_D001[ip][r]*w[4][nzc11[r]];
        F21 += FE1_C0_D001[ip][r]*w[4][nzc10[r]];
        F22 += FE1_C0_D001[ip][r]*w[4][nzc9[r]];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 88
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[4][nzc4[r]];
        F1 += FE0[ip][r]*w[0][nzc16[r]];
        F2 += FE0[ip][r]*w[4][nzc8[r]];
        F3 += FE2_C3[ip][r]*w[1][r];
        F4 += FE2_C4[ip][r]*w[1][r];
        F5 += FE2_C5[ip][r]*w[1][r];
        F6 += FE0[ip][r]*w[0][nzc20[r]];
        F7 += FE0[ip][r]*w[2][r];
        F8 += FE0[ip][r]*w[3][nzc4[r]];
        F9 += FE0[ip][r]*w[3][nzc8[r]];
        F16 += FE0[ip][r]*w[0][nzc12[r]];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 371
      double I[64];
      // Number of operations: 2
      I[0] = F7*G[0]*W24[ip];
      
      // Number of operations: 2
      I[1] = F7*G[1]*W24[ip];
      
      // Number of operations: 2
      I[2] = F7*G[2]*W24[ip];
      
      // Number of operations: 2
      I[3] = F7*G[3]*W24[ip];
      
      // Number of operations: 2
      I[4] = F7*G[4]*W24[ip];
      
      // Number of operations: 2
      I[5] = F7*G[5]*W24[ip];
      
      // Number of operations: 5
      I[6] = F0*F8*G[0]*W24[ip]*std::exp(F1);
      
      // Number of operations: 5
      I[7] = F0*F8*G[1]*W24[ip]*std::exp(F1);
      
      // Number of operations: 5
      I[8] = F0*F8*G[2]*W24[ip]*std::exp(F1);
      
      // Number of operations: 4
      I[9] = F8*G[0]*W24[ip]*std::exp(F1);
      
      // Number of operations: 4
      I[10] = F8*G[1]*W24[ip]*std::exp(F1);
      
      // Number of operations: 4
      I[11] = F8*G[2]*W24[ip]*std::exp(F1);
      
      // Number of operations: 5
      I[12] = F0*F8*G[3]*W24[ip]*std::exp(F1);
      
      // Number of operations: 5
      I[13] = F0*F8*G[4]*W24[ip]*std::exp(F1);
      
      // Number of operations: 4
      I[14] = F8*G[3]*W24[ip]*std::exp(F1);
      
      // Number of operations: 4
      I[15] = F8*G[4]*W24[ip]*std::exp(F1);
      
      // Number of operations: 5
      I[16] = F0*F8*G[5]*W24[ip]*std::exp(F1);
      
      // Number of operations: 4
      I[17] = F8*G[5]*W24[ip]*std::exp(F1);
      
      // Number of operations: 5
      I[18] = F2*F9*G[0]*W24[ip]*std::exp(F1);
      
      // Number of operations: 5
      I[19] = F2*F9*G[1]*W24[ip]*std::exp(F1);
      
      // Number of operations: 5
      I[20] = F2*F9*G[2]*W24[ip]*std::exp(F1);
      
      // Number of operations: 4
      I[21] = F9*G[0]*W24[ip]*std::exp(F1);
      
      // Number of operations: 4
      I[22] = F9*G[1]*W24[ip]*std::exp(F1);
      
      // Number of operations: 4
      I[23] = F9*G[2]*W24[ip]*std::exp(F1);
      
      // Number of operations: 5
      I[24] = F2*F9*G[3]*W24[ip]*std::exp(F1);
      
      // Number of operations: 5
      I[25] = F2*F9*G[4]*W24[ip]*std::exp(F1);
      
      // Number of operations: 4
      I[26] = F9*G[3]*W24[ip]*std::exp(F1);
      
      // Number of operations: 4
      I[27] = F9*G[4]*W24[ip]*std::exp(F1);
      
      // Number of operations: 5
      I[28] = F2*F9*G[5]*W24[ip]*std::exp(F1);
      
      // Number of operations: 4
      I[29] = F9*G[5]*W24[ip]*std::exp(F1);
      
      // Number of operations: 27
      I[30] = W24[ip]*std::exp(F1)*(F3*G[6] + F4*G[7] + F5*G[8] + F8*(G[0]*(F12 + F0*F15 + F16*F19) + G[1]*(F11 + F0*F14 + F16*F18) + G[2]*(F10 + F0*F13 + F16*F17)));
      
      // Number of operations: 3
      I[31] = G[6]*W24[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[32] = G[7]*W24[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[33] = G[8]*W24[ip]*std::exp(F1);
      
      // Number of operations: 27
      I[34] = W24[ip]*std::exp(F1)*(F3*G[9] + F4*G[10] + F5*G[11] + F8*(G[1]*(F12 + F0*F15 + F16*F19) + G[3]*(F11 + F0*F14 + F16*F18) + G[4]*(F10 + F0*F13 + F16*F17)));
      
      // Number of operations: 3
      I[35] = G[9]*W24[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[36] = G[10]*W24[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[37] = G[11]*W24[ip]*std::exp(F1);
      
      // Number of operations: 27
      I[38] = W24[ip]*std::exp(F1)*(F3*G[12] + F4*G[13] + F5*G[14] + F8*(G[2]*(F12 + F0*F15 + F16*F19) + G[4]*(F11 + F0*F14 + F16*F18) + G[5]*(F10 + F0*F13 + F16*F17)));
      
      // Number of operations: 3
      I[39] = G[12]*W24[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[40] = G[13]*W24[ip]*std::exp(F1);
      
      // Number of operations: 3
      I[41] = G[14]*W24[ip]*std::exp(F1);
      
      // Number of operations: 21
      I[42] = F9*W24[ip]*std::exp(F1)*(G[0]*(F12 + F15*F2 + F16*F22) + G[1]*(F11 + F14*F2 + F16*F21) + G[2]*(F10 + F13*F2 + F16*F20));
      
      // Number of operations: 8
      I[43] = W24[ip]*std::exp(F6)*(F3*G[6] + F4*G[7] + F5*G[8]);
      
      // Number of operations: 3
      I[44] = G[6]*W24[ip]*std::exp(F6);
      
      // Number of operations: 3
      I[45] = G[7]*W24[ip]*std::exp(F6);
      
      // Number of operations: 3
      I[46] = G[8]*W24[ip]*std::exp(F6);
      
      // Number of operations: 21
      I[47] = F9*W24[ip]*std::exp(F1)*(G[1]*(F12 + F15*F2 + F16*F22) + G[3]*(F11 + F14*F2 + F16*F21) + G[4]*(F10 + F13*F2 + F16*F20));
      
      // Number of operations: 8
      I[48] = W24[ip]*std::exp(F6)*(F3*G[9] + F4*G[10] + F5*G[11]);
      
      // Number of operations: 3
      I[49] = G[9]*W24[ip]*std::exp(F6);
      
      // Number of operations: 3
      I[50] = G[10]*W24[ip]*std::exp(F6);
      
      // Number of operations: 3
      I[51] = G[11]*W24[ip]*std::exp(F6);
      
      // Number of operations: 21
      I[52] = F9*W24[ip]*std::exp(F1)*(G[2]*(F12 + F15*F2 + F16*F22) + G[4]*(F11 + F14*F2 + F16*F21) + G[5]*(F10 + F13*F2 + F16*F20));
      
      // Number of operations: 8
      I[53] = W24[ip]*std::exp(F6)*(F3*G[12] + F4*G[13] + F5*G[14]);
      
      // Number of operations: 3
      I[54] = G[12]*W24[ip]*std::exp(F6);
      
      // Number of operations: 3
      I[55] = G[13]*W24[ip]*std::exp(F6);
      
      // Number of operations: 3
      I[56] = G[14]*W24[ip]*std::exp(F6);
      
      // Number of operations: 1
      I[57] = G[15]*W24[ip];
      
      // Number of operations: 7
      I[58] = F7*W24[ip]*(F13*G[16] + F14*G[17] + F15*G[18]);
      
      // Number of operations: 7
      I[59] = F7*W24[ip]*(F13*G[19] + F14*G[20] + F15*G[21]);
      
      // Number of operations: 7
      I[60] = F7*W24[ip]*(F13*G[22] + F14*G[23] + F15*G[24]);
      
      // Number of operations: 5
      I[61] =  - W24[ip]*det*std::exp(F1)*(F0 + F2);
      
      // Number of operations: 1
      I[62] = G[25]*W24[ip];
      
      // Number of operations: 1
      I[63] = G[26]*W24[ip];
      
      
      // Number of operations for primary indices: 540
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc13[j]*17 + nzc13[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[0];
          // Number of operations to compute entry: 3
          A[nzc13[j]*17 + nzc14[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc13[j]*17 + nzc15[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc14[j]*17 + nzc13[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[1];
          // Number of operations to compute entry: 3
          A[nzc14[j]*17 + nzc14[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[3];
          // Number of operations to compute entry: 3
          A[nzc14[j]*17 + nzc15[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc15[j]*17 + nzc13[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[2];
          // Number of operations to compute entry: 3
          A[nzc15[j]*17 + nzc14[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[4];
          // Number of operations to compute entry: 3
          A[nzc15[j]*17 + nzc15[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[5];
          // Number of operations to compute entry: 3
          A[nzc17[j]*17 + nzc13[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[6];
          // Number of operations to compute entry: 3
          A[nzc17[j]*17 + nzc14[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc17[j]*17 + nzc15[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc17[j]*17 + nzc17[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[9];
          // Number of operations to compute entry: 3
          A[nzc17[j]*17 + nzc18[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc17[j]*17 + nzc19[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc18[j]*17 + nzc13[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[7];
          // Number of operations to compute entry: 3
          A[nzc18[j]*17 + nzc14[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[12];
          // Number of operations to compute entry: 3
          A[nzc18[j]*17 + nzc15[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc18[j]*17 + nzc17[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[10];
          // Number of operations to compute entry: 3
          A[nzc18[j]*17 + nzc18[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[14];
          // Number of operations to compute entry: 3
          A[nzc18[j]*17 + nzc19[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[15];
          // Number of operations to compute entry: 3
          A[nzc19[j]*17 + nzc13[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[8];
          // Number of operations to compute entry: 3
          A[nzc19[j]*17 + nzc14[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[13];
          // Number of operations to compute entry: 3
          A[nzc19[j]*17 + nzc15[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[16];
          // Number of operations to compute entry: 3
          A[nzc19[j]*17 + nzc17[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[11];
          // Number of operations to compute entry: 3
          A[nzc19[j]*17 + nzc18[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[15];
          // Number of operations to compute entry: 3
          A[nzc19[j]*17 + nzc19[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[17];
          // Number of operations to compute entry: 3
          A[nzc21[j]*17 + nzc13[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[18];
          // Number of operations to compute entry: 3
          A[nzc21[j]*17 + nzc14[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc21[j]*17 + nzc15[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[20];
          // Number of operations to compute entry: 3
          A[nzc21[j]*17 + nzc17[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[21];
          // Number of operations to compute entry: 3
          A[nzc21[j]*17 + nzc18[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[22];
          // Number of operations to compute entry: 3
          A[nzc21[j]*17 + nzc19[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[23];
          // Number of operations to compute entry: 3
          A[nzc22[j]*17 + nzc13[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[19];
          // Number of operations to compute entry: 3
          A[nzc22[j]*17 + nzc14[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[24];
          // Number of operations to compute entry: 3
          A[nzc22[j]*17 + nzc15[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc22[j]*17 + nzc17[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[22];
          // Number of operations to compute entry: 3
          A[nzc22[j]*17 + nzc18[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[26];
          // Number of operations to compute entry: 3
          A[nzc22[j]*17 + nzc19[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc23[j]*17 + nzc13[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[20];
          // Number of operations to compute entry: 3
          A[nzc23[j]*17 + nzc14[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[25];
          // Number of operations to compute entry: 3
          A[nzc23[j]*17 + nzc15[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[28];
          // Number of operations to compute entry: 3
          A[nzc23[j]*17 + nzc17[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[23];
          // Number of operations to compute entry: 3
          A[nzc23[j]*17 + nzc18[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[27];
          // Number of operations to compute entry: 3
          A[nzc23[j]*17 + nzc19[k]] += FE1_C0_D001[ip][j]*FE1_C0_D001[ip][k]*I[29];
        } // end loop over 'k'
      } // end loop over 'j'
      
      // Number of operations for primary indices: 648
      for (unsigned int j = 0; j < 2; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc17[j]*17 + nzc16[k]] += FE0[ip][k]*FE1_C0_D001[ip][j]*I[30];
          // Number of operations to compute entry: 3
          A[nzc17[j]*17 + nzc24[k]] += FE1_C0_D001[ip][j]*FE2_C3[ip][k]*I[31];
          // Number of operations to compute entry: 3
          A[nzc17[j]*17 + nzc26[k]] += FE1_C0_D001[ip][j]*FE2_C4[ip][k]*I[32];
          // Number of operations to compute entry: 3
          A[nzc17[j]*17 + nzc27[k]] += FE1_C0_D001[ip][j]*FE2_C5[ip][k]*I[33];
          // Number of operations to compute entry: 3
          A[nzc18[j]*17 + nzc16[k]] += FE0[ip][k]*FE1_C0_D001[ip][j]*I[34];
          // Number of operations to compute entry: 3
          A[nzc18[j]*17 + nzc24[k]] += FE1_C0_D001[ip][j]*FE2_C3[ip][k]*I[35];
          // Number of operations to compute entry: 3
          A[nzc18[j]*17 + nzc26[k]] += FE1_C0_D001[ip][j]*FE2_C4[ip][k]*I[36];
          // Number of operations to compute entry: 3
          A[nzc18[j]*17 + nzc27[k]] += FE1_C0_D001[ip][j]*FE2_C5[ip][k]*I[37];
          // Number of operations to compute entry: 3
          A[nzc19[j]*17 + nzc16[k]] += FE0[ip][k]*FE1_C0_D001[ip][j]*I[38];
          // Number of operations to compute entry: 3
          A[nzc19[j]*17 + nzc24[k]] += FE1_C0_D001[ip][j]*FE2_C3[ip][k]*I[39];
          // Number of operations to compute entry: 3
          A[nzc19[j]*17 + nzc26[k]] += FE1_C0_D001[ip][j]*FE2_C4[ip][k]*I[40];
          // Number of operations to compute entry: 3
          A[nzc19[j]*17 + nzc27[k]] += FE1_C0_D001[ip][j]*FE2_C5[ip][k]*I[41];
          // Number of operations to compute entry: 3
          A[nzc21[j]*17 + nzc16[k]] += FE0[ip][k]*FE1_C0_D001[ip][j]*I[42];
          // Number of operations to compute entry: 3
          A[nzc21[j]*17 + nzc20[k]] += FE0[ip][k]*FE1_C0_D001[ip][j]*I[43];
          // Number of operations to compute entry: 3
          A[nzc21[j]*17 + nzc24[k]] += FE1_C0_D001[ip][j]*FE2_C3[ip][k]*I[44];
          // Number of operations to compute entry: 3
          A[nzc21[j]*17 + nzc26[k]] += FE1_C0_D001[ip][j]*FE2_C4[ip][k]*I[45];
          // Number of operations to compute entry: 3
          A[nzc21[j]*17 + nzc27[k]] += FE1_C0_D001[ip][j]*FE2_C5[ip][k]*I[46];
          // Number of operations to compute entry: 3
          A[nzc22[j]*17 + nzc16[k]] += FE0[ip][k]*FE1_C0_D001[ip][j]*I[47];
          // Number of operations to compute entry: 3
          A[nzc22[j]*17 + nzc20[k]] += FE0[ip][k]*FE1_C0_D001[ip][j]*I[48];
          // Number of operations to compute entry: 3
          A[nzc22[j]*17 + nzc24[k]] += FE1_C0_D001[ip][j]*FE2_C3[ip][k]*I[49];
          // Number of operations to compute entry: 3
          A[nzc22[j]*17 + nzc26[k]] += FE1_C0_D001[ip][j]*FE2_C4[ip][k]*I[50];
          // Number of operations to compute entry: 3
          A[nzc22[j]*17 + nzc27[k]] += FE1_C0_D001[ip][j]*FE2_C5[ip][k]*I[51];
          // Number of operations to compute entry: 3
          A[nzc23[j]*17 + nzc16[k]] += FE0[ip][k]*FE1_C0_D001[ip][j]*I[52];
          // Number of operations to compute entry: 3
          A[nzc23[j]*17 + nzc20[k]] += FE0[ip][k]*FE1_C0_D001[ip][j]*I[53];
          // Number of operations to compute entry: 3
          A[nzc23[j]*17 + nzc24[k]] += FE1_C0_D001[ip][j]*FE2_C3[ip][k]*I[54];
          // Number of operations to compute entry: 3
          A[nzc23[j]*17 + nzc26[k]] += FE1_C0_D001[ip][j]*FE2_C4[ip][k]*I[55];
          // Number of operations to compute entry: 3
          A[nzc23[j]*17 + nzc27[k]] += FE1_C0_D001[ip][j]*FE2_C5[ip][k]*I[56];
        } // end loop over 'k'
      } // end loop over 'j'
      
      // Number of operations for primary indices: 8
      for (unsigned int j = 0; j < 4; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc25[j]*17 + 16] += FE2_C3_D100[ip][j]*I[57];
      } // end loop over 'j'
      
      // Number of operations for primary indices: 72
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 2; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc25[j]*17 + nzc13[k]] += FE1_C0_D001[ip][k]*FE2_C3_D100[ip][j]*I[58];
          // Number of operations to compute entry: 3
          A[nzc25[j]*17 + nzc14[k]] += FE1_C0_D001[ip][k]*FE2_C3_D100[ip][j]*I[59];
          // Number of operations to compute entry: 3
          A[nzc25[j]*17 + nzc15[k]] += FE1_C0_D001[ip][k]*FE2_C3_D100[ip][j]*I[60];
        } // end loop over 'k'
      } // end loop over 'j'
      
      // Number of operations for primary indices: 96
      for (unsigned int j = 0; j < 4; j++)
      {
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 3
          A[nzc12[j]*17 + nzc16[k]] += FE0[ip][j]*FE0[ip][k]*I[61];
          // Number of operations to compute entry: 3
          A[nzc25[j]*17 + nzc25[k]] += FE2_C3_D100[ip][j]*FE2_C3_D100[ip][k]*I[62];
        } // end loop over 'k'
      } // end loop over 'j'
      
      // Number of operations for primary indices: 8
      for (unsigned int k = 0; k < 4; k++)
      {
        // Number of operations to compute entry: 2
        A[16*17 + nzc25[k]] += FE2_C3_D100[ip][k]*I[63];
      } // end loop over 'k'
    } // end loop over 'ip'
  }

};


class vector_linear_pnp_forms_exterior_facet_integral_0_otherwise: public ufc::exterior_facet_integral
{
public:

  vector_linear_pnp_forms_exterior_facet_integral_0_otherwise() : ufc::exterior_facet_integral()
  {
    
  }

  ~vector_linear_pnp_forms_exterior_facet_integral_0_otherwise() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({false, false, false, false, false, true, false, true});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet][0];
    const unsigned int v1 = face_vertices[facet][1];
    const unsigned int v2 = face_vertices[facet][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (coordinate_dofs[3*v0 + 1]*coordinate_dofs[3*v1 + 2]  + coordinate_dofs[3*v0 + 2]*coordinate_dofs[3*v2 + 1]  + coordinate_dofs[3*v1 + 1]*coordinate_dofs[3*v2 + 2]) - (coordinate_dofs[3*v2 + 1]*coordinate_dofs[3*v1 + 2] + coordinate_dofs[3*v2 + 2]*coordinate_dofs[3*v0 + 1] + coordinate_dofs[3*v1 + 1]*coordinate_dofs[3*v0 + 2]);
    
    const double a1 = (coordinate_dofs[3*v0 + 2]*coordinate_dofs[3*v1 + 0]  + coordinate_dofs[3*v0 + 0]*coordinate_dofs[3*v2 + 2] + coordinate_dofs[3*v1 + 2]*coordinate_dofs[3*v2 + 0]) - (coordinate_dofs[3*v2 + 2]*coordinate_dofs[3*v1 + 0]  + coordinate_dofs[3*v2 + 0]*coordinate_dofs[3*v0 + 2] + coordinate_dofs[3*v1 + 2]*coordinate_dofs[3*v0 + 0]);
    
    const double a2 = (coordinate_dofs[3*v0 + 0]*coordinate_dofs[3*v1 + 1]  + coordinate_dofs[3*v0 + 1]*coordinate_dofs[3*v2 + 0]  + coordinate_dofs[3*v1 + 0]*coordinate_dofs[3*v2 + 1]) - (coordinate_dofs[3*v2 + 0]*coordinate_dofs[3*v1 + 1]  + coordinate_dofs[3*v2 + 1]*coordinate_dofs[3*v0 + 0]  + coordinate_dofs[3*v1 + 0]*coordinate_dofs[3*v0 + 1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    const bool direction = a0*(coordinate_dofs[3*facet] - coordinate_dofs[3*v0]) + a1*(coordinate_dofs[3*facet + 1] - coordinate_dofs[3*v0 + 1])  + a2*(coordinate_dofs[3*facet + 2] - coordinate_dofs[3*v0 + 2]) < 0;
    
    const double n0 = direction ? a0 / det : -a0 / det;
    const double n1 = direction ? a1 / det : -a1 / det;
    const double n2 = direction ? a2 / det : -a2 / det;
    
    // Facet area (divide by two because 'det' is scaled by area of reference triangle)
    
    // Min edge length of facet
    double min_facet_edge_length;
    compute_min_facet_edge_length_tetrahedron_3d(min_facet_edge_length, facet, coordinate_dofs);
    
    
    // Max edge length of facet
    double max_facet_edge_length;
    compute_max_facet_edge_length_tetrahedron_3d(max_facet_edge_length, facet, coordinate_dofs);
    
    
    // Compute cell volume
    const double volume = std::abs(detJ)/6.0;
    
    
    // Compute circumradius
    const double v1v2  = std::sqrt( (coordinate_dofs[6] - coordinate_dofs[3])*(coordinate_dofs[6] - coordinate_dofs[3]) + (coordinate_dofs[7] - coordinate_dofs[4])*(coordinate_dofs[7] - coordinate_dofs[4]) + (coordinate_dofs[8] - coordinate_dofs[5])*(coordinate_dofs[8] - coordinate_dofs[5]) );
    const double v0v2  = std::sqrt(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]);
    const double v0v1  = std::sqrt(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]);
    const double v0v3  = std::sqrt(J[2]*J[2] + J[5]*J[5] + J[8]*J[8]);
    const double v1v3  = std::sqrt( (coordinate_dofs[9] - coordinate_dofs[3])*(coordinate_dofs[9] - coordinate_dofs[3]) + (coordinate_dofs[10] - coordinate_dofs[4])*(coordinate_dofs[10] - coordinate_dofs[4]) + (coordinate_dofs[11] - coordinate_dofs[5])*(coordinate_dofs[11] - coordinate_dofs[5]) );
    const double v2v3  = std::sqrt( (coordinate_dofs[9] - coordinate_dofs[6])*(coordinate_dofs[9] - coordinate_dofs[6]) + (coordinate_dofs[10] - coordinate_dofs[7])*(coordinate_dofs[10] - coordinate_dofs[7]) + (coordinate_dofs[11] - coordinate_dofs[8])*(coordinate_dofs[11] - coordinate_dofs[8]) );
    const  double la   = v1v2*v0v3;
    const  double lb   = v0v2*v1v3;
    const  double lc   = v0v1*v2v3;
    const  double s    = 0.5*(la+lb+lc);
    const  double area = std::sqrt(s*(s-la)*(s-lb)*(s-lc));
    const double circumradius = area / ( 6.0*volume );
    
    
    // Array of quadrature weights.
    static const double W3[3] = {0.166666666666667, 0.166666666666667, 0.166666666666667};
    // Quadrature points on the UFC reference element: (0.166666666666667, 0.166666666666667), (0.166666666666667, 0.666666666666667), (0.666666666666667, 0.166666666666667)
    
    // Values of basis functions at quadrature points.
    static const double FE0_f0_C3[3][4] = \
    {{-0.666666666666667, -0.333333333333333, -0.666666666666667, 0.666666666666667},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {12, 13, 14, 15};
    
    static const double FE0_f0_C4[3][4] = \
    {{-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667},
    {-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667},
    {-0.666666666666667, 0.666666666666666, 0.333333333333334, 0.666666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc4[4] = {12, 13, 14, 15};
    
    static const double FE0_f0_C5[3][4] = \
    {{-0.166666666666667, 0.166666666666667, -0.166666666666667, -0.833333333333333},
    {-0.666666666666666, 0.666666666666666, -0.666666666666666, -0.333333333333334},
    {-0.166666666666667, 0.166666666666667, -0.166666666666667, -0.833333333333333}};
    
    // Array of non-zero columns
    static const unsigned int nzc5[4] = {12, 13, 14, 15};
    
    static const double FE0_f1_C3[3][1] = \
    {{-1.0},
    {-1.0},
    {-1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc10[1] = {13};
    
    // Array of non-zero columns
    static const unsigned int nzc20[1] = {15};
    
    static const double FE0_f2_C3[3][4] = \
    {{-0.166666666666666, -0.833333333333334, -0.166666666666666, 0.166666666666666},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667},
    {-0.666666666666667, -0.333333333333333, -0.666666666666667, 0.666666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc14[4] = {12, 13, 14, 15};
    
    static const double FE0_f3_C4[3][4] = \
    {{-0.166666666666667, 0.166666666666666, 0.833333333333333, 0.166666666666667},
    {-0.666666666666667, 0.666666666666666, 0.333333333333334, 0.666666666666667},
    {-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc19[4] = {12, 13, 14, 15};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 289; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 168.
    double G[6];
    G[0] = det*w[5][0]*w[7][0]*(J[0]*J[0]*n0*n0 + J[3]*n1*(2.0*J[0]*n0 + J[3]*n1) + J[6]*n2*(2.0*(J[0]*n0 + J[3]*n1) + J[6]*n2))/(circumradius*detJ*detJ);
    G[1] = det*w[5][0]*w[7][0]*(J[0]*J[1]*n0*n0 + n1*(J[3]*J[4]*n1 + n0*(J[0]*J[4] + J[1]*J[3])) + n2*(J[6]*(J[1]*n0 + J[4]*n1) + J[7]*(J[0]*n0 + J[3]*n1 + J[6]*n2)))/(circumradius*detJ*detJ);
    G[2] = det*w[5][0]*w[7][0]*(J[0]*J[2]*n0*n0 + n1*(J[3]*J[5]*n1 + n0*(J[0]*J[5] + J[2]*J[3])) + n2*(J[6]*(J[2]*n0 + J[5]*n1) + J[8]*(J[0]*n0 + J[3]*n1 + J[6]*n2)))/(circumradius*detJ*detJ);
    G[3] = det*w[5][0]*w[7][0]*(J[1]*J[1]*n0*n0 + J[4]*n1*(2.0*J[1]*n0 + J[4]*n1) + J[7]*n2*(2.0*(J[1]*n0 + J[4]*n1) + J[7]*n2))/(circumradius*detJ*detJ);
    G[4] = det*w[5][0]*w[7][0]*(J[1]*J[2]*n0*n0 + n1*(J[4]*J[5]*n1 + n0*(J[1]*J[5] + J[2]*J[4])) + n2*(J[7]*(J[2]*n0 + J[5]*n1) + J[8]*(J[1]*n0 + J[4]*n1 + J[7]*n2)))/(circumradius*detJ*detJ);
    G[5] = det*w[5][0]*w[7][0]*(J[2]*J[2]*n0*n0 + J[5]*n1*(2.0*J[2]*n0 + J[5]*n1) + J[8]*n2*(2.0*(J[2]*n0 + J[5]*n1) + J[8]*n2))/(circumradius*detJ*detJ);
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 1314
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 1314
      for (unsigned int ip = 0; ip < 3; ip++)
      {
        
        // Number of operations to compute ip constants: 6
        double I[6];
        // Number of operations: 1
        I[0] = G[0]*W3[ip];
        
        // Number of operations: 1
        I[1] = G[1]*W3[ip];
        
        // Number of operations: 1
        I[2] = G[2]*W3[ip];
        
        // Number of operations: 1
        I[3] = G[3]*W3[ip];
        
        // Number of operations: 1
        I[4] = G[4]*W3[ip];
        
        // Number of operations: 1
        I[5] = G[5]*W3[ip];
        
        
        // Number of operations for primary indices: 432
        for (unsigned int j = 0; j < 4; j++)
        {
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc3[j]*17 + nzc3[k]] += FE0_f0_C3[ip][j]*FE0_f0_C3[ip][k]*I[0];
            // Number of operations to compute entry: 3
            A[nzc3[j]*17 + nzc4[k]] += FE0_f0_C3[ip][j]*FE0_f0_C4[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc3[j]*17 + nzc5[k]] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[2];
            // Number of operations to compute entry: 3
            A[nzc4[j]*17 + nzc3[k]] += FE0_f0_C3[ip][k]*FE0_f0_C4[ip][j]*I[1];
            // Number of operations to compute entry: 3
            A[nzc4[j]*17 + nzc4[k]] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc4[j]*17 + nzc5[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc5[j]*17 + nzc3[k]] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[2];
            // Number of operations to compute entry: 3
            A[nzc5[j]*17 + nzc4[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[4];
            // Number of operations to compute entry: 3
            A[nzc5[j]*17 + nzc5[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[5];
          } // end loop over 'k'
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 747
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 747
      for (unsigned int ip = 0; ip < 3; ip++)
      {
        
        // Number of operations to compute ip constants: 6
        double I[6];
        // Number of operations: 1
        I[0] = G[0]*W3[ip];
        
        // Number of operations: 1
        I[1] = G[1]*W3[ip];
        
        // Number of operations: 1
        I[2] = G[2]*W3[ip];
        
        // Number of operations: 1
        I[3] = G[3]*W3[ip];
        
        // Number of operations: 1
        I[4] = G[4]*W3[ip];
        
        // Number of operations: 1
        I[5] = G[5]*W3[ip];
        
        
        // Number of operations for primary indices: 3
        for (unsigned int j = 0; j < 1; j++)
        {
          for (unsigned int k = 0; k < 1; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc10[j]*17 + nzc10[k]] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[0];
          } // end loop over 'k'
        } // end loop over 'j'
        
        // Number of operations for primary indices: 24
        for (unsigned int j = 0; j < 1; j++)
        {
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc10[j]*17 + nzc4[k]] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[1];
            // Number of operations to compute entry: 3
            A[nzc10[j]*17 + nzc5[k]] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[2];
          } // end loop over 'k'
        } // end loop over 'j'
        
        // Number of operations for primary indices: 24
        for (unsigned int j = 0; j < 4; j++)
        {
          for (unsigned int k = 0; k < 1; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc4[j]*17 + nzc10[k]] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc5[j]*17 + nzc10[k]] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[2];
          } // end loop over 'k'
        } // end loop over 'j'
        
        // Number of operations for primary indices: 192
        for (unsigned int j = 0; j < 4; j++)
        {
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc4[j]*17 + nzc4[k]] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc4[j]*17 + nzc5[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc5[j]*17 + nzc4[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[4];
            // Number of operations to compute entry: 3
            A[nzc5[j]*17 + nzc5[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[5];
          } // end loop over 'k'
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 693
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 693
      for (unsigned int ip = 0; ip < 3; ip++)
      {
        
        // Number of operations to compute ip constants: 6
        double I[6];
        // Number of operations: 1
        I[0] = G[3]*W3[ip];
        
        // Number of operations: 1
        I[1] = G[1]*W3[ip];
        
        // Number of operations: 1
        I[2] = G[4]*W3[ip];
        
        // Number of operations: 1
        I[3] = G[0]*W3[ip];
        
        // Number of operations: 1
        I[4] = G[2]*W3[ip];
        
        // Number of operations: 1
        I[5] = G[5]*W3[ip];
        
        
        // Number of operations for primary indices: 1
        // Number of operations to compute entry: 1
        A[252] += I[0];
        
        // Number of operations for primary indices: 16
        for (unsigned int j = 0; j < 4; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc14[j]*17 + 14] += FE0_f2_C3[ip][j]*I[1];
          // Number of operations to compute entry: 2
          A[nzc5[j]*17 + 14] += FE0_f0_C5[ip][j]*I[2];
        } // end loop over 'j'
        
        // Number of operations for primary indices: 192
        for (unsigned int j = 0; j < 4; j++)
        {
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc14[j]*17 + nzc14[k]] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc14[j]*17 + nzc5[k]] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[4];
            // Number of operations to compute entry: 3
            A[nzc5[j]*17 + nzc14[k]] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc5[j]*17 + nzc5[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[5];
          } // end loop over 'k'
        } // end loop over 'j'
        
        // Number of operations for primary indices: 16
        for (unsigned int k = 0; k < 4; k++)
        {
          // Number of operations to compute entry: 2
          A[14*17 + nzc14[k]] += FE0_f2_C3[ip][k]*I[1];
          // Number of operations to compute entry: 2
          A[14*17 + nzc5[k]] += FE0_f0_C5[ip][k]*I[2];
        } // end loop over 'k'
      } // end loop over 'ip'
        break;
      }
    case 3:
      {
        // Total number of operations to compute element tensor (from this point): 747
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 747
      for (unsigned int ip = 0; ip < 3; ip++)
      {
        
        // Number of operations to compute ip constants: 6
        double I[6];
        // Number of operations: 1
        I[0] = G[5]*W3[ip];
        
        // Number of operations: 1
        I[1] = G[2]*W3[ip];
        
        // Number of operations: 1
        I[2] = G[4]*W3[ip];
        
        // Number of operations: 1
        I[3] = G[0]*W3[ip];
        
        // Number of operations: 1
        I[4] = G[1]*W3[ip];
        
        // Number of operations: 1
        I[5] = G[3]*W3[ip];
        
        
        // Number of operations for primary indices: 3
        for (unsigned int j = 0; j < 1; j++)
        {
          for (unsigned int k = 0; k < 1; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc20[j]*17 + nzc20[k]] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[0];
          } // end loop over 'k'
        } // end loop over 'j'
        
        // Number of operations for primary indices: 24
        for (unsigned int j = 0; j < 1; j++)
        {
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc20[j]*17 + nzc14[k]] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[1];
            // Number of operations to compute entry: 3
            A[nzc20[j]*17 + nzc19[k]] += FE0_f1_C3[ip][j]*FE0_f3_C4[ip][k]*I[2];
          } // end loop over 'k'
        } // end loop over 'j'
        
        // Number of operations for primary indices: 24
        for (unsigned int j = 0; j < 4; j++)
        {
          for (unsigned int k = 0; k < 1; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc14[j]*17 + nzc20[k]] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[1];
            // Number of operations to compute entry: 3
            A[nzc19[j]*17 + nzc20[k]] += FE0_f1_C3[ip][k]*FE0_f3_C4[ip][j]*I[2];
          } // end loop over 'k'
        } // end loop over 'j'
        
        // Number of operations for primary indices: 192
        for (unsigned int j = 0; j < 4; j++)
        {
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 3
            A[nzc14[j]*17 + nzc14[k]] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[3];
            // Number of operations to compute entry: 3
            A[nzc14[j]*17 + nzc19[k]] += FE0_f2_C3[ip][j]*FE0_f3_C4[ip][k]*I[4];
            // Number of operations to compute entry: 3
            A[nzc19[j]*17 + nzc14[k]] += FE0_f2_C3[ip][k]*FE0_f3_C4[ip][j]*I[4];
            // Number of operations to compute entry: 3
            A[nzc19[j]*17 + nzc19[k]] += FE0_f3_C4[ip][j]*FE0_f3_C4[ip][k]*I[5];
          } // end loop over 'k'
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};


class vector_linear_pnp_forms_interior_facet_integral_0_otherwise: public ufc::interior_facet_integral
{
public:

  vector_linear_pnp_forms_interior_facet_integral_0_otherwise() : ufc::interior_facet_integral()
  {
    
  }

  ~vector_linear_pnp_forms_interior_facet_integral_0_otherwise() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({false, false, false, false, false, true, true, true});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs_0,
                       const double * coordinate_dofs_1,
                       std::size_t facet_0,
                       std::size_t facet_1,
                       int cell_orientation_0,
                       int cell_orientation_1) const final override
  {
    // Compute Jacobian
    double J_0[9];
    compute_jacobian_tetrahedron_3d(J_0, coordinate_dofs_0);
    
    // Compute Jacobian inverse and determinant
    double K_0[9];
    double detJ_0;
    compute_jacobian_inverse_tetrahedron_3d(K_0, detJ_0, J_0);
    
    // Compute Jacobian
    double J_1[9];
    compute_jacobian_tetrahedron_3d(J_1, coordinate_dofs_1);
    
    // Compute Jacobian inverse and determinant
    double K_1[9];
    double detJ_1;
    compute_jacobian_inverse_tetrahedron_3d(K_1, detJ_1, J_1);
    
    
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet_0][0];
    const unsigned int v1 = face_vertices[facet_0][1];
    const unsigned int v2 = face_vertices[facet_0][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (coordinate_dofs_0[3*v0 + 1]*coordinate_dofs_0[3*v1 + 2]  + coordinate_dofs_0[3*v0 + 2]*coordinate_dofs_0[3*v2 + 1]  + coordinate_dofs_0[3*v1 + 1]*coordinate_dofs_0[3*v2 + 2]) - (coordinate_dofs_0[3*v2 + 1]*coordinate_dofs_0[3*v1 + 2] + coordinate_dofs_0[3*v2 + 2]*coordinate_dofs_0[3*v0 + 1] + coordinate_dofs_0[3*v1 + 1]*coordinate_dofs_0[3*v0 + 2]);
    
    const double a1 = (coordinate_dofs_0[3*v0 + 2]*coordinate_dofs_0[3*v1 + 0]  + coordinate_dofs_0[3*v0 + 0]*coordinate_dofs_0[3*v2 + 2] + coordinate_dofs_0[3*v1 + 2]*coordinate_dofs_0[3*v2 + 0]) - (coordinate_dofs_0[3*v2 + 2]*coordinate_dofs_0[3*v1 + 0]  + coordinate_dofs_0[3*v2 + 0]*coordinate_dofs_0[3*v0 + 2] + coordinate_dofs_0[3*v1 + 2]*coordinate_dofs_0[3*v0 + 0]);
    
    const double a2 = (coordinate_dofs_0[3*v0 + 0]*coordinate_dofs_0[3*v1 + 1]  + coordinate_dofs_0[3*v0 + 1]*coordinate_dofs_0[3*v2 + 0]  + coordinate_dofs_0[3*v1 + 0]*coordinate_dofs_0[3*v2 + 1]) - (coordinate_dofs_0[3*v2 + 0]*coordinate_dofs_0[3*v1 + 1]  + coordinate_dofs_0[3*v2 + 1]*coordinate_dofs_0[3*v0 + 0]  + coordinate_dofs_0[3*v1 + 0]*coordinate_dofs_0[3*v0 + 1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    const bool direction = a0*(coordinate_dofs_0[3*facet_0] - coordinate_dofs_0[3*v0]) + a1*(coordinate_dofs_0[3*facet_0 + 1] - coordinate_dofs_0[3*v0 + 1])  + a2*(coordinate_dofs_0[3*facet_0 + 2] - coordinate_dofs_0[3*v0 + 2]) < 0;
    
    const double n_00 = direction ? a0 / det : -a0 / det;
    const double n_01 = direction ? a1 / det : -a1 / det;
    const double n_02 = direction ? a2 / det : -a2 / det;
    
    // Facet area (divide by two because 'det' is scaled by area of reference triangle)
    
    // Min edge length of facet
    double min_facet_edge_length;
    compute_min_facet_edge_length_tetrahedron_3d(min_facet_edge_length, facet_0, coordinate_dofs_0);
    
    
    // Max edge length of facet
    double max_facet_edge_length;
    compute_max_facet_edge_length_tetrahedron_3d(max_facet_edge_length, facet_0, coordinate_dofs_0);
    
    
    // Compute cell volume
    const double volume_0 = std::abs(detJ_0)/6.0;
    // Compute cell volume
    const double volume_1 = std::abs(detJ_1)/6.0;
    
    
    // Compute circumradius
    const double v1v2_0  = std::sqrt( (coordinate_dofs_0[6] - coordinate_dofs_0[3])*(coordinate_dofs_0[6] - coordinate_dofs_0[3]) + (coordinate_dofs_0[7] - coordinate_dofs_0[4])*(coordinate_dofs_0[7] - coordinate_dofs_0[4]) + (coordinate_dofs_0[8] - coordinate_dofs_0[5])*(coordinate_dofs_0[8] - coordinate_dofs_0[5]) );
    const double v0v2_0  = std::sqrt(J_0[1]*J_0[1] + J_0[4]*J_0[4] + J_0[7]*J_0[7]);
    const double v0v1_0  = std::sqrt(J_0[0]*J_0[0] + J_0[3]*J_0[3] + J_0[6]*J_0[6]);
    const double v0v3_0  = std::sqrt(J_0[2]*J_0[2] + J_0[5]*J_0[5] + J_0[8]*J_0[8]);
    const double v1v3_0  = std::sqrt( (coordinate_dofs_0[9] - coordinate_dofs_0[3])*(coordinate_dofs_0[9] - coordinate_dofs_0[3]) + (coordinate_dofs_0[10] - coordinate_dofs_0[4])*(coordinate_dofs_0[10] - coordinate_dofs_0[4]) + (coordinate_dofs_0[11] - coordinate_dofs_0[5])*(coordinate_dofs_0[11] - coordinate_dofs_0[5]) );
    const double v2v3_0  = std::sqrt( (coordinate_dofs_0[9] - coordinate_dofs_0[6])*(coordinate_dofs_0[9] - coordinate_dofs_0[6]) + (coordinate_dofs_0[10] - coordinate_dofs_0[7])*(coordinate_dofs_0[10] - coordinate_dofs_0[7]) + (coordinate_dofs_0[11] - coordinate_dofs_0[8])*(coordinate_dofs_0[11] - coordinate_dofs_0[8]) );
    const  double la_0   = v1v2_0*v0v3_0;
    const  double lb_0   = v0v2_0*v1v3_0;
    const  double lc_0   = v0v1_0*v2v3_0;
    const  double s_0    = 0.5*(la_0+lb_0+lc_0);
    const  double area_0 = std::sqrt(s_0*(s_0-la_0)*(s_0-lb_0)*(s_0-lc_0));
    const double circumradius_0 = area_0 / ( 6.0*volume_0 );
    // Compute circumradius
    const double v1v2_1  = std::sqrt( (coordinate_dofs_1[6] - coordinate_dofs_1[3])*(coordinate_dofs_1[6] - coordinate_dofs_1[3]) + (coordinate_dofs_1[7] - coordinate_dofs_1[4])*(coordinate_dofs_1[7] - coordinate_dofs_1[4]) + (coordinate_dofs_1[8] - coordinate_dofs_1[5])*(coordinate_dofs_1[8] - coordinate_dofs_1[5]) );
    const double v0v2_1  = std::sqrt(J_1[1]*J_1[1] + J_1[4]*J_1[4] + J_1[7]*J_1[7]);
    const double v0v1_1  = std::sqrt(J_1[0]*J_1[0] + J_1[3]*J_1[3] + J_1[6]*J_1[6]);
    const double v0v3_1  = std::sqrt(J_1[2]*J_1[2] + J_1[5]*J_1[5] + J_1[8]*J_1[8]);
    const double v1v3_1  = std::sqrt( (coordinate_dofs_1[9] - coordinate_dofs_1[3])*(coordinate_dofs_1[9] - coordinate_dofs_1[3]) + (coordinate_dofs_1[10] - coordinate_dofs_1[4])*(coordinate_dofs_1[10] - coordinate_dofs_1[4]) + (coordinate_dofs_1[11] - coordinate_dofs_1[5])*(coordinate_dofs_1[11] - coordinate_dofs_1[5]) );
    const double v2v3_1  = std::sqrt( (coordinate_dofs_1[9] - coordinate_dofs_1[6])*(coordinate_dofs_1[9] - coordinate_dofs_1[6]) + (coordinate_dofs_1[10] - coordinate_dofs_1[7])*(coordinate_dofs_1[10] - coordinate_dofs_1[7]) + (coordinate_dofs_1[11] - coordinate_dofs_1[8])*(coordinate_dofs_1[11] - coordinate_dofs_1[8]) );
    const  double la_1   = v1v2_1*v0v3_1;
    const  double lb_1   = v0v2_1*v1v3_1;
    const  double lc_1   = v0v1_1*v2v3_1;
    const  double s_1    = 0.5*(la_1+lb_1+lc_1);
    const  double area_1 = std::sqrt(s_1*(s_1-la_1)*(s_1-lb_1)*(s_1-lc_1));
    const double circumradius_1 = area_1 / ( 6.0*volume_1 );
    
    
    // Array of quadrature weights.
    static const double W3[3] = {0.166666666666667, 0.166666666666667, 0.166666666666667};
    // Quadrature points on the UFC reference element: (0.166666666666667, 0.166666666666667), (0.166666666666667, 0.666666666666667), (0.666666666666667, 0.166666666666667)
    
    // Values of basis functions at quadrature points.
    static const double FE0_f0_C3[3][4] = \
    {{-0.666666666666667, -0.333333333333333, -0.666666666666667, 0.666666666666667},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc12[4] = {12, 13, 14, 15};
    
    static const double FE0_f0_C3_D100[3][4] = \
    {{-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc13[4] = {12, 13, 14, 15};
    
    static const double FE0_f0_C4[3][4] = \
    {{-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667},
    {-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667},
    {-0.666666666666667, 0.666666666666666, 0.333333333333334, 0.666666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc14[4] = {12, 13, 14, 15};
    
    static const double FE0_f0_C5[3][4] = \
    {{-0.166666666666667, 0.166666666666667, -0.166666666666667, -0.833333333333333},
    {-0.666666666666666, 0.666666666666666, -0.666666666666666, -0.333333333333334},
    {-0.166666666666667, 0.166666666666667, -0.166666666666667, -0.833333333333333}};
    
    // Array of non-zero columns
    static const unsigned int nzc15[4] = {12, 13, 14, 15};
    
    static const double FE0_f1_C3[3][1] = \
    {{-1.0},
    {-1.0},
    {-1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc20[1] = {13};
    
    // Array of non-zero columns
    static const unsigned int nzc30[1] = {15};
    
    static const double FE0_f2_C3[3][4] = \
    {{-0.166666666666666, -0.833333333333334, -0.166666666666666, 0.166666666666666},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667},
    {-0.666666666666667, -0.333333333333333, -0.666666666666667, 0.666666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc24[4] = {12, 13, 14, 15};
    
    static const double FE0_f3_C4[3][4] = \
    {{-0.166666666666667, 0.166666666666666, 0.833333333333333, 0.166666666666667},
    {-0.666666666666667, 0.666666666666666, 0.333333333333334, 0.666666666666667},
    {-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc29[4] = {12, 13, 14, 15};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 1156; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 1605.
    double G[33];
    G[0] = 2.0*det*w[5][0]*w[7][0]*(J_1[0]*J_1[0] + J_1[3]*J_1[3] + J_1[6]*J_1[6])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[1] = det*w[5][0]*w[6][0]*(-0.5*(J_1[0]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + J_1[3]*(J_1[0]*K_1[0]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + J_1[6]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[0]*K_1[0] + J_1[3]*K_1[1]))) - (J_1[0]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_1[3]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_1[6]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8])))/(detJ_1*detJ_1);
    G[2] = 2.0*det*w[5][0]*w[7][0]*(J_1[0]*J_1[1] + J_1[3]*J_1[4] + J_1[6]*J_1[7])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[3] = 2.0*det*w[5][0]*w[7][0]*(J_1[0]*J_1[2] + J_1[3]*J_1[5] + J_1[6]*J_1[8])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[4] = -2.0*det*w[5][0]*w[7][0]*(J_0[0]*J_1[0] + J_0[3]*J_1[3] + J_0[6]*J_1[6])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[5] = det*w[5][0]*w[6][0]*(-0.5*(n_00*(J_1[3]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[6]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[0]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[6]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[0]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[3]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]))) - (J_1[0]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_1[3]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_1[6]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8])))/(detJ_0*detJ_1);
    G[6] = -2.0*det*w[5][0]*w[7][0]*(J_0[1]*J_1[0] + J_0[4]*J_1[3] + J_0[7]*J_1[6])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[7] = -2.0*det*w[5][0]*w[7][0]*(J_0[2]*J_1[0] + J_0[5]*J_1[3] + J_0[8]*J_1[6])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[8] = det*w[5][0]*w[6][0]*(-0.5*(J_1[1]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[5]*K_1[6]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[8]*K_1[6])) + J_1[4]*(J_1[1]*K_1[3]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[8]*K_1[7])) + J_1[7]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[1]*K_1[3] + J_1[4]*K_1[4]))) - (J_1[1]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_1[4]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_1[7]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8])))/(detJ_1*detJ_1);
    G[9] = det*w[5][0]*w[6][0]*(-0.5*(J_1[2]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3])) + J_1[5]*(J_1[2]*K_1[6]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4])) + J_1[8]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[2]*K_1[6] + J_1[5]*K_1[7]))) - (J_1[2]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_1[5]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_1[8]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8])))/(detJ_1*detJ_1);
    G[10] = det*w[5][0]*w[6][0]*(0.5*(n_00*(J_0[3]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[6]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[0]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[6]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[0]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[3]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]))) + J_0[0]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_0[3]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_0[6]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]))/(detJ_0*detJ_1);
    G[11] = det*w[5][0]*w[6][0]*(0.5*(n_00*(J_0[4]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[7]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[1]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[7]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[1]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[4]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]))) + J_0[1]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_0[4]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_0[7]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]))/(detJ_0*detJ_1);
    G[12] = det*w[5][0]*w[6][0]*(0.5*(n_00*(J_0[5]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[8]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[2]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[8]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[2]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[5]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]))) + J_0[2]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_0[5]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_0[8]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]))/(detJ_0*detJ_1);
    G[13] = 2.0*det*w[5][0]*w[7][0]*(J_1[1]*J_1[1] + J_1[4]*J_1[4] + J_1[7]*J_1[7])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[14] = 2.0*det*w[5][0]*w[7][0]*(J_1[1]*J_1[2] + J_1[4]*J_1[5] + J_1[7]*J_1[8])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[15] = -2.0*det*w[5][0]*w[7][0]*(J_0[0]*J_1[1] + J_0[3]*J_1[4] + J_0[6]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[16] = det*w[5][0]*w[6][0]*(-0.5*(n_00*(J_1[4]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[7]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[1]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[7]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[1]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[4]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]))) - (J_1[1]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_1[4]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_1[7]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8])))/(detJ_0*detJ_1);
    G[17] = -2.0*det*w[5][0]*w[7][0]*(J_0[1]*J_1[1] + J_0[4]*J_1[4] + J_0[7]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[18] = -2.0*det*w[5][0]*w[7][0]*(J_0[2]*J_1[1] + J_0[5]*J_1[4] + J_0[8]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[19] = 2.0*det*w[5][0]*w[7][0]*(J_1[2]*J_1[2] + J_1[5]*J_1[5] + J_1[8]*J_1[8])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[20] = -2.0*det*w[5][0]*w[7][0]*(J_0[0]*J_1[2] + J_0[3]*J_1[5] + J_0[6]*J_1[8])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[21] = det*w[5][0]*w[6][0]*(-0.5*(n_00*(J_1[5]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[8]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[2]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[8]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[2]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[5]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]))) - (J_1[2]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_1[5]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_1[8]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8])))/(detJ_0*detJ_1);
    G[22] = -2.0*det*w[5][0]*w[7][0]*(J_0[1]*J_1[2] + J_0[4]*J_1[5] + J_0[7]*J_1[8])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[23] = -2.0*det*w[5][0]*w[7][0]*(J_0[2]*J_1[2] + J_0[5]*J_1[5] + J_0[8]*J_1[8])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[24] = 2.0*det*w[5][0]*w[7][0]*(J_0[0]*J_0[0] + J_0[3]*J_0[3] + J_0[6]*J_0[6])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[25] = det*w[5][0]*w[6][0]*(0.5*(J_0[0]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + J_0[3]*(J_0[0]*K_0[0]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + J_0[6]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[0]*K_0[0] + J_0[3]*K_0[1]))) + J_0[0]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_0[3]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_0[6]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]))/(detJ_0*detJ_0);
    G[26] = 2.0*det*w[5][0]*w[7][0]*(J_0[0]*J_0[1] + J_0[3]*J_0[4] + J_0[6]*J_0[7])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[27] = 2.0*det*w[5][0]*w[7][0]*(J_0[0]*J_0[2] + J_0[3]*J_0[5] + J_0[6]*J_0[8])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[28] = det*w[5][0]*w[6][0]*(0.5*(J_0[1]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[5]*K_0[6]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[8]*K_0[6])) + J_0[4]*(J_0[1]*K_0[3]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[8]*K_0[7])) + J_0[7]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[1]*K_0[3] + J_0[4]*K_0[4]))) + J_0[1]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_0[4]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_0[7]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]))/(detJ_0*detJ_0);
    G[29] = det*w[5][0]*w[6][0]*(0.5*(J_0[2]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3])) + J_0[5]*(J_0[2]*K_0[6]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4])) + J_0[8]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[2]*K_0[6] + J_0[5]*K_0[7]))) + J_0[2]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_0[5]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_0[8]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]))/(detJ_0*detJ_0);
    G[30] = 2.0*det*w[5][0]*w[7][0]*(J_0[1]*J_0[1] + J_0[4]*J_0[4] + J_0[7]*J_0[7])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[31] = 2.0*det*w[5][0]*w[7][0]*(J_0[1]*J_0[2] + J_0[4]*J_0[5] + J_0[7]*J_0[8])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[32] = 2.0*det*w[5][0]*w[7][0]*(J_0[2]*J_0[2] + J_0[5]*J_0[5] + J_0[8]*J_0[8])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet_0)
    {
    case 0:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 8739
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 8739
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 2880
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C3[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C4[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][j]*FE0_f0_C3[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc13[k]] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc14[k]] += FE0_f0_C3[ip][j]*FE0_f0_C4[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc15[k]] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C4[ip][j]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C4[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc15[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C3[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc14[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C4[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc12[k]] += FE0_f0_C3[ip][j]*FE0_f0_C3[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc13[k]] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc14[k]] += FE0_f0_C3[ip][j]*FE0_f0_C4[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc15[k]] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C4[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc15[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C4[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc14[k]] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc15[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 7092
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 7092
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[0];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f1_C3[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc20[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f1_C3[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc20[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc20[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc20[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2160
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C4[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc15[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc14[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C4[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc12[k]] += FE0_f0_C3[ip][j]*FE0_f0_C3[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc13[k]] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc14[k]] += FE0_f0_C3[ip][j]*FE0_f0_C4[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc15[k]] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc15[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C4[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc14[k]] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc15[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 6918
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 6918
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[1085] += I[0];
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)*34 + 31] += FE0_f0_C3_D100[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)*34 + 31] += FE0_f0_C5[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 17)*34 + 31] += FE0_f2_C3[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc12[j]*34 + 31] += FE0_f0_C3[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]*34 + 31] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc14[j]*34 + 31] += FE0_f0_C4[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc15[j]*34 + 31] += FE0_f0_C5[ip][j]*I[7];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2160
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f2_C3[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f2_C3[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc24[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f2_C3[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc12[k]] += FE0_f0_C3[ip][j]*FE0_f0_C3[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc13[k]] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc14[k]] += FE0_f0_C3[ip][j]*FE0_f0_C4[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc15[k]] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc15[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc24[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f2_C3[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C4[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc14[k]] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc15[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc24[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 56
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 2
            A[31*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*I[1];
            // Number of operations to compute entry: 2
            A[31*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*I[2];
            // Number of operations to compute entry: 2
            A[31*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][k]*I[3];
            // Number of operations to compute entry: 2
            A[31*34 + nzc12[k]] += FE0_f0_C3[ip][k]*I[4];
            // Number of operations to compute entry: 2
            A[31*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*I[5];
            // Number of operations to compute entry: 2
            A[31*34 + nzc14[k]] += FE0_f0_C4[ip][k]*I[6];
            // Number of operations to compute entry: 2
            A[31*34 + nzc15[k]] += FE0_f0_C5[ip][k]*I[7];
          } // end loop over 'k'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 7092
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 7092
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[0];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f3_C4[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f1_C3[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][k]*FE0_f3_C4[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc30[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f1_C3[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc30[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc30[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc30[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2160
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f3_C4[ip][k]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f2_C3[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f2_C3[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][k]*FE0_f3_C4[ip][j]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f3_C4[ip][j]*FE0_f3_C4[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f3_C4[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f3_C4[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f3_C4[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc24[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f2_C3[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + (nzc29[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f3_C4[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc12[k]] += FE0_f0_C3[ip][j]*FE0_f0_C3[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc13[k]] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc14[k]] += FE0_f0_C3[ip][j]*FE0_f0_C4[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc12[j]*34 + nzc15[k]] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc29[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc24[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f2_C3[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc29[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f3_C4[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C4[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc14[k]] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc15[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc24[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc29[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f3_C4[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc12[k]] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 7092
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 7092
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc20[k]] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[0];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f1_C3[ip][j]*I[1];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[2];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc20[k]] += FE0_f0_C3[ip][j]*FE0_f1_C3[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc20[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc20[k]] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc20[k]] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc20[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc20[k]] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc20[k]] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2160
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C3[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C4[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc13[k]] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc14[k]] += FE0_f0_C3[ip][j]*FE0_f0_C4[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc15[k]] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C4[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc15[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C4[ip][j]*I[13];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc15[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc14[k]] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc15[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[14];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 5607
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5607
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc20[k]] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc20[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc20[k]] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[13];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc20[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc20[k]] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc20[k]] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc20[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc20[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc20[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc20[k]] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc20[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc20[k]] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc15[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc15[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc14[k]] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc15[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 5451
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5451
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[1085] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[nzc20[j]*34 + 31] += FE0_f1_C3[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc20[k]] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc24[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)*34 + 31] += FE0_f0_C3_D100[ip][j]*I[9];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)*34 + 31] += FE0_f0_C5[ip][j]*I[10];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 17)*34 + 31] += FE0_f2_C3[ip][j]*I[11];
            // Number of operations to compute entry: 2
            A[nzc13[j]*34 + 31] += FE0_f0_C3_D100[ip][j]*I[12];
            // Number of operations to compute entry: 2
            A[nzc14[j]*34 + 31] += FE0_f0_C4[ip][j]*I[13];
            // Number of operations to compute entry: 2
            A[nzc15[j]*34 + 31] += FE0_f0_C5[ip][j]*I[14];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc20[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc20[k]] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc20[k]] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc20[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc20[k]] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc20[k]] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f2_C3[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc15[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc24[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f2_C3[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc14[k]] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc15[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc24[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2
          for (unsigned int k = 0; k < 1; k++)
          {
            // Number of operations to compute entry: 2
            A[31*34 + nzc20[k]] += FE0_f1_C3[ip][k]*I[1];
          } // end loop over 'k'
          
          // Number of operations for primary indices: 48
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 2
            A[31*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*I[9];
            // Number of operations to compute entry: 2
            A[31*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*I[10];
            // Number of operations to compute entry: 2
            A[31*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][k]*I[11];
            // Number of operations to compute entry: 2
            A[31*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*I[12];
            // Number of operations to compute entry: 2
            A[31*34 + nzc14[k]] += FE0_f0_C4[ip][k]*I[13];
            // Number of operations to compute entry: 2
            A[31*34 + nzc15[k]] += FE0_f0_C5[ip][k]*I[14];
          } // end loop over 'k'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 5607
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5607
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[32]*W3[ip];
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc20[k]] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc20[k]] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f3_C4[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc24[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + (nzc29[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f3_C4[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[13];
              // Number of operations to compute entry: 3
              A[nzc20[j]*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc20[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc20[k]] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][k]*FE0_f3_C4[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc20[k]] += FE0_f1_C3[ip][k]*FE0_f3_C4[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc30[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc20[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc30[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc20[k]] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc30[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc20[k]] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f3_C4[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f2_C3[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][k]*FE0_f3_C4[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f3_C4[ip][j]*FE0_f3_C4[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f3_C4[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f3_C4[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc29[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc14[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc24[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f2_C3[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + (nzc29[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f3_C4[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc14[k]] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc14[j]*34 + nzc15[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc24[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc29[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f3_C4[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc14[k]] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 6918
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 6918
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[24]*W3[ip];
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[490] += I[0];
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc12[j] + 17)*34 + 14] += FE0_f0_C3[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)*34 + 14] += FE0_f0_C3_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc14[j] + 17)*34 + 14] += FE0_f0_C4[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)*34 + 14] += FE0_f0_C5[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]*34 + 14] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc15[j]*34 + 14] += FE0_f0_C5[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc24[j]*34 + 14] += FE0_f2_C3[ip][j]*I[7];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2160
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C3[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C4[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc13[k]] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc15[k]] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc24[k]] += FE0_f0_C3[ip][j]*FE0_f2_C3[ip][k]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C4[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc15[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc24[k]] += FE0_f0_C4[ip][j]*FE0_f2_C3[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc24[k]] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[13];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc24[k]] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f2_C3[ip][j]*I[14];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f2_C3[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc24[k]] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 56
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 2
            A[14*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*I[1];
            // Number of operations to compute entry: 2
            A[14*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*I[2];
            // Number of operations to compute entry: 2
            A[14*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*I[3];
            // Number of operations to compute entry: 2
            A[14*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*I[4];
            // Number of operations to compute entry: 2
            A[14*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*I[5];
            // Number of operations to compute entry: 2
            A[14*34 + nzc15[k]] += FE0_f0_C5[ip][k]*I[6];
            // Number of operations to compute entry: 2
            A[14*34 + nzc24[k]] += FE0_f2_C3[ip][k]*I[7];
          } // end loop over 'k'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 5451
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5451
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[24]*W3[ip];
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[490] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc20[j] + 17)*34 + 14] += FE0_f1_C3[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc24[k]] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)*34 + 14] += FE0_f0_C3_D100[ip][j]*I[9];
            // Number of operations to compute entry: 2
            A[(nzc14[j] + 17)*34 + 14] += FE0_f0_C4[ip][j]*I[10];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)*34 + 14] += FE0_f0_C5[ip][j]*I[11];
            // Number of operations to compute entry: 2
            A[nzc13[j]*34 + 14] += FE0_f0_C3_D100[ip][j]*I[12];
            // Number of operations to compute entry: 2
            A[nzc15[j]*34 + 14] += FE0_f0_C5[ip][j]*I[13];
            // Number of operations to compute entry: 2
            A[nzc24[j]*34 + 14] += FE0_f2_C3[ip][j]*I[14];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc20[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc20[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc20[k] + 17)] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc15[k]] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc24[k]] += FE0_f0_C4[ip][j]*FE0_f2_C3[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc24[k]] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc24[k]] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f2_C3[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc24[k]] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2
          for (unsigned int k = 0; k < 1; k++)
          {
            // Number of operations to compute entry: 2
            A[14*34 + (nzc20[k] + 17)] += FE0_f1_C3[ip][k]*I[1];
          } // end loop over 'k'
          
          // Number of operations for primary indices: 48
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 2
            A[14*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*I[9];
            // Number of operations to compute entry: 2
            A[14*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*I[10];
            // Number of operations to compute entry: 2
            A[14*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*I[11];
            // Number of operations to compute entry: 2
            A[14*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*I[12];
            // Number of operations to compute entry: 2
            A[14*34 + nzc15[k]] += FE0_f0_C5[ip][k]*I[13];
            // Number of operations to compute entry: 2
            A[14*34 + nzc24[k]] += FE0_f2_C3[ip][k]*I[14];
          } // end loop over 'k'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 5295
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5295
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[24]*W3[ip];
          
          
          // Number of operations for primary indices: 4
          // Number of operations to compute entry: 1
          A[1068] += I[0];
          // Number of operations to compute entry: 1
          A[1085] += I[1];
          // Number of operations to compute entry: 1
          A[490] += I[2];
          // Number of operations to compute entry: 1
          A[507] += I[0];
          
          // Number of operations for primary indices: 96
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)*34 + 14] += FE0_f0_C3_D100[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)*34 + 31] += FE0_f0_C3_D100[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)*34 + 14] += FE0_f0_C5[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)*34 + 31] += FE0_f0_C5[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 17)*34 + 14] += FE0_f2_C3[ip][j]*I[7];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 17)*34 + 31] += FE0_f2_C3[ip][j]*I[8];
            // Number of operations to compute entry: 2
            A[nzc13[j]*34 + 14] += FE0_f0_C3_D100[ip][j]*I[9];
            // Number of operations to compute entry: 2
            A[nzc13[j]*34 + 31] += FE0_f0_C3_D100[ip][j]*I[10];
            // Number of operations to compute entry: 2
            A[nzc15[j]*34 + 14] += FE0_f0_C5[ip][j]*I[11];
            // Number of operations to compute entry: 2
            A[nzc15[j]*34 + 31] += FE0_f0_C5[ip][j]*I[12];
            // Number of operations to compute entry: 2
            A[nzc24[j]*34 + 14] += FE0_f2_C3[ip][j]*I[13];
            // Number of operations to compute entry: 2
            A[nzc24[j]*34 + 31] += FE0_f2_C3[ip][j]*I[14];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc24[k]] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc24[k]] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc24[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc24[k]] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc24[k]] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 96
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 2
            A[14*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*I[3];
            // Number of operations to compute entry: 2
            A[14*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*I[5];
            // Number of operations to compute entry: 2
            A[14*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][k]*I[7];
            // Number of operations to compute entry: 2
            A[14*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*I[9];
            // Number of operations to compute entry: 2
            A[14*34 + nzc15[k]] += FE0_f0_C5[ip][k]*I[11];
            // Number of operations to compute entry: 2
            A[14*34 + nzc24[k]] += FE0_f2_C3[ip][k]*I[13];
            // Number of operations to compute entry: 2
            A[31*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*I[4];
            // Number of operations to compute entry: 2
            A[31*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*I[6];
            // Number of operations to compute entry: 2
            A[31*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][k]*I[8];
            // Number of operations to compute entry: 2
            A[31*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*I[10];
            // Number of operations to compute entry: 2
            A[31*34 + nzc15[k]] += FE0_f0_C5[ip][k]*I[12];
            // Number of operations to compute entry: 2
            A[31*34 + nzc24[k]] += FE0_f2_C3[ip][k]*I[14];
          } // end loop over 'k'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 5451
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5451
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[30]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[24]*W3[ip];
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[490] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc30[j] + 17)*34 + 14] += FE0_f1_C3[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f3_C4[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc24[k]] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)*34 + 14] += FE0_f0_C3_D100[ip][j]*I[9];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 17)*34 + 14] += FE0_f2_C3[ip][j]*I[10];
            // Number of operations to compute entry: 2
            A[(nzc29[j] + 17)*34 + 14] += FE0_f3_C4[ip][j]*I[11];
            // Number of operations to compute entry: 2
            A[nzc13[j]*34 + 14] += FE0_f0_C3_D100[ip][j]*I[12];
            // Number of operations to compute entry: 2
            A[nzc15[j]*34 + 14] += FE0_f0_C5[ip][j]*I[13];
            // Number of operations to compute entry: 2
            A[nzc24[j]*34 + 14] += FE0_f2_C3[ip][j]*I[14];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][k]*FE0_f3_C4[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc30[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc30[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f3_C4[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc24[k]] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][k]*FE0_f3_C4[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f3_C4[ip][j]*FE0_f3_C4[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f3_C4[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc24[k]] += FE0_f2_C3[ip][k]*FE0_f3_C4[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc29[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc15[k]] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc24[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + (nzc29[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f3_C4[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc15[k]] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc15[j]*34 + nzc24[k]] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc29[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f3_C4[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc15[k]] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc24[k]] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2
          for (unsigned int k = 0; k < 1; k++)
          {
            // Number of operations to compute entry: 2
            A[14*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][k]*I[1];
          } // end loop over 'k'
          
          // Number of operations for primary indices: 48
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 2
            A[14*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*I[9];
            // Number of operations to compute entry: 2
            A[14*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][k]*I[10];
            // Number of operations to compute entry: 2
            A[14*34 + (nzc29[k] + 17)] += FE0_f3_C4[ip][k]*I[11];
            // Number of operations to compute entry: 2
            A[14*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*I[12];
            // Number of operations to compute entry: 2
            A[14*34 + nzc15[k]] += FE0_f0_C5[ip][k]*I[13];
            // Number of operations to compute entry: 2
            A[14*34 + nzc24[k]] += FE0_f2_C3[ip][k]*I[14];
          } // end loop over 'k'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 7092
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 7092
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[30]*W3[ip];
          
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc30[k]] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[0];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f1_C3[ip][j]*I[1];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[2];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc24[k]] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc29[k]] += FE0_f1_C3[ip][j]*FE0_f3_C4[ip][k]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 84
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc30[k]] += FE0_f0_C3[ip][j]*FE0_f1_C3[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc30[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[2];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc30[k]] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc30[k]] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc30[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc30[k]] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc30[k]] += FE0_f1_C3[ip][k]*FE0_f3_C4[ip][j]*I[7];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2160
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C3[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C4[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3[ip][j]*FE0_f0_C5[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc13[k]] += FE0_f0_C3[ip][j]*FE0_f0_C3_D100[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc24[k]] += FE0_f0_C3[ip][j]*FE0_f2_C3[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[(nzc12[j] + 17)*34 + nzc29[k]] += FE0_f0_C3[ip][j]*FE0_f3_C4[ip][k]*I[14];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc29[k]] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C4[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc24[k]] += FE0_f0_C4[ip][j]*FE0_f2_C3[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc29[k]] += FE0_f0_C4[ip][j]*FE0_f3_C4[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C5[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc24[k]] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc29[k]] += FE0_f0_C5[ip][j]*FE0_f3_C4[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f0_C3_D100[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc29[k]] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f2_C3[ip][j]*I[13];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f2_C3[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc24[k]] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc29[k]] += FE0_f2_C3[ip][j]*FE0_f3_C4[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc12[k] + 17)] += FE0_f0_C3[ip][k]*FE0_f3_C4[ip][j]*I[14];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f3_C4[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f3_C4[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc24[k]] += FE0_f2_C3[ip][k]*FE0_f3_C4[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc29[k]] += FE0_f3_C4[ip][j]*FE0_f3_C4[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 5607
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5607
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[30]*W3[ip];
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc30[k]] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc20[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc30[k]] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc24[k]] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[(nzc20[j] + 17)*34 + nzc29[k]] += FE0_f1_C3[ip][j]*FE0_f3_C4[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f1_C3[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc24[k]] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc29[k]] += FE0_f1_C3[ip][j]*FE0_f3_C4[ip][k]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc30[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc30[k]] += FE0_f0_C4[ip][j]*FE0_f1_C3[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc20[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc30[k]] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc20[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc30[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc20[k] + 17)] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc30[k]] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[13];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc20[k] + 17)] += FE0_f1_C3[ip][k]*FE0_f3_C4[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc30[k]] += FE0_f1_C3[ip][k]*FE0_f3_C4[ip][j]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc29[k]] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C4[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc24[k]] += FE0_f0_C4[ip][j]*FE0_f2_C3[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc14[j] + 17)*34 + nzc29[k]] += FE0_f0_C4[ip][j]*FE0_f3_C4[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f0_C5[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc24[k]] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc29[k]] += FE0_f0_C5[ip][j]*FE0_f3_C4[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc14[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C4[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc29[k]] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f2_C3[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc24[k]] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc29[k]] += FE0_f2_C3[ip][j]*FE0_f3_C4[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc14[k] + 17)] += FE0_f0_C4[ip][k]*FE0_f3_C4[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f3_C4[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc24[k]] += FE0_f2_C3[ip][k]*FE0_f3_C4[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc29[k]] += FE0_f3_C4[ip][j]*FE0_f3_C4[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 5451
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5451
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[30]*W3[ip];
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[1085] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[nzc30[j]*34 + 31] += FE0_f1_C3[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 3
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc30[k]] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f1_C3[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc24[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc24[k]] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc29[k]] += FE0_f1_C3[ip][j]*FE0_f3_C4[ip][k]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)*34 + 31] += FE0_f0_C3_D100[ip][j]*I[9];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)*34 + 31] += FE0_f0_C5[ip][j]*I[10];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 17)*34 + 31] += FE0_f2_C3[ip][j]*I[11];
            // Number of operations to compute entry: 2
            A[nzc13[j]*34 + 31] += FE0_f0_C3_D100[ip][j]*I[12];
            // Number of operations to compute entry: 2
            A[nzc24[j]*34 + 31] += FE0_f2_C3[ip][j]*I[13];
            // Number of operations to compute entry: 2
            A[nzc29[j]*34 + 31] += FE0_f3_C4[ip][j]*I[14];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 72
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc30[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc30[k]] += FE0_f0_C5[ip][j]*FE0_f1_C3[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc30[k]] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc30[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc30[k]] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc30[k]] += FE0_f1_C3[ip][k]*FE0_f3_C4[ip][j]*I[8];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc29[k]] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f0_C5[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc24[k]] += FE0_f0_C5[ip][j]*FE0_f2_C3[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc15[j] + 17)*34 + nzc29[k]] += FE0_f0_C5[ip][j]*FE0_f3_C4[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc24[k]] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc29[k]] += FE0_f2_C3[ip][j]*FE0_f3_C4[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc15[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f0_C5[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc29[k]] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f2_C3[ip][j]*I[22];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc24[k]] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc29[k]] += FE0_f2_C3[ip][j]*FE0_f3_C4[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*FE0_f3_C4[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][k]*FE0_f3_C4[ip][j]*I[27];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc24[k]] += FE0_f2_C3[ip][k]*FE0_f3_C4[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc29[k]] += FE0_f3_C4[ip][j]*FE0_f3_C4[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 2
          for (unsigned int k = 0; k < 1; k++)
          {
            // Number of operations to compute entry: 2
            A[31*34 + nzc30[k]] += FE0_f1_C3[ip][k]*I[1];
          } // end loop over 'k'
          
          // Number of operations for primary indices: 48
          for (unsigned int k = 0; k < 4; k++)
          {
            // Number of operations to compute entry: 2
            A[31*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*I[9];
            // Number of operations to compute entry: 2
            A[31*34 + (nzc15[k] + 17)] += FE0_f0_C5[ip][k]*I[10];
            // Number of operations to compute entry: 2
            A[31*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][k]*I[11];
            // Number of operations to compute entry: 2
            A[31*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*I[12];
            // Number of operations to compute entry: 2
            A[31*34 + nzc24[k]] += FE0_f2_C3[ip][k]*I[13];
            // Number of operations to compute entry: 2
            A[31*34 + nzc29[k]] += FE0_f3_C4[ip][k]*I[14];
          } // end loop over 'k'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 5607
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 5607
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Number of operations to compute ip constants: 33
          double I[33];
          // Number of operations: 1
          I[0] = G[19]*W3[ip];
          
          // Number of operations: 1
          I[1] = G[23]*W3[ip];
          
          // Number of operations: 1
          I[2] = G[32]*W3[ip];
          
          // Number of operations: 1
          I[3] = G[9]*W3[ip];
          
          // Number of operations: 1
          I[4] = G[3]*W3[ip];
          
          // Number of operations: 1
          I[5] = G[14]*W3[ip];
          
          // Number of operations: 1
          I[6] = G[21]*W3[ip];
          
          // Number of operations: 1
          I[7] = G[20]*W3[ip];
          
          // Number of operations: 1
          I[8] = G[22]*W3[ip];
          
          // Number of operations: 1
          I[9] = G[12]*W3[ip];
          
          // Number of operations: 1
          I[10] = G[7]*W3[ip];
          
          // Number of operations: 1
          I[11] = G[18]*W3[ip];
          
          // Number of operations: 1
          I[12] = G[29]*W3[ip];
          
          // Number of operations: 1
          I[13] = G[27]*W3[ip];
          
          // Number of operations: 1
          I[14] = G[31]*W3[ip];
          
          // Number of operations: 1
          I[15] = G[1]*W3[ip];
          
          // Number of operations: 1
          I[16] = G[8]*W3[ip];
          
          // Number of operations: 1
          I[17] = G[10]*W3[ip];
          
          // Number of operations: 1
          I[18] = G[11]*W3[ip];
          
          // Number of operations: 1
          I[19] = G[0]*W3[ip];
          
          // Number of operations: 1
          I[20] = G[2]*W3[ip];
          
          // Number of operations: 1
          I[21] = G[5]*W3[ip];
          
          // Number of operations: 1
          I[22] = G[4]*W3[ip];
          
          // Number of operations: 1
          I[23] = G[6]*W3[ip];
          
          // Number of operations: 1
          I[24] = G[13]*W3[ip];
          
          // Number of operations: 1
          I[25] = G[16]*W3[ip];
          
          // Number of operations: 1
          I[26] = G[15]*W3[ip];
          
          // Number of operations: 1
          I[27] = G[17]*W3[ip];
          
          // Number of operations: 1
          I[28] = G[25]*W3[ip];
          
          // Number of operations: 1
          I[29] = G[28]*W3[ip];
          
          // Number of operations: 1
          I[30] = G[24]*W3[ip];
          
          // Number of operations: 1
          I[31] = G[26]*W3[ip];
          
          // Number of operations: 1
          I[32] = G[30]*W3[ip];
          
          
          // Number of operations for primary indices: 12
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[0];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc30[k]] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[1];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc30[k]] += FE0_f1_C3[ip][j]*FE0_f1_C3[ip][k]*I[2];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 1; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f3_C4[ip][k]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[6];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc24[k]] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[7];
              // Number of operations to compute entry: 3
              A[(nzc30[j] + 17)*34 + nzc29[k]] += FE0_f1_C3[ip][j]*FE0_f3_C4[ip][k]*I[8];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[9];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc24[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[10];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + (nzc29[k] + 17)] += FE0_f1_C3[ip][j]*FE0_f3_C4[ip][k]*I[11];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f1_C3[ip][j]*I[12];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc24[k]] += FE0_f1_C3[ip][j]*FE0_f2_C3[ip][k]*I[13];
              // Number of operations to compute entry: 3
              A[nzc30[j]*34 + nzc29[k]] += FE0_f1_C3[ip][j]*FE0_f3_C4[ip][k]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 144
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 1; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[3];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc30[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[9];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[4];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc30[k]] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[10];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][k]*FE0_f3_C4[ip][j]*I[5];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc30[k]] += FE0_f1_C3[ip][k]*FE0_f3_C4[ip][j]*I[11];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc30[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[6];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc30[k]] += FE0_f0_C3_D100[ip][j]*FE0_f1_C3[ip][k]*I[12];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[7];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc30[k]] += FE0_f1_C3[ip][k]*FE0_f2_C3[ip][j]*I[13];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc30[k] + 17)] += FE0_f1_C3[ip][k]*FE0_f3_C4[ip][j]*I[8];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc30[k]] += FE0_f1_C3[ip][k]*FE0_f3_C4[ip][j]*I[14];
            } // end loop over 'k'
          } // end loop over 'j'
          
          // Number of operations for primary indices: 1536
          for (unsigned int j = 0; j < 4; j++)
          {
            for (unsigned int k = 0; k < 4; k++)
            {
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[17];
              // Number of operations to compute entry: 3
              A[(nzc13[j] + 17)*34 + nzc29[k]] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[18];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[15];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[19];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f3_C4[ip][k]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[21];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc24[k]] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[(nzc24[j] + 17)*34 + nzc29[k]] += FE0_f2_C3[ip][j]*FE0_f3_C4[ip][k]*I[23];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[16];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][k]*FE0_f3_C4[ip][j]*I[20];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + (nzc29[k] + 17)] += FE0_f3_C4[ip][j]*FE0_f3_C4[ip][k]*I[24];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[25];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc24[k]] += FE0_f2_C3[ip][k]*FE0_f3_C4[ip][j]*I[26];
              // Number of operations to compute entry: 3
              A[(nzc29[j] + 17)*34 + nzc29[k]] += FE0_f3_C4[ip][j]*FE0_f3_C4[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc24[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[21];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + (nzc29[k] + 17)] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[25];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc24[k]] += FE0_f0_C3_D100[ip][j]*FE0_f2_C3[ip][k]*I[28];
              // Number of operations to compute entry: 3
              A[nzc13[j]*34 + nzc29[k]] += FE0_f0_C3_D100[ip][j]*FE0_f3_C4[ip][k]*I[29];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[17];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[22];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + (nzc29[k] + 17)] += FE0_f2_C3[ip][j]*FE0_f3_C4[ip][k]*I[26];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f2_C3[ip][j]*I[28];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc24[k]] += FE0_f2_C3[ip][j]*FE0_f2_C3[ip][k]*I[30];
              // Number of operations to compute entry: 3
              A[nzc24[j]*34 + nzc29[k]] += FE0_f2_C3[ip][j]*FE0_f3_C4[ip][k]*I[31];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc13[k] + 17)] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[18];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc24[k] + 17)] += FE0_f2_C3[ip][k]*FE0_f3_C4[ip][j]*I[23];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + (nzc29[k] + 17)] += FE0_f3_C4[ip][j]*FE0_f3_C4[ip][k]*I[27];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc13[k]] += FE0_f0_C3_D100[ip][k]*FE0_f3_C4[ip][j]*I[29];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc24[k]] += FE0_f2_C3[ip][k]*FE0_f3_C4[ip][j]*I[31];
              // Number of operations to compute entry: 3
              A[nzc29[j]*34 + nzc29[k]] += FE0_f3_C4[ip][j]*FE0_f3_C4[ip][k]*I[32];
            } // end loop over 'k'
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    }
    
  }

};


class vector_linear_pnp_forms_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  vector_linear_pnp_forms_cell_integral_1_otherwise() : ufc::cell_integral()
  {
    
  }

  ~vector_linear_pnp_forms_cell_integral_1_otherwise() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({true, true, true, true, true, true, true, true, false, false});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W15[15] = {0.0302836780970892, 0.00602678571428572, 0.00602678571428572, 0.00602678571428572, 0.00602678571428572, 0.011645249086029, 0.011645249086029, 0.011645249086029, 0.011645249086029, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864, 0.0109491415613864};
    // Quadrature points on the UFC reference element: (0.25, 0.25, 0.25), (0.0, 0.333333333333333, 0.333333333333333), (0.333333333333333, 0.333333333333333, 0.333333333333333), (0.333333333333333, 0.333333333333333, 0.0), (0.333333333333333, 0.0, 0.333333333333333), (0.727272727272727, 0.0909090909090909, 0.0909090909090909), (0.0909090909090909, 0.0909090909090909, 0.0909090909090909), (0.0909090909090909, 0.0909090909090909, 0.727272727272727), (0.0909090909090909, 0.727272727272727, 0.0909090909090909), (0.433449846426336, 0.0665501535736643, 0.0665501535736643), (0.0665501535736643, 0.433449846426336, 0.0665501535736643), (0.0665501535736643, 0.0665501535736643, 0.433449846426336), (0.0665501535736643, 0.433449846426336, 0.433449846426336), (0.433449846426336, 0.0665501535736643, 0.433449846426336), (0.433449846426336, 0.433449846426336, 0.0665501535736643)
    
    // Values of basis functions at quadrature points.
    static const double FE0[15][4] = \
    {{0.25, 0.25, 0.25, 0.25},
    {0.333333333333333, 0.0, 0.333333333333333, 0.333333333333333},
    {0.0, 0.333333333333333, 0.333333333333333, 0.333333333333333},
    {0.333333333333333, 0.333333333333333, 0.333333333333333, 0.0},
    {0.333333333333333, 0.333333333333333, 0.0, 0.333333333333333},
    {0.090909090909091, 0.727272727272727, 0.0909090909090909, 0.0909090909090909},
    {0.727272727272727, 0.0909090909090908, 0.0909090909090909, 0.0909090909090909},
    {0.0909090909090909, 0.0909090909090909, 0.0909090909090909, 0.727272727272727},
    {0.090909090909091, 0.0909090909090908, 0.727272727272727, 0.0909090909090909},
    {0.433449846426336, 0.433449846426336, 0.0665501535736643, 0.0665501535736643},
    {0.433449846426336, 0.0665501535736643, 0.433449846426336, 0.0665501535736643},
    {0.433449846426336, 0.0665501535736643, 0.0665501535736643, 0.433449846426336},
    {0.0665501535736644, 0.0665501535736643, 0.433449846426336, 0.433449846426336},
    {0.0665501535736644, 0.433449846426336, 0.0665501535736643, 0.433449846426336},
    {0.0665501535736643, 0.433449846426336, 0.433449846426336, 0.0665501535736643}};
    
    // Array of non-zero columns
    static const unsigned int nzc4[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc8[4] = {8, 9, 10, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc12[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc16[4] = {4, 5, 6, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc20[4] = {8, 9, 10, 11};
    
    static const double FE2_C0_D001[15][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc7[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc11[2] = {8, 9};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc15[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc17[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc18[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc19[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc21[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc22[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc23[2] = {8, 9};
    
    static const double FE3_C3[15][4] = \
    {{-0.25, -0.75, -0.25, 0.25},
    {0.0, -1.0, 0.0, 0.0},
    {-0.333333333333333, -0.666666666666667, -0.333333333333333, 0.333333333333333},
    {-0.333333333333333, -0.666666666666667, -0.333333333333333, 0.333333333333333},
    {-0.333333333333333, -0.666666666666667, -0.333333333333333, 0.333333333333333},
    {-0.727272727272727, -0.272727272727273, -0.727272727272727, 0.727272727272727},
    {-0.0909090909090906, -0.909090909090909, -0.0909090909090907, 0.0909090909090908},
    {-0.0909090909090909, -0.909090909090909, -0.090909090909091, 0.0909090909090909},
    {-0.0909090909090911, -0.909090909090909, -0.0909090909090912, 0.0909090909090911},
    {-0.433449846426336, -0.566550153573664, -0.433449846426336, 0.433449846426336},
    {-0.0665501535736643, -0.933449846426336, -0.0665501535736644, 0.0665501535736644},
    {-0.0665501535736642, -0.933449846426336, -0.0665501535736643, 0.0665501535736643},
    {-0.0665501535736644, -0.933449846426336, -0.0665501535736645, 0.0665501535736645},
    {-0.433449846426336, -0.566550153573664, -0.433449846426336, 0.433449846426336},
    {-0.433449846426336, -0.566550153573664, -0.433449846426336, 0.433449846426336}};
    
    static const double FE3_C3_D100[15][4] = \
    {{-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc25[4] = {12, 13, 14, 15};
    
    static const double FE3_C4[15][4] = \
    {{-0.25, 0.25, 0.75, 0.25},
    {-0.333333333333333, 0.333333333333333, 0.666666666666667, 0.333333333333333},
    {-0.333333333333334, 0.333333333333333, 0.666666666666667, 0.333333333333334},
    {-0.333333333333333, 0.333333333333333, 0.666666666666667, 0.333333333333333},
    {0.0, 0.0, 1.0, 0.0},
    {-0.0909090909090912, 0.090909090909091, 0.909090909090909, 0.0909090909090912},
    {-0.0909090909090908, 0.0909090909090906, 0.909090909090909, 0.0909090909090908},
    {-0.090909090909091, 0.0909090909090909, 0.909090909090909, 0.090909090909091},
    {-0.727272727272727, 0.727272727272727, 0.272727272727273, 0.727272727272727},
    {-0.0665501535736644, 0.0665501535736643, 0.933449846426336, 0.0665501535736644},
    {-0.433449846426336, 0.433449846426336, 0.566550153573664, 0.433449846426336},
    {-0.0665501535736643, 0.0665501535736641, 0.933449846426336, 0.0665501535736643},
    {-0.433449846426336, 0.433449846426336, 0.566550153573664, 0.433449846426336},
    {-0.0665501535736645, 0.0665501535736643, 0.933449846426336, 0.0665501535736645},
    {-0.433449846426336, 0.433449846426336, 0.566550153573664, 0.433449846426336}};
    
    static const double FE3_C5[15][4] = \
    {{-0.25, 0.25, -0.25, -0.75},
    {-0.333333333333333, 0.333333333333333, -0.333333333333333, -0.666666666666667},
    {-0.333333333333333, 0.333333333333333, -0.333333333333333, -0.666666666666667},
    {0.0, 0.0, 0.0, -1.0},
    {-0.333333333333333, 0.333333333333333, -0.333333333333333, -0.666666666666667},
    {-0.090909090909091, 0.0909090909090909, -0.0909090909090909, -0.909090909090909},
    {-0.0909090909090907, 0.0909090909090907, -0.0909090909090907, -0.909090909090909},
    {-0.727272727272727, 0.727272727272727, -0.727272727272726, -0.272727272727273},
    {-0.0909090909090908, 0.0909090909090908, -0.0909090909090908, -0.909090909090909},
    {-0.0665501535736643, 0.0665501535736643, -0.0665501535736643, -0.933449846426336},
    {-0.0665501535736642, 0.0665501535736642, -0.0665501535736642, -0.933449846426336},
    {-0.433449846426335, 0.433449846426335, -0.433449846426335, -0.566550153573665},
    {-0.433449846426335, 0.433449846426335, -0.433449846426335, -0.566550153573665},
    {-0.433449846426335, 0.433449846426335, -0.433449846426335, -0.566550153573665},
    {-0.0665501535736643, 0.0665501535736643, -0.0665501535736643, -0.933449846426336}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 17; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 926.
    double G[21];
    G[0] =  - det*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])/detJ;
    G[1] =  - det*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[2] =  - det*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[3] =  - det*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[4] =  - det*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[5] =  - det*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[6] =  - det*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[7] = det*(J[0]*K[6] + J[3]*K[7] + J[6]*K[8])/detJ;
    G[8] = det*(J[1]*K[6] + J[4]*K[7] + J[7]*K[8])/detJ;
    G[9] = det*(J[2]*K[6] + J[5]*K[7] + J[8]*K[8])/detJ;
    G[10] = det*(J[0]*K[3] + J[3]*K[4] + J[6]*K[5])/detJ;
    G[11] = det*(J[1]*K[3] + J[4]*K[4] + J[7]*K[5])/detJ;
    G[12] = det*(J[2]*K[3] + J[5]*K[4] + J[8]*K[5])/detJ;
    G[13] = det*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2])/detJ;
    G[14] = det*(J[1]*K[0] + J[4]*K[1] + J[7]*K[2])/detJ;
    G[15] = det*(J[2]*K[0] + J[5]*K[1] + J[8]*K[2])/detJ;
    G[16] = det*w[2][0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])/detJ;
    G[17] = det*(-0.5*(K[0]*(J[0]*J[0]*K[0]*K[0] + J[1]*J[1]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]) + J[2]*J[2]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8])) + K[1]*(J[0]*J[0]*K[0]*K[1] + J[3]*(K[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[1]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7])) + J[4]*(K[3]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[4]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + K[5]*(J[1]*K[5] + J[2]*K[8])) + J[5]*(K[6]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[7]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + K[8]*(J[1]*K[5] + J[2]*K[8]))) + K[2]*(J[0]*(K[0]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[1]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[2]*(J[0]*K[0] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + J[1]*(K[3]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[4]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[5]*(J[3]*K[1] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + J[2]*(K[6]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[7]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[8]*(J[3]*K[1] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])))) - K[0]*(J[0]*J[1]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]) + J[2]*(J[0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]) + J[1]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]))))/(detJ*detJ);
    G[18] = det*(-0.5*(K[3]*(J[0]*J[0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]) + J[1]*J[1]*K[3]*K[3] + J[2]*J[2]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8])) + K[4]*(J[1]*J[1]*K[3]*K[4] + J[3]*(K[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[1]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + K[2]*(J[0]*K[2] + J[2]*K[8])) + J[4]*(K[3]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[4]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7])) + J[5]*(K[6]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[7]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + K[8]*(J[0]*K[2] + J[2]*K[8]))) + K[5]*(J[0]*(K[0]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[1]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[2]*(J[4]*K[4] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + J[1]*(K[3]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[4]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[5]*(J[1]*K[3] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + J[2]*(K[6]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[7]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[8]*(J[4]*K[4] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])))) - K[3]*(J[0]*J[1]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]) + J[2]*(J[0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]) + J[1]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]))))/(detJ*detJ);
    G[19] = det*(-0.5*(K[6]*(J[0]*J[0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]) + J[1]*J[1]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]) + J[2]*J[2]*K[6]*K[6]) + K[7]*(J[2]*J[2]*K[6]*K[7] + J[3]*(K[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[1]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + K[2]*(J[0]*K[2] + J[1]*K[5])) + J[4]*(K[3]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[4]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + K[5]*(J[0]*K[2] + J[1]*K[5])) + J[5]*(K[6]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[7]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]))) + K[8]*(J[0]*(K[0]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[1]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[2]*(J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + J[1]*(K[3]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[4]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[5]*(J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + J[2]*(K[6]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[7]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + K[8]*(J[2]*K[6] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])))) - K[6]*(J[0]*J[1]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]) + J[2]*(J[0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]) + J[1]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]))))/(detJ*detJ);
    G[20] = det*w[7][0]*( - (K[0]*K[0]*(J[3]*J[3] + J[6]*J[6]) + K[1]*K[1]*(J[0]*J[0] + J[6]*J[6]) + K[2]*K[2]*(J[0]*J[0] + J[3]*J[3]) + K[3]*K[3]*(J[4]*J[4] + J[7]*J[7]) + K[4]*K[4]*(J[1]*J[1] + J[7]*J[7]) + K[5]*K[5]*(J[1]*J[1] + J[4]*J[4]) + K[6]*K[6]*(J[5]*J[5] + J[8]*J[8]) + K[7]*K[7]*(J[2]*J[2] + J[8]*J[8]) + K[8]*K[8]*(J[2]*J[2] + J[5]*J[5]))-2.0*(J[0]*J[0]*K[0]*K[0] + J[3]*K[1]*(J[0]*K[0] + J[3]*K[1]) + J[6]*K[2]*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2]) + K[3]*(J[0]*(J[4]*K[1] + J[7]*K[2]) + J[1]*J[1]*K[3] + K[0]*(J[3]*J[4] + J[6]*J[7])) + K[4]*(J[1]*(J[0]*K[1] + J[3]*K[0] + J[4]*K[3]) + J[4]*J[4]*K[4] + J[7]*(J[3]*K[2] + J[6]*K[1])) + K[5]*(J[6]*(J[1]*K[0] + J[4]*K[1]) + J[7]*(J[1]*K[3] + J[4]*K[4] + J[7]*K[5]) + K[2]*(J[0]*J[1] + J[3]*J[4])) + K[6]*(J[2]*J[2]*K[6] + J[5]*(J[0]*K[1] + J[1]*K[4] + J[3]*K[0] + J[4]*K[3]) + J[8]*(J[0]*K[2] + J[1]*K[5] + J[6]*K[0] + J[7]*K[3])) + K[7]*(J[2]*(J[0]*K[1] + J[1]*K[4] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[5]*J[5]*K[7] + J[8]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1] + J[7]*K[4])) + K[8]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[5]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + J[8]*J[8]*K[8]))-4.0*(J[0]*J[1]*K[0]*K[3] + J[2]*K[6]*(J[0]*K[0] + J[1]*K[3]) + J[3]*J[4]*K[1]*K[4] + J[5]*K[7]*(J[3]*K[1] + J[4]*K[4]) + J[6]*J[7]*K[2]*K[5] + J[8]*K[8]*(J[6]*K[2] + J[7]*K[5])))/(detJ*detJ);
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 6360
    for (unsigned int ip = 0; ip < 15; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      double F21 = 0.0;
      double F22 = 0.0;
      double F23 = 0.0;
      double F24 = 0.0;
      double F25 = 0.0;
      
      // Total number of operations to compute function values = 48
      for (unsigned int r = 0; r < 2; r++)
      {
        F6 += FE2_C0_D001[ip][r]*w[0][nzc15[r]];
        F7 += FE2_C0_D001[ip][r]*w[0][nzc14[r]];
        F8 += FE2_C0_D001[ip][r]*w[0][nzc13[r]];
        F10 += FE2_C0_D001[ip][r]*w[0][nzc19[r]];
        F11 += FE2_C0_D001[ip][r]*w[0][nzc18[r]];
        F12 += FE2_C0_D001[ip][r]*w[0][nzc17[r]];
        F14 += FE2_C0_D001[ip][r]*w[6][nzc7[r]];
        F15 += FE2_C0_D001[ip][r]*w[6][nzc6[r]];
        F16 += FE2_C0_D001[ip][r]*w[6][nzc5[r]];
        F18 += FE2_C0_D001[ip][r]*w[6][nzc11[r]];
        F19 += FE2_C0_D001[ip][r]*w[6][nzc10[r]];
        F20 += FE2_C0_D001[ip][r]*w[6][nzc9[r]];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 112
      for (unsigned int r = 0; r < 4; r++)
      {
        F0 += FE0[ip][r]*w[4][r];
        F1 += FE0[ip][r]*w[6][nzc4[r]];
        F2 += FE0[ip][r]*w[0][nzc16[r]];
        F3 += FE0[ip][r]*w[6][nzc8[r]];
        F4 += FE3_C3_D100[ip][r]*w[1][r];
        F5 += FE0[ip][r]*w[3][r];
        F9 += FE0[ip][r]*w[5][nzc4[r]];
        F13 += FE0[ip][r]*w[0][nzc12[r]];
        F17 += FE0[ip][r]*w[5][nzc8[r]];
        F21 += FE3_C3_D100[ip][r]*w[0][nzc25[r]];
        F22 += FE3_C3[ip][r]*w[1][r];
        F23 += FE3_C4[ip][r]*w[1][r];
        F24 += FE3_C5[ip][r]*w[1][r];
        F25 += FE0[ip][r]*w[0][nzc20[r]];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 211
      double I[12];
      // Number of operations: 2
      I[0] = F4*G[0]*W15[ip];
      
      // Number of operations: 7
      I[1] = F5*W15[ip]*(F6*G[1] + F7*G[2] + F8*G[3]);
      
      // Number of operations: 7
      I[2] = F5*W15[ip]*(F6*G[4] + F7*G[5] + F8*G[2]);
      
      // Number of operations: 7
      I[3] = F5*W15[ip]*(F6*G[6] + F7*G[4] + F8*G[1]);
      
      // Number of operations: 27
      I[4] = W15[ip]*std::exp(F2)*(F22*G[7] + F23*G[8] + F24*G[9] + F9*(G[1]*(F10 + F1*F6 + F13*F14) + G[2]*(F11 + F1*F7 + F13*F15) + G[3]*(F12 + F1*F8 + F13*F16)));
      
      // Number of operations: 27
      I[5] = W15[ip]*std::exp(F2)*(F22*G[10] + F23*G[11] + F24*G[12] + F9*(G[2]*(F12 + F1*F8 + F13*F16) + G[4]*(F10 + F1*F6 + F13*F14) + G[5]*(F11 + F1*F7 + F13*F15)));
      
      // Number of operations: 27
      I[6] = W15[ip]*std::exp(F2)*(F22*G[13] + F23*G[14] + F24*G[15] + F9*(G[1]*(F12 + F1*F8 + F13*F16) + G[4]*(F11 + F1*F7 + F13*F15) + G[6]*(F10 + F1*F6 + F13*F14)));
      
      // Number of operations: 30
      I[7] = (F17*W15[ip]*std::exp(F2)*(G[1]*(F10 + F13*F18 + F3*F6) + G[2]*(F11 + F13*F19 + F3*F7) + G[3]*(F12 + F13*F20 + F3*F8)) + W15[ip]*std::exp(F25)*(F22*G[7] + F23*G[8] + F24*G[9]));
      
      // Number of operations: 30
      I[8] = (F17*W15[ip]*std::exp(F2)*(G[2]*(F12 + F13*F20 + F3*F8) + G[4]*(F10 + F13*F18 + F3*F6) + G[5]*(F11 + F13*F19 + F3*F7)) + W15[ip]*std::exp(F25)*(F22*G[10] + F23*G[11] + F24*G[12]));
      
      // Number of operations: 30
      I[9] = (F17*W15[ip]*std::exp(F2)*(G[1]*(F12 + F13*F20 + F3*F8) + G[4]*(F11 + F13*F19 + F3*F7) + G[6]*(F10 + F13*F18 + F3*F6)) + W15[ip]*std::exp(F25)*(F22*G[13] + F23*G[14] + F24*G[15]));
      
      // Number of operations: 6
      I[10] = W15[ip]*det*(F0 + std::exp(F2)*(F1 + F3));
      
      // Number of operations: 11
      I[11] = W15[ip]*(G[16] + F21*F5*(F6*G[17] + F7*G[18] + F8*G[19]) + F4*G[20]);
      
      
      // Number of operations for primary indices: 1
      // Number of operations to compute entry: 1
      A[16] += I[0];
      
      // Number of operations for primary indices: 36
      for (unsigned int j = 0; j < 2; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc13[j]] += FE2_C0_D001[ip][j]*I[1];
        // Number of operations to compute entry: 2
        A[nzc14[j]] += FE2_C0_D001[ip][j]*I[2];
        // Number of operations to compute entry: 2
        A[nzc15[j]] += FE2_C0_D001[ip][j]*I[3];
        // Number of operations to compute entry: 2
        A[nzc17[j]] += FE2_C0_D001[ip][j]*I[4];
        // Number of operations to compute entry: 2
        A[nzc18[j]] += FE2_C0_D001[ip][j]*I[5];
        // Number of operations to compute entry: 2
        A[nzc19[j]] += FE2_C0_D001[ip][j]*I[6];
        // Number of operations to compute entry: 2
        A[nzc21[j]] += FE2_C0_D001[ip][j]*I[7];
        // Number of operations to compute entry: 2
        A[nzc22[j]] += FE2_C0_D001[ip][j]*I[8];
        // Number of operations to compute entry: 2
        A[nzc23[j]] += FE2_C0_D001[ip][j]*I[9];
      } // end loop over 'j'
      
      // Number of operations for primary indices: 16
      for (unsigned int j = 0; j < 4; j++)
      {
        // Number of operations to compute entry: 2
        A[nzc12[j]] += FE0[ip][j]*I[10];
        // Number of operations to compute entry: 2
        A[nzc25[j]] += FE3_C3_D100[ip][j]*I[11];
      } // end loop over 'j'
    } // end loop over 'ip'
  }

};


class vector_linear_pnp_forms_exterior_facet_integral_1_otherwise: public ufc::exterior_facet_integral
{
public:

  vector_linear_pnp_forms_exterior_facet_integral_1_otherwise() : ufc::exterior_facet_integral()
  {
    
  }

  ~vector_linear_pnp_forms_exterior_facet_integral_1_otherwise() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({false, true, false, false, false, false, false, true, false, true});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       std::size_t facet,
                       int cell_orientation) const final override
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet][0];
    const unsigned int v1 = face_vertices[facet][1];
    const unsigned int v2 = face_vertices[facet][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (coordinate_dofs[3*v0 + 1]*coordinate_dofs[3*v1 + 2]  + coordinate_dofs[3*v0 + 2]*coordinate_dofs[3*v2 + 1]  + coordinate_dofs[3*v1 + 1]*coordinate_dofs[3*v2 + 2]) - (coordinate_dofs[3*v2 + 1]*coordinate_dofs[3*v1 + 2] + coordinate_dofs[3*v2 + 2]*coordinate_dofs[3*v0 + 1] + coordinate_dofs[3*v1 + 1]*coordinate_dofs[3*v0 + 2]);
    
    const double a1 = (coordinate_dofs[3*v0 + 2]*coordinate_dofs[3*v1 + 0]  + coordinate_dofs[3*v0 + 0]*coordinate_dofs[3*v2 + 2] + coordinate_dofs[3*v1 + 2]*coordinate_dofs[3*v2 + 0]) - (coordinate_dofs[3*v2 + 2]*coordinate_dofs[3*v1 + 0]  + coordinate_dofs[3*v2 + 0]*coordinate_dofs[3*v0 + 2] + coordinate_dofs[3*v1 + 2]*coordinate_dofs[3*v0 + 0]);
    
    const double a2 = (coordinate_dofs[3*v0 + 0]*coordinate_dofs[3*v1 + 1]  + coordinate_dofs[3*v0 + 1]*coordinate_dofs[3*v2 + 0]  + coordinate_dofs[3*v1 + 0]*coordinate_dofs[3*v2 + 1]) - (coordinate_dofs[3*v2 + 0]*coordinate_dofs[3*v1 + 1]  + coordinate_dofs[3*v2 + 1]*coordinate_dofs[3*v0 + 0]  + coordinate_dofs[3*v1 + 0]*coordinate_dofs[3*v0 + 1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    const bool direction = a0*(coordinate_dofs[3*facet] - coordinate_dofs[3*v0]) + a1*(coordinate_dofs[3*facet + 1] - coordinate_dofs[3*v0 + 1])  + a2*(coordinate_dofs[3*facet + 2] - coordinate_dofs[3*v0 + 2]) < 0;
    
    const double n0 = direction ? a0 / det : -a0 / det;
    const double n1 = direction ? a1 / det : -a1 / det;
    const double n2 = direction ? a2 / det : -a2 / det;
    
    // Facet area (divide by two because 'det' is scaled by area of reference triangle)
    
    // Min edge length of facet
    double min_facet_edge_length;
    compute_min_facet_edge_length_tetrahedron_3d(min_facet_edge_length, facet, coordinate_dofs);
    
    
    // Max edge length of facet
    double max_facet_edge_length;
    compute_max_facet_edge_length_tetrahedron_3d(max_facet_edge_length, facet, coordinate_dofs);
    
    
    // Compute cell volume
    const double volume = std::abs(detJ)/6.0;
    
    
    // Compute circumradius
    const double v1v2  = std::sqrt( (coordinate_dofs[6] - coordinate_dofs[3])*(coordinate_dofs[6] - coordinate_dofs[3]) + (coordinate_dofs[7] - coordinate_dofs[4])*(coordinate_dofs[7] - coordinate_dofs[4]) + (coordinate_dofs[8] - coordinate_dofs[5])*(coordinate_dofs[8] - coordinate_dofs[5]) );
    const double v0v2  = std::sqrt(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]);
    const double v0v1  = std::sqrt(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]);
    const double v0v3  = std::sqrt(J[2]*J[2] + J[5]*J[5] + J[8]*J[8]);
    const double v1v3  = std::sqrt( (coordinate_dofs[9] - coordinate_dofs[3])*(coordinate_dofs[9] - coordinate_dofs[3]) + (coordinate_dofs[10] - coordinate_dofs[4])*(coordinate_dofs[10] - coordinate_dofs[4]) + (coordinate_dofs[11] - coordinate_dofs[5])*(coordinate_dofs[11] - coordinate_dofs[5]) );
    const double v2v3  = std::sqrt( (coordinate_dofs[9] - coordinate_dofs[6])*(coordinate_dofs[9] - coordinate_dofs[6]) + (coordinate_dofs[10] - coordinate_dofs[7])*(coordinate_dofs[10] - coordinate_dofs[7]) + (coordinate_dofs[11] - coordinate_dofs[8])*(coordinate_dofs[11] - coordinate_dofs[8]) );
    const  double la   = v1v2*v0v3;
    const  double lb   = v0v2*v1v3;
    const  double lc   = v0v1*v2v3;
    const  double s    = 0.5*(la+lb+lc);
    const  double area = std::sqrt(s*(s-la)*(s-lb)*(s-lc));
    const double circumradius = area / ( 6.0*volume );
    
    
    // Array of quadrature weights.
    static const double W3[3] = {0.166666666666667, 0.166666666666667, 0.166666666666667};
    // Quadrature points on the UFC reference element: (0.166666666666667, 0.166666666666667), (0.166666666666667, 0.666666666666667), (0.666666666666667, 0.166666666666667)
    
    // Values of basis functions at quadrature points.
    static const double FE0_f0_C3[3][4] = \
    {{-0.666666666666667, -0.333333333333333, -0.666666666666667, 0.666666666666667},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {12, 13, 14, 15};
    
    static const double FE0_f0_C4[3][4] = \
    {{-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667},
    {-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667},
    {-0.666666666666667, 0.666666666666666, 0.333333333333334, 0.666666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc4[4] = {12, 13, 14, 15};
    
    static const double FE0_f0_C5[3][4] = \
    {{-0.166666666666667, 0.166666666666667, -0.166666666666667, -0.833333333333333},
    {-0.666666666666666, 0.666666666666666, -0.666666666666666, -0.333333333333334},
    {-0.166666666666667, 0.166666666666667, -0.166666666666667, -0.833333333333333}};
    
    // Array of non-zero columns
    static const unsigned int nzc5[4] = {12, 13, 14, 15};
    
    static const double FE0_f1_C3[3][1] = \
    {{-1.0},
    {-1.0},
    {-1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc10[1] = {13};
    
    // Array of non-zero columns
    static const unsigned int nzc20[1] = {15};
    
    static const double FE0_f2_C3[3][4] = \
    {{-0.166666666666666, -0.833333333333334, -0.166666666666666, 0.166666666666666},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667},
    {-0.666666666666667, -0.333333333333333, -0.666666666666667, 0.666666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc14[4] = {12, 13, 14, 15};
    
    static const double FE0_f3_C4[3][4] = \
    {{-0.166666666666667, 0.166666666666666, 0.833333333333333, 0.166666666666667},
    {-0.666666666666667, 0.666666666666666, 0.333333333333334, 0.666666666666667},
    {-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc19[4] = {12, 13, 14, 15};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 17; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 258.
    double G[9];
    G[0] = det*w[7][0]*w[9][0]*(J[3]*n1*( - J[3]*n1-2.0*J[0]*n0) + J[6]*n2*( - J[6]*n2-2.0*(J[0]*n0 + J[3]*n1)) - J[0]*J[0]*n0*n0)/(circumradius*detJ*detJ);
    G[1] =  - det*w[7][0]*w[9][0]*(J[0]*J[1]*n0*n0 + n1*(J[3]*J[4]*n1 + n0*(J[0]*J[4] + J[1]*J[3])) + n2*(J[6]*(J[1]*n0 + J[4]*n1) + J[7]*(J[0]*n0 + J[3]*n1 + J[6]*n2)))/(circumradius*detJ*detJ);
    G[2] =  - det*w[7][0]*w[9][0]*(J[0]*J[2]*n0*n0 + n1*(J[3]*J[5]*n1 + n0*(J[0]*J[5] + J[2]*J[3])) + n2*(J[6]*(J[2]*n0 + J[5]*n1) + J[8]*(J[0]*n0 + J[3]*n1 + J[6]*n2)))/(circumradius*detJ*detJ);
    G[3] = det*w[7][0]*w[9][0]*(J[4]*n1*( - J[4]*n1-2.0*J[1]*n0) + J[7]*n2*( - J[7]*n2-2.0*(J[1]*n0 + J[4]*n1)) - J[1]*J[1]*n0*n0)/(circumradius*detJ*detJ);
    G[4] =  - det*w[7][0]*w[9][0]*(J[1]*J[2]*n0*n0 + n1*(J[4]*J[5]*n1 + n0*(J[1]*J[5] + J[2]*J[4])) + n2*(J[7]*(J[2]*n0 + J[5]*n1) + J[8]*(J[1]*n0 + J[4]*n1 + J[7]*n2)))/(circumradius*detJ*detJ);
    G[5] = det*w[7][0]*w[9][0]*(J[5]*n1*( - J[5]*n1-2.0*J[2]*n0) + J[8]*n2*( - J[8]*n2-2.0*(J[2]*n0 + J[5]*n1)) - J[2]*J[2]*n0*n0)/(circumradius*detJ*detJ);
    G[6] = det*w[1][2]*w[7][0]*w[9][0]*(J[4]*n1*( - J[4]*n1-2.0*J[1]*n0) + J[7]*n2*( - J[7]*n2-2.0*(J[1]*n0 + J[4]*n1)) - J[1]*J[1]*n0*n0)/(circumradius*detJ*detJ);
    G[7] =  - det*w[1][2]*w[7][0]*w[9][0]*(J[0]*J[1]*n0*n0 + n1*(J[3]*J[4]*n1 + n0*(J[0]*J[4] + J[1]*J[3])) + n2*(J[6]*(J[1]*n0 + J[4]*n1) + J[7]*(J[0]*n0 + J[3]*n1 + J[6]*n2)))/(circumradius*detJ*detJ);
    G[8] =  - det*w[1][2]*w[7][0]*w[9][0]*(J[1]*J[2]*n0*n0 + n1*(J[4]*J[5]*n1 + n0*(J[1]*J[5] + J[2]*J[4])) + n2*(J[7]*(J[2]*n0 + J[5]*n1) + J[8]*(J[1]*n0 + J[4]*n1 + J[7]*n2)))/(circumradius*detJ*detJ);
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 198
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 198
      for (unsigned int ip = 0; ip < 3; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 24
        for (unsigned int r = 0; r < 4; r++)
        {
          F0 += FE0_f0_C3[ip][r]*w[1][r];
          F1 += FE0_f0_C4[ip][r]*w[1][r];
          F2 += FE0_f0_C5[ip][r]*w[1][r];
        } // end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[3];
        // Number of operations: 6
        I[0] = W3[ip]*(F0*G[0] + F1*G[1] + F2*G[2]);
        
        // Number of operations: 6
        I[1] = W3[ip]*(F0*G[1] + F1*G[3] + F2*G[4]);
        
        // Number of operations: 6
        I[2] = W3[ip]*(F0*G[2] + F1*G[4] + F2*G[5]);
        
        
        // Number of operations for primary indices: 24
        for (unsigned int j = 0; j < 4; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc3[j]] += FE0_f0_C3[ip][j]*I[0];
          // Number of operations to compute entry: 2
          A[nzc4[j]] += FE0_f0_C4[ip][j]*I[1];
          // Number of operations to compute entry: 2
          A[nzc5[j]] += FE0_f0_C5[ip][j]*I[2];
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 162
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 162
      for (unsigned int ip = 0; ip < 3; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 2
        for (unsigned int r = 0; r < 1; r++)
        {
          F0 += FE0_f1_C3[ip][0]*w[1][1];
        } // end loop over 'r'
        
        // Total number of operations to compute function values = 16
        for (unsigned int r = 0; r < 4; r++)
        {
          F1 += FE0_f0_C4[ip][r]*w[1][r];
          F2 += FE0_f0_C5[ip][r]*w[1][r];
        } // end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[3];
        // Number of operations: 6
        I[0] = W3[ip]*(F0*G[0] + F1*G[1] + F2*G[2]);
        
        // Number of operations: 6
        I[1] = W3[ip]*(F0*G[1] + F1*G[3] + F2*G[4]);
        
        // Number of operations: 6
        I[2] = W3[ip]*(F0*G[2] + F1*G[4] + F2*G[5]);
        
        
        // Number of operations for primary indices: 2
        for (unsigned int j = 0; j < 1; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc10[j]] += FE0_f1_C3[ip][j]*I[0];
        } // end loop over 'j'
        
        // Number of operations for primary indices: 16
        for (unsigned int j = 0; j < 4; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc4[j]] += FE0_f0_C4[ip][j]*I[1];
          // Number of operations to compute entry: 2
          A[nzc5[j]] += FE0_f0_C5[ip][j]*I[2];
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 144
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 144
      for (unsigned int ip = 0; ip < 3; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        
        // Total number of operations to compute function values = 16
        for (unsigned int r = 0; r < 4; r++)
        {
          F0 += FE0_f2_C3[ip][r]*w[1][r];
          F1 += FE0_f0_C5[ip][r]*w[1][r];
        } // end loop over 'r'
        
        // Number of operations to compute ip constants: 15
        double I[3];
        // Number of operations: 5
        I[0] = W3[ip]*(G[6] + F0*G[1] + F1*G[4]);
        
        // Number of operations: 5
        I[1] = W3[ip]*(G[7] + F0*G[0] + F1*G[2]);
        
        // Number of operations: 5
        I[2] = W3[ip]*(G[8] + F0*G[2] + F1*G[5]);
        
        
        // Number of operations for primary indices: 1
        // Number of operations to compute entry: 1
        A[14] += I[0];
        
        // Number of operations for primary indices: 16
        for (unsigned int j = 0; j < 4; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc14[j]] += FE0_f2_C3[ip][j]*I[1];
          // Number of operations to compute entry: 2
          A[nzc5[j]] += FE0_f0_C5[ip][j]*I[2];
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    case 3:
      {
        // Total number of operations to compute element tensor (from this point): 162
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 162
      for (unsigned int ip = 0; ip < 3; ip++)
      {
        
        // Coefficient declarations.
        double F0 = 0.0;
        double F1 = 0.0;
        double F2 = 0.0;
        
        // Total number of operations to compute function values = 2
        for (unsigned int r = 0; r < 1; r++)
        {
          F2 += FE0_f1_C3[ip][0]*w[1][3];
        } // end loop over 'r'
        
        // Total number of operations to compute function values = 16
        for (unsigned int r = 0; r < 4; r++)
        {
          F0 += FE0_f2_C3[ip][r]*w[1][r];
          F1 += FE0_f3_C4[ip][r]*w[1][r];
        } // end loop over 'r'
        
        // Number of operations to compute ip constants: 18
        double I[3];
        // Number of operations: 6
        I[0] = W3[ip]*(F0*G[2] + F1*G[4] + F2*G[5]);
        
        // Number of operations: 6
        I[1] = W3[ip]*(F0*G[0] + F1*G[1] + F2*G[2]);
        
        // Number of operations: 6
        I[2] = W3[ip]*(F0*G[1] + F1*G[3] + F2*G[4]);
        
        
        // Number of operations for primary indices: 2
        for (unsigned int j = 0; j < 1; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc20[j]] += FE0_f1_C3[ip][j]*I[0];
        } // end loop over 'j'
        
        // Number of operations for primary indices: 16
        for (unsigned int j = 0; j < 4; j++)
        {
          // Number of operations to compute entry: 2
          A[nzc14[j]] += FE0_f2_C3[ip][j]*I[1];
          // Number of operations to compute entry: 2
          A[nzc19[j]] += FE0_f3_C4[ip][j]*I[2];
        } // end loop over 'j'
      } // end loop over 'ip'
        break;
      }
    }
    
  }

};


class vector_linear_pnp_forms_interior_facet_integral_1_otherwise: public ufc::interior_facet_integral
{
public:

  vector_linear_pnp_forms_interior_facet_integral_1_otherwise() : ufc::interior_facet_integral()
  {
    
  }

  ~vector_linear_pnp_forms_interior_facet_integral_1_otherwise() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({false, true, false, false, false, false, false, true, true, true});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs_0,
                       const double * coordinate_dofs_1,
                       std::size_t facet_0,
                       std::size_t facet_1,
                       int cell_orientation_0,
                       int cell_orientation_1) const final override
  {
    // Compute Jacobian
    double J_0[9];
    compute_jacobian_tetrahedron_3d(J_0, coordinate_dofs_0);
    
    // Compute Jacobian inverse and determinant
    double K_0[9];
    double detJ_0;
    compute_jacobian_inverse_tetrahedron_3d(K_0, detJ_0, J_0);
    
    // Compute Jacobian
    double J_1[9];
    compute_jacobian_tetrahedron_3d(J_1, coordinate_dofs_1);
    
    // Compute Jacobian inverse and determinant
    double K_1[9];
    double detJ_1;
    compute_jacobian_inverse_tetrahedron_3d(K_1, detJ_1, J_1);
    
    
    
    // Get vertices on face
    static unsigned int face_vertices[4][3] = {{1, 2, 3}, {0, 2, 3}, {0, 1, 3}, {0, 1, 2}};
    const unsigned int v0 = face_vertices[facet_0][0];
    const unsigned int v1 = face_vertices[facet_0][1];
    const unsigned int v2 = face_vertices[facet_0][2];
    
    // Compute scale factor (area of face scaled by area of reference triangle)
    const double a0 = (coordinate_dofs_0[3*v0 + 1]*coordinate_dofs_0[3*v1 + 2]  + coordinate_dofs_0[3*v0 + 2]*coordinate_dofs_0[3*v2 + 1]  + coordinate_dofs_0[3*v1 + 1]*coordinate_dofs_0[3*v2 + 2]) - (coordinate_dofs_0[3*v2 + 1]*coordinate_dofs_0[3*v1 + 2] + coordinate_dofs_0[3*v2 + 2]*coordinate_dofs_0[3*v0 + 1] + coordinate_dofs_0[3*v1 + 1]*coordinate_dofs_0[3*v0 + 2]);
    
    const double a1 = (coordinate_dofs_0[3*v0 + 2]*coordinate_dofs_0[3*v1 + 0]  + coordinate_dofs_0[3*v0 + 0]*coordinate_dofs_0[3*v2 + 2] + coordinate_dofs_0[3*v1 + 2]*coordinate_dofs_0[3*v2 + 0]) - (coordinate_dofs_0[3*v2 + 2]*coordinate_dofs_0[3*v1 + 0]  + coordinate_dofs_0[3*v2 + 0]*coordinate_dofs_0[3*v0 + 2] + coordinate_dofs_0[3*v1 + 2]*coordinate_dofs_0[3*v0 + 0]);
    
    const double a2 = (coordinate_dofs_0[3*v0 + 0]*coordinate_dofs_0[3*v1 + 1]  + coordinate_dofs_0[3*v0 + 1]*coordinate_dofs_0[3*v2 + 0]  + coordinate_dofs_0[3*v1 + 0]*coordinate_dofs_0[3*v2 + 1]) - (coordinate_dofs_0[3*v2 + 0]*coordinate_dofs_0[3*v1 + 1]  + coordinate_dofs_0[3*v2 + 1]*coordinate_dofs_0[3*v0 + 0]  + coordinate_dofs_0[3*v1 + 0]*coordinate_dofs_0[3*v0 + 1]);
    
    const double det = std::sqrt(a0*a0 + a1*a1 + a2*a2);
    
    
    const bool direction = a0*(coordinate_dofs_0[3*facet_0] - coordinate_dofs_0[3*v0]) + a1*(coordinate_dofs_0[3*facet_0 + 1] - coordinate_dofs_0[3*v0 + 1])  + a2*(coordinate_dofs_0[3*facet_0 + 2] - coordinate_dofs_0[3*v0 + 2]) < 0;
    
    const double n_00 = direction ? a0 / det : -a0 / det;
    const double n_01 = direction ? a1 / det : -a1 / det;
    const double n_02 = direction ? a2 / det : -a2 / det;
    
    // Facet area (divide by two because 'det' is scaled by area of reference triangle)
    
    // Min edge length of facet
    double min_facet_edge_length;
    compute_min_facet_edge_length_tetrahedron_3d(min_facet_edge_length, facet_0, coordinate_dofs_0);
    
    
    // Max edge length of facet
    double max_facet_edge_length;
    compute_max_facet_edge_length_tetrahedron_3d(max_facet_edge_length, facet_0, coordinate_dofs_0);
    
    
    // Compute cell volume
    const double volume_0 = std::abs(detJ_0)/6.0;
    // Compute cell volume
    const double volume_1 = std::abs(detJ_1)/6.0;
    
    
    // Compute circumradius
    const double v1v2_0  = std::sqrt( (coordinate_dofs_0[6] - coordinate_dofs_0[3])*(coordinate_dofs_0[6] - coordinate_dofs_0[3]) + (coordinate_dofs_0[7] - coordinate_dofs_0[4])*(coordinate_dofs_0[7] - coordinate_dofs_0[4]) + (coordinate_dofs_0[8] - coordinate_dofs_0[5])*(coordinate_dofs_0[8] - coordinate_dofs_0[5]) );
    const double v0v2_0  = std::sqrt(J_0[1]*J_0[1] + J_0[4]*J_0[4] + J_0[7]*J_0[7]);
    const double v0v1_0  = std::sqrt(J_0[0]*J_0[0] + J_0[3]*J_0[3] + J_0[6]*J_0[6]);
    const double v0v3_0  = std::sqrt(J_0[2]*J_0[2] + J_0[5]*J_0[5] + J_0[8]*J_0[8]);
    const double v1v3_0  = std::sqrt( (coordinate_dofs_0[9] - coordinate_dofs_0[3])*(coordinate_dofs_0[9] - coordinate_dofs_0[3]) + (coordinate_dofs_0[10] - coordinate_dofs_0[4])*(coordinate_dofs_0[10] - coordinate_dofs_0[4]) + (coordinate_dofs_0[11] - coordinate_dofs_0[5])*(coordinate_dofs_0[11] - coordinate_dofs_0[5]) );
    const double v2v3_0  = std::sqrt( (coordinate_dofs_0[9] - coordinate_dofs_0[6])*(coordinate_dofs_0[9] - coordinate_dofs_0[6]) + (coordinate_dofs_0[10] - coordinate_dofs_0[7])*(coordinate_dofs_0[10] - coordinate_dofs_0[7]) + (coordinate_dofs_0[11] - coordinate_dofs_0[8])*(coordinate_dofs_0[11] - coordinate_dofs_0[8]) );
    const  double la_0   = v1v2_0*v0v3_0;
    const  double lb_0   = v0v2_0*v1v3_0;
    const  double lc_0   = v0v1_0*v2v3_0;
    const  double s_0    = 0.5*(la_0+lb_0+lc_0);
    const  double area_0 = std::sqrt(s_0*(s_0-la_0)*(s_0-lb_0)*(s_0-lc_0));
    const double circumradius_0 = area_0 / ( 6.0*volume_0 );
    // Compute circumradius
    const double v1v2_1  = std::sqrt( (coordinate_dofs_1[6] - coordinate_dofs_1[3])*(coordinate_dofs_1[6] - coordinate_dofs_1[3]) + (coordinate_dofs_1[7] - coordinate_dofs_1[4])*(coordinate_dofs_1[7] - coordinate_dofs_1[4]) + (coordinate_dofs_1[8] - coordinate_dofs_1[5])*(coordinate_dofs_1[8] - coordinate_dofs_1[5]) );
    const double v0v2_1  = std::sqrt(J_1[1]*J_1[1] + J_1[4]*J_1[4] + J_1[7]*J_1[7]);
    const double v0v1_1  = std::sqrt(J_1[0]*J_1[0] + J_1[3]*J_1[3] + J_1[6]*J_1[6]);
    const double v0v3_1  = std::sqrt(J_1[2]*J_1[2] + J_1[5]*J_1[5] + J_1[8]*J_1[8]);
    const double v1v3_1  = std::sqrt( (coordinate_dofs_1[9] - coordinate_dofs_1[3])*(coordinate_dofs_1[9] - coordinate_dofs_1[3]) + (coordinate_dofs_1[10] - coordinate_dofs_1[4])*(coordinate_dofs_1[10] - coordinate_dofs_1[4]) + (coordinate_dofs_1[11] - coordinate_dofs_1[5])*(coordinate_dofs_1[11] - coordinate_dofs_1[5]) );
    const double v2v3_1  = std::sqrt( (coordinate_dofs_1[9] - coordinate_dofs_1[6])*(coordinate_dofs_1[9] - coordinate_dofs_1[6]) + (coordinate_dofs_1[10] - coordinate_dofs_1[7])*(coordinate_dofs_1[10] - coordinate_dofs_1[7]) + (coordinate_dofs_1[11] - coordinate_dofs_1[8])*(coordinate_dofs_1[11] - coordinate_dofs_1[8]) );
    const  double la_1   = v1v2_1*v0v3_1;
    const  double lb_1   = v0v2_1*v1v3_1;
    const  double lc_1   = v0v1_1*v2v3_1;
    const  double s_1    = 0.5*(la_1+lb_1+lc_1);
    const  double area_1 = std::sqrt(s_1*(s_1-la_1)*(s_1-lb_1)*(s_1-lc_1));
    const double circumradius_1 = area_1 / ( 6.0*volume_1 );
    
    
    // Array of quadrature weights.
    static const double W3[3] = {0.166666666666667, 0.166666666666667, 0.166666666666667};
    // Quadrature points on the UFC reference element: (0.166666666666667, 0.166666666666667), (0.166666666666667, 0.666666666666667), (0.666666666666667, 0.166666666666667)
    
    // Values of basis functions at quadrature points.
    static const double FE0_f0_C3[3][4] = \
    {{-0.666666666666667, -0.333333333333333, -0.666666666666667, 0.666666666666667},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc12[4] = {12, 13, 14, 15};
    
    static const double FE0_f0_C3_D100[3][4] = \
    {{-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc13[4] = {12, 13, 14, 15};
    
    static const double FE0_f0_C4[3][4] = \
    {{-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667},
    {-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667},
    {-0.666666666666667, 0.666666666666666, 0.333333333333334, 0.666666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc14[4] = {12, 13, 14, 15};
    
    static const double FE0_f0_C5[3][4] = \
    {{-0.166666666666667, 0.166666666666667, -0.166666666666667, -0.833333333333333},
    {-0.666666666666666, 0.666666666666666, -0.666666666666666, -0.333333333333334},
    {-0.166666666666667, 0.166666666666667, -0.166666666666667, -0.833333333333333}};
    
    // Array of non-zero columns
    static const unsigned int nzc15[4] = {12, 13, 14, 15};
    
    static const double FE0_f1_C3[3][1] = \
    {{-1.0},
    {-1.0},
    {-1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc20[1] = {13};
    
    // Array of non-zero columns
    static const unsigned int nzc30[1] = {15};
    
    static const double FE0_f2_C3[3][4] = \
    {{-0.166666666666666, -0.833333333333334, -0.166666666666666, 0.166666666666666},
    {-0.166666666666667, -0.833333333333333, -0.166666666666667, 0.166666666666667},
    {-0.666666666666667, -0.333333333333333, -0.666666666666667, 0.666666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc24[4] = {12, 13, 14, 15};
    
    static const double FE0_f3_C4[3][4] = \
    {{-0.166666666666667, 0.166666666666666, 0.833333333333333, 0.166666666666667},
    {-0.666666666666667, 0.666666666666666, 0.333333333333334, 0.666666666666667},
    {-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.166666666666667}};
    
    // Array of non-zero columns
    static const unsigned int nzc29[4] = {12, 13, 14, 15};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 34; r++)
    {
      A[r] = 0.0;
    } // end loop over 'r'
    // Number of operations to compute geometry constants: 3505.
    double G[57];
    G[0] = -2.0*det*w[7][0]*w[9][0]*(J_1[0]*J_1[0] + J_1[3]*J_1[3] + J_1[6]*J_1[6])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[1] = -2.0*det*w[7][0]*w[9][0]*(J_1[0]*J_1[1] + J_1[3]*J_1[4] + J_1[6]*J_1[7])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[2] = -2.0*det*w[7][0]*w[9][0]*(J_1[0]*J_1[2] + J_1[3]*J_1[5] + J_1[6]*J_1[8])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[3] = 2.0*det*w[7][0]*w[9][0]*(J_0[0]*J_1[0] + J_0[3]*J_1[3] + J_0[6]*J_1[6])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[4] = 2.0*det*w[7][0]*w[9][0]*(J_0[1]*J_1[0] + J_0[4]*J_1[3] + J_0[7]*J_1[6])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[5] = 2.0*det*w[7][0]*w[9][0]*(J_0[2]*J_1[0] + J_0[5]*J_1[3] + J_0[8]*J_1[6])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[6] = det*w[7][0]*w[8][0]*(0.5*(n_00*(J_1[3]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[6]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[0]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[6]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[0]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[3]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]))) + J_1[0]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_1[3]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_1[6]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]))/(detJ_0*detJ_1);
    G[7] = det*w[7][0]*w[8][0]*(0.5*(J_1[0]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + J_1[3]*(J_1[0]*K_1[0]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + J_1[6]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[0]*K_1[0] + J_1[3]*K_1[1]))) + J_1[0]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_1[3]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_1[6]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]))/(detJ_1*detJ_1);
    G[8] = det*w[7][0]*w[8][0]*(0.5*(J_1[1]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[5]*K_1[6]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[8]*K_1[6])) + J_1[4]*(J_1[1]*K_1[3]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[8]*K_1[7])) + J_1[7]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[1]*K_1[3] + J_1[4]*K_1[4]))) + J_1[1]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_1[4]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_1[7]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]))/(detJ_1*detJ_1);
    G[9] = det*w[7][0]*w[8][0]*(0.5*(J_1[2]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3])) + J_1[5]*(J_1[2]*K_1[6]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4])) + J_1[8]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[2]*K_1[6] + J_1[5]*K_1[7]))) + J_1[2]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_1[5]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_1[8]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]))/(detJ_1*detJ_1);
    G[10] = det*w[7][0]*w[8][0]*(-0.5*(n_00*(J_0[3]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[6]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[0]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[6]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[0]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[3]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]))) - (J_0[0]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_0[3]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_0[6]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8])))/(detJ_0*detJ_1);
    G[11] = det*w[7][0]*w[8][0]*(-0.5*(n_00*(J_0[4]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[7]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[1]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[7]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[1]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[4]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]))) - (J_0[1]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_0[4]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_0[7]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8])))/(detJ_0*detJ_1);
    G[12] = det*w[7][0]*w[8][0]*(-0.5*(n_00*(J_0[5]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[8]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[2]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[8]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[2]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[5]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]))) - (J_0[2]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_0[5]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_0[8]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8])))/(detJ_0*detJ_1);
    G[13] = -2.0*det*w[7][0]*w[9][0]*(J_1[1]*J_1[1] + J_1[4]*J_1[4] + J_1[7]*J_1[7])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[14] = -2.0*det*w[7][0]*w[9][0]*(J_1[1]*J_1[2] + J_1[4]*J_1[5] + J_1[7]*J_1[8])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[15] = 2.0*det*w[7][0]*w[9][0]*(J_0[0]*J_1[1] + J_0[3]*J_1[4] + J_0[6]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[16] = 2.0*det*w[7][0]*w[9][0]*(J_0[1]*J_1[1] + J_0[4]*J_1[4] + J_0[7]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[17] = 2.0*det*w[7][0]*w[9][0]*(J_0[2]*J_1[1] + J_0[5]*J_1[4] + J_0[8]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[18] = det*w[7][0]*w[8][0]*(0.5*(n_00*(J_1[4]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[7]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[1]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[7]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[1]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[4]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]))) + J_1[1]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_1[4]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_1[7]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]))/(detJ_0*detJ_1);
    G[19] = -2.0*det*w[7][0]*w[9][0]*(J_1[2]*J_1[2] + J_1[5]*J_1[5] + J_1[8]*J_1[8])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[20] = 2.0*det*w[7][0]*w[9][0]*(J_0[0]*J_1[2] + J_0[3]*J_1[5] + J_0[6]*J_1[8])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[21] = 2.0*det*w[7][0]*w[9][0]*(J_0[1]*J_1[2] + J_0[4]*J_1[5] + J_0[7]*J_1[8])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[22] = 2.0*det*w[7][0]*w[9][0]*(J_0[2]*J_1[2] + J_0[5]*J_1[5] + J_0[8]*J_1[8])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[23] = det*w[7][0]*w[8][0]*(0.5*(n_00*(J_1[5]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[8]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[2]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[8]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[2]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[5]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]))) + J_1[2]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_1[5]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_1[8]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]))/(detJ_0*detJ_1);
    G[24] = -2.0*det*w[7][0]*w[9][0]*(J_0[0]*J_0[0] + J_0[3]*J_0[3] + J_0[6]*J_0[6])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[25] = -2.0*det*w[7][0]*w[9][0]*(J_0[0]*J_0[1] + J_0[3]*J_0[4] + J_0[6]*J_0[7])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[26] = -2.0*det*w[7][0]*w[9][0]*(J_0[0]*J_0[2] + J_0[3]*J_0[5] + J_0[6]*J_0[8])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[27] = det*w[7][0]*w[8][0]*(-0.5*(J_0[0]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + J_0[3]*(J_0[0]*K_0[0]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + J_0[6]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[0]*K_0[0] + J_0[3]*K_0[1]))) - (J_0[0]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_0[3]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_0[6]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8])))/(detJ_0*detJ_0);
    G[28] = det*w[7][0]*w[8][0]*(-0.5*(J_0[1]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[5]*K_0[6]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[8]*K_0[6])) + J_0[4]*(J_0[1]*K_0[3]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[8]*K_0[7])) + J_0[7]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[1]*K_0[3] + J_0[4]*K_0[4]))) - (J_0[1]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_0[4]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_0[7]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8])))/(detJ_0*detJ_0);
    G[29] = det*w[7][0]*w[8][0]*(-0.5*(J_0[2]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3])) + J_0[5]*(J_0[2]*K_0[6]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4])) + J_0[8]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[2]*K_0[6] + J_0[5]*K_0[7]))) - (J_0[2]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_0[5]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_0[8]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8])))/(detJ_0*detJ_0);
    G[30] = -2.0*det*w[7][0]*w[9][0]*(J_0[1]*J_0[1] + J_0[4]*J_0[4] + J_0[7]*J_0[7])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[31] = -2.0*det*w[7][0]*w[9][0]*(J_0[1]*J_0[2] + J_0[4]*J_0[5] + J_0[7]*J_0[8])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[32] = -2.0*det*w[7][0]*w[9][0]*(J_0[2]*J_0[2] + J_0[5]*J_0[5] + J_0[8]*J_0[8])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[33] = -2.0*det*w[1][6]*w[7][0]*w[9][0]*(J_1[1]*J_1[1] + J_1[4]*J_1[4] + J_1[7]*J_1[7])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[34] = det*w[1][6]*w[7][0]*w[8][0]*(0.5*(J_1[1]*(n_01*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[5]*K_1[6]) + n_02*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[8]*K_1[6])) + J_1[4]*(J_1[1]*K_1[3]*n_01 + n_00*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + n_02*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[8]*K_1[7])) + J_1[7]*(n_00*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + n_01*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]) + n_02*(J_1[1]*K_1[3] + J_1[4]*K_1[4]))) + J_1[1]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_1[4]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_1[7]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8]))/(detJ_1*detJ_1);
    G[35] = -2.0*det*w[1][6]*w[7][0]*w[9][0]*(J_1[1]*J_1[2] + J_1[4]*J_1[5] + J_1[7]*J_1[8])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[36] = -2.0*det*w[1][6]*w[7][0]*w[9][0]*(J_1[0]*J_1[1] + J_1[3]*J_1[4] + J_1[6]*J_1[7])/(detJ_1*detJ_1*(circumradius_0 + circumradius_1));
    G[37] = 2.0*det*w[1][6]*w[7][0]*w[9][0]*(J_0[0]*J_1[1] + J_0[3]*J_1[4] + J_0[6]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[38] = det*w[1][6]*w[7][0]*w[8][0]*(0.5*(n_00*(J_1[4]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[7]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6])) + n_01*(J_1[1]*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + J_1[7]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7])) + n_02*(J_1[1]*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + J_1[4]*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]))) + J_1[1]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_1[4]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_1[7]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8]))/(detJ_0*detJ_1);
    G[39] = 2.0*det*w[1][6]*w[7][0]*w[9][0]*(J_0[1]*J_1[1] + J_0[4]*J_1[4] + J_0[7]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[40] = 2.0*det*w[1][6]*w[7][0]*w[9][0]*(J_0[2]*J_1[1] + J_0[5]*J_1[4] + J_0[8]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[41] = -2.0*det*w[1][2]*w[7][0]*w[9][0]*(J_0[1]*J_0[1] + J_0[4]*J_0[4] + J_0[7]*J_0[7])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[42] = 2.0*det*w[1][2]*w[7][0]*w[9][0]*(J_0[1]*J_1[0] + J_0[4]*J_1[3] + J_0[7]*J_1[6])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[43] = det*w[1][2]*w[7][0]*w[8][0]*(-0.5*(n_00*(J_0[4]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[7]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6])) + n_01*(J_0[1]*(J_1[0]*K_1[1] + J_1[1]*K_1[4] + J_1[2]*K_1[7] + J_1[3]*K_1[0] + J_1[4]*K_1[3] + J_1[5]*K_1[6]) + J_0[7]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7])) + n_02*(J_0[1]*(J_1[0]*K_1[2] + J_1[1]*K_1[5] + J_1[2]*K_1[8] + J_1[6]*K_1[0] + J_1[7]*K_1[3] + J_1[8]*K_1[6]) + J_0[4]*(J_1[3]*K_1[2] + J_1[4]*K_1[5] + J_1[5]*K_1[8] + J_1[6]*K_1[1] + J_1[7]*K_1[4] + J_1[8]*K_1[7]))) - (J_0[1]*n_00*(J_1[0]*K_1[0] + J_1[1]*K_1[3] + J_1[2]*K_1[6]) + J_0[4]*n_01*(J_1[3]*K_1[1] + J_1[4]*K_1[4] + J_1[5]*K_1[7]) + J_0[7]*n_02*(J_1[6]*K_1[2] + J_1[7]*K_1[5] + J_1[8]*K_1[8])))/(detJ_0*detJ_1);
    G[44] = 2.0*det*w[1][2]*w[7][0]*w[9][0]*(J_0[1]*J_1[1] + J_0[4]*J_1[4] + J_0[7]*J_1[7])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[45] = 2.0*det*w[1][2]*w[7][0]*w[9][0]*(J_0[1]*J_1[2] + J_0[4]*J_1[5] + J_0[7]*J_1[8])/(detJ_0*detJ_1*(circumradius_0 + circumradius_1));
    G[46] = det*w[1][2]*w[7][0]*w[8][0]*(-0.5*(J_0[1]*(n_01*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[5]*K_0[6]) + n_02*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[8]*K_0[6])) + J_0[4]*(J_0[1]*K_0[3]*n_01 + n_00*(J_0[0]*K_0[1] + J_0[1]*K_0[4] + J_0[2]*K_0[7] + J_0[3]*K_0[0] + J_0[4]*K_0[3] + J_0[5]*K_0[6]) + n_02*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[8]*K_0[7])) + J_0[7]*(n_00*(J_0[0]*K_0[2] + J_0[1]*K_0[5] + J_0[2]*K_0[8] + J_0[6]*K_0[0] + J_0[7]*K_0[3] + J_0[8]*K_0[6]) + n_01*(J_0[3]*K_0[2] + J_0[4]*K_0[5] + J_0[5]*K_0[8] + J_0[6]*K_0[1] + J_0[7]*K_0[4] + J_0[8]*K_0[7]) + n_02*(J_0[1]*K_0[3] + J_0[4]*K_0[4]))) - (J_0[1]*n_00*(J_0[0]*K_0[0] + J_0[1]*K_0[3] + J_0[2]*K_0[6]) + J_0[4]*n_01*(J_0[3]*K_0[1] + J_0[4]*K_0[4] + J_0[5]*K_0[7]) + J_0[7]*n_02*(J_0[6]*K_0[2] + J_0[7]*K_0[5] + J_0[8]*K_0[8])))/(detJ_0*detJ_0);
    G[47] = -2.0*det*w[1][2]*w[7][0]*w[9][0]*(J_0[1]*J_0[2] + J_0[4]*J_0[5] + J_0[7]*J_0[8])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[48] = -2.0*det*w[1][2]*w[7][0]*w[9][0]*(J_0[0]*J_0[1] + J_0[3]*J_0[4] + J_0[6]*J_0[7])/(detJ_0*detJ_0*(circumradius_0 + circumradius_1));
    G[49] = det*w[7][0]*w[9][0]*((-2.0*J_0[1]*J_0[1]*w[1][2]-2.0*J_0[4]*J_0[4]*w[1][2]-2.0*J_0[7]*J_0[7]*w[1][2])/(circumradius_0*detJ_0*detJ_0 + circumradius_1*detJ_0*detJ_0) + (2.0*J_0[1]*J_1[1]*w[1][6] + 2.0*J_0[4]*J_1[4]*w[1][6] + 2.0*J_0[7]*J_1[7]*w[1][6])/(circumradius_0*detJ_0*detJ_1 + circumradius_1*detJ_0*detJ_1));
    G[50] = det*w[7][0]*w[9][0]*((-2.0*J_1[1]*J_1[1]*w[1][6]-2.0*J_1[4]*J_1[4]*w[1][6]-2.0*J_1[7]*J_1[7]*w[1][6])/(circumradius_0*detJ_1*detJ_1 + circumradius_1*detJ_1*detJ_1) + (2.0*J_0[1]*J_1[1]*w[1][2] + 2.0*J_0[4]*J_1[4]*w[1][2] + 2.0*J_0[7]*J_1[7]*w[1][2])/(circumradius_0*detJ_0*detJ_1 + circumradius_1*detJ_0*detJ_1));
    G[51] = det*w[7][0]*w[8][0]*((-0.5*J_0[1]*J_1[0]*K_1[1]*n_01*w[1][2]-0.5*J_0[1]*J_1[0]*K_1[2]*n_02*w[1][2]-0.5*J_0[1]*J_1[1]*K_1[4]*n_01*w[1][2]-0.5*J_0[1]*J_1[1]*K_1[5]*n_02*w[1][2]-0.5*J_0[1]*J_1[2]*K_1[7]*n_01*w[1][2]-0.5*J_0[1]*J_1[2]*K_1[8]*n_02*w[1][2]-0.5*J_0[1]*J_1[3]*K_1[0]*n_01*w[1][2]-0.5*J_0[1]*J_1[4]*K_1[3]*n_01*w[1][2]-0.5*J_0[1]*J_1[5]*K_1[6]*n_01*w[1][2]-0.5*J_0[1]*J_1[6]*K_1[0]*n_02*w[1][2]-0.5*J_0[1]*J_1[7]*K_1[3]*n_02*w[1][2]-0.5*J_0[1]*J_1[8]*K_1[6]*n_02*w[1][2]-0.5*J_0[4]*J_1[0]*K_1[1]*n_00*w[1][2]-0.5*J_0[4]*J_1[1]*K_1[4]*n_00*w[1][2]-0.5*J_0[4]*J_1[2]*K_1[7]*n_00*w[1][2]-0.5*J_0[4]*J_1[3]*K_1[0]*n_00*w[1][2]-0.5*J_0[4]*J_1[3]*K_1[2]*n_02*w[1][2]-0.5*J_0[4]*J_1[4]*K_1[3]*n_00*w[1][2]-0.5*J_0[4]*J_1[4]*K_1[5]*n_02*w[1][2]-0.5*J_0[4]*J_1[5]*K_1[6]*n_00*w[1][2]-0.5*J_0[4]*J_1[5]*K_1[8]*n_02*w[1][2]-0.5*J_0[4]*J_1[6]*K_1[1]*n_02*w[1][2]-0.5*J_0[4]*J_1[7]*K_1[4]*n_02*w[1][2]-0.5*J_0[4]*J_1[8]*K_1[7]*n_02*w[1][2]-0.5*J_0[7]*J_1[0]*K_1[2]*n_00*w[1][2]-0.5*J_0[7]*J_1[1]*K_1[5]*n_00*w[1][2]-0.5*J_0[7]*J_1[2]*K_1[8]*n_00*w[1][2]-0.5*J_0[7]*J_1[3]*K_1[2]*n_01*w[1][2]-0.5*J_0[7]*J_1[4]*K_1[5]*n_01*w[1][2]-0.5*J_0[7]*J_1[5]*K_1[8]*n_01*w[1][2]-0.5*J_0[7]*J_1[6]*K_1[0]*n_00*w[1][2]-0.5*J_0[7]*J_1[6]*K_1[1]*n_01*w[1][2]-0.5*J_0[7]*J_1[7]*K_1[3]*n_00*w[1][2]-0.5*J_0[7]*J_1[7]*K_1[4]*n_01*w[1][2]-0.5*J_0[7]*J_1[8]*K_1[6]*n_00*w[1][2]-0.5*J_0[7]*J_1[8]*K_1[7]*n_01*w[1][2] - J_0[1]*J_1[0]*K_1[0]*n_00*w[1][2] - J_0[1]*J_1[1]*K_1[3]*n_00*w[1][2] - J_0[1]*J_1[2]*K_1[6]*n_00*w[1][2] - J_0[4]*J_1[3]*K_1[1]*n_01*w[1][2] - J_0[4]*J_1[4]*K_1[4]*n_01*w[1][2] - J_0[4]*J_1[5]*K_1[7]*n_01*w[1][2] - J_0[7]*J_1[6]*K_1[2]*n_02*w[1][2] - J_0[7]*J_1[7]*K_1[5]*n_02*w[1][2] - J_0[7]*J_1[8]*K_1[8]*n_02*w[1][2])/(detJ_0*detJ_1) + (0.5*J_1[0]*J_1[1]*K_1[1]*n_01*w[1][6] + 0.5*J_1[0]*J_1[1]*K_1[2]*n_02*w[1][6] + 0.5*J_1[0]*J_1[4]*K_1[1]*n_00*w[1][6] + 0.5*J_1[0]*J_1[7]*K_1[2]*n_00*w[1][6] + 0.5*J_1[1]*J_1[1]*K_1[4]*n_01*w[1][6] + 0.5*J_1[1]*J_1[1]*K_1[5]*n_02*w[1][6] + 0.5*J_1[1]*J_1[2]*K_1[7]*n_01*w[1][6] + 0.5*J_1[1]*J_1[2]*K_1[8]*n_02*w[1][6] + 0.5*J_1[1]*J_1[3]*K_1[0]*n_01*w[1][6] + 0.5*J_1[1]*J_1[4]*K_1[3]*n_01*w[1][6] + 0.5*J_1[1]*J_1[4]*K_1[4]*n_00*w[1][6] + 0.5*J_1[1]*J_1[5]*K_1[6]*n_01*w[1][6] + 0.5*J_1[1]*J_1[6]*K_1[0]*n_02*w[1][6] + 0.5*J_1[1]*J_1[7]*K_1[3]*n_02*w[1][6] + 0.5*J_1[1]*J_1[7]*K_1[5]*n_00*w[1][6] + 0.5*J_1[1]*J_1[8]*K_1[6]*n_02*w[1][6] + 0.5*J_1[2]*J_1[4]*K_1[7]*n_00*w[1][6] + 0.5*J_1[2]*J_1[7]*K_1[8]*n_00*w[1][6] + 0.5*J_1[3]*J_1[4]*K_1[0]*n_00*w[1][6] + 0.5*J_1[3]*J_1[4]*K_1[2]*n_02*w[1][6] + 0.5*J_1[3]*J_1[7]*K_1[2]*n_01*w[1][6] + 0.5*J_1[4]*J_1[4]*K_1[3]*n_00*w[1][6] + 0.5*J_1[4]*J_1[4]*K_1[5]*n_02*w[1][6] + 0.5*J_1[4]*J_1[5]*K_1[6]*n_00*w[1][6] + 0.5*J_1[4]*J_1[5]*K_1[8]*n_02*w[1][6] + 0.5*J_1[4]*J_1[6]*K_1[1]*n_02*w[1][6] + 0.5*J_1[4]*J_1[7]*K_1[4]*n_02*w[1][6] + 0.5*J_1[4]*J_1[7]*K_1[5]*n_01*w[1][6] + 0.5*J_1[4]*J_1[8]*K_1[7]*n_02*w[1][6] + 0.5*J_1[5]*J_1[7]*K_1[8]*n_01*w[1][6] + 0.5*J_1[6]*J_1[7]*K_1[0]*n_00*w[1][6] + 0.5*J_1[6]*J_1[7]*K_1[1]*n_01*w[1][6] + 0.5*J_1[7]*J_1[7]*K_1[3]*n_00*w[1][6] + 0.5*J_1[7]*J_1[7]*K_1[4]*n_01*w[1][6] + 0.5*J_1[7]*J_1[8]*K_1[6]*n_00*w[1][6] + 0.5*J_1[7]*J_1[8]*K_1[7]*n_01*w[1][6] + J_1[0]*J_1[1]*K_1[0]*n_00*w[1][6] + J_1[1]*J_1[1]*K_1[3]*n_00*w[1][6] + J_1[1]*J_1[2]*K_1[6]*n_00*w[1][6] + J_1[3]*J_1[4]*K_1[1]*n_01*w[1][6] + J_1[4]*J_1[4]*K_1[4]*n_01*w[1][6] + J_1[4]*J_1[5]*K_1[7]*n_01*w[1][6] + J_1[6]*J_1[7]*K_1[2]*n_02*w[1][6] + J_1[7]*J_1[7]*K_1[5]*n_02*w[1][6] + J_1[7]*J_1[8]*K_1[8]*n_02*w[1][6])/(detJ_1*detJ_1));
    G[52] = det*w[7][0]*w[9][0]*((-2.0*J_1[1]*J_1[2]*w[1][6]-2.0*J_1[4]*J_1[5]*w[1][6]-2.0*J_1[7]*J_1[8]*w[1][6])/(circumradius_0*detJ_1*detJ_1 + circumradius_1*detJ_1*detJ_1) + (2.0*J_0[1]*J_1[2]*w[1][2] + 2.0*J_0[4]*J_1[5]*w[1][2] + 2.0*J_0[7]*J_1[8]*w[1][2])/(circumradius_0*detJ_0*detJ_1 + circumradius_1*detJ_0*detJ_1));
    G[53] = det*w[7][0]*w[9][0]*((-2.0*J_1[0]*J_1[1]*w[1][6]-2.0*J_1[3]*J_1[4]*w[1][6]-2.0*J_1[6]*J_1[7]*w[1][6])/(circumradius_0*detJ_1*detJ_1 + circumradius_1*detJ_1*detJ_1) + (2.0*J_0[1]*J_1[0]*w[1][2] + 2.0*J_0[4]*J_1[3]*w[1][2] + 2.0*J_0[7]*J_1[6]*w[1][2])/(circumradius_0*detJ_0*detJ_1 + circumradius_1*detJ_0*detJ_1));
    G[54] = det*w[7][0]*w[8][0]*((-0.5*J_0[0]*J_0[1]*K_0[1]*n_01*w[1][2]-0.5*J_0[0]*J_0[1]*K_0[2]*n_02*w[1][2]-0.5*J_0[0]*J_0[4]*K_0[1]*n_00*w[1][2]-0.5*J_0[0]*J_0[7]*K_0[2]*n_00*w[1][2]-0.5*J_0[1]*J_0[1]*K_0[4]*n_01*w[1][2]-0.5*J_0[1]*J_0[1]*K_0[5]*n_02*w[1][2]-0.5*J_0[1]*J_0[2]*K_0[7]*n_01*w[1][2]-0.5*J_0[1]*J_0[2]*K_0[8]*n_02*w[1][2]-0.5*J_0[1]*J_0[3]*K_0[0]*n_01*w[1][2]-0.5*J_0[1]*J_0[4]*K_0[3]*n_01*w[1][2]-0.5*J_0[1]*J_0[4]*K_0[4]*n_00*w[1][2]-0.5*J_0[1]*J_0[5]*K_0[6]*n_01*w[1][2]-0.5*J_0[1]*J_0[6]*K_0[0]*n_02*w[1][2]-0.5*J_0[1]*J_0[7]*K_0[3]*n_02*w[1][2]-0.5*J_0[1]*J_0[7]*K_0[5]*n_00*w[1][2]-0.5*J_0[1]*J_0[8]*K_0[6]*n_02*w[1][2]-0.5*J_0[2]*J_0[4]*K_0[7]*n_00*w[1][2]-0.5*J_0[2]*J_0[7]*K_0[8]*n_00*w[1][2]-0.5*J_0[3]*J_0[4]*K_0[0]*n_00*w[1][2]-0.5*J_0[3]*J_0[4]*K_0[2]*n_02*w[1][2]-0.5*J_0[3]*J_0[7]*K_0[2]*n_01*w[1][2]-0.5*J_0[4]*J_0[4]*K_0[3]*n_00*w[1][2]-0.5*J_0[4]*J_0[4]*K_0[5]*n_02*w[1][2]-0.5*J_0[4]*J_0[5]*K_0[6]*n_00*w[1][2]-0.5*J_0[4]*J_0[5]*K_0[8]*n_02*w[1][2]-0.5*J_0[4]*J_0[6]*K_0[1]*n_02*w[1][2]-0.5*J_0[4]*J_0[7]*K_0[4]*n_02*w[1][2]-0.5*J_0[4]*J_0[7]*K_0[5]*n_01*w[1][2]-0.5*J_0[4]*J_0[8]*K_0[7]*n_02*w[1][2]-0.5*J_0[5]*J_0[7]*K_0[8]*n_01*w[1][2]-0.5*J_0[6]*J_0[7]*K_0[0]*n_00*w[1][2]-0.5*J_0[6]*J_0[7]*K_0[1]*n_01*w[1][2]-0.5*J_0[7]*J_0[7]*K_0[3]*n_00*w[1][2]-0.5*J_0[7]*J_0[7]*K_0[4]*n_01*w[1][2]-0.5*J_0[7]*J_0[8]*K_0[6]*n_00*w[1][2]-0.5*J_0[7]*J_0[8]*K_0[7]*n_01*w[1][2] - J_0[0]*J_0[1]*K_0[0]*n_00*w[1][2] - J_0[1]*J_0[1]*K_0[3]*n_00*w[1][2] - J_0[1]*J_0[2]*K_0[6]*n_00*w[1][2] - J_0[3]*J_0[4]*K_0[1]*n_01*w[1][2] - J_0[4]*J_0[4]*K_0[4]*n_01*w[1][2] - J_0[4]*J_0[5]*K_0[7]*n_01*w[1][2] - J_0[6]*J_0[7]*K_0[2]*n_02*w[1][2] - J_0[7]*J_0[7]*K_0[5]*n_02*w[1][2] - J_0[7]*J_0[8]*K_0[8]*n_02*w[1][2])/(detJ_0*detJ_0) + (0.5*J_0[0]*J_1[1]*K_0[1]*n_01*w[1][6] + 0.5*J_0[0]*J_1[1]*K_0[2]*n_02*w[1][6] + 0.5*J_0[0]*J_1[4]*K_0[1]*n_00*w[1][6] + 0.5*J_0[0]*J_1[7]*K_0[2]*n_00*w[1][6] + 0.5*J_0[1]*J_1[1]*K_0[4]*n_01*w[1][6] + 0.5*J_0[1]*J_1[1]*K_0[5]*n_02*w[1][6] + 0.5*J_0[1]*J_1[4]*K_0[4]*n_00*w[1][6] + 0.5*J_0[1]*J_1[7]*K_0[5]*n_00*w[1][6] + 0.5*J_0[2]*J_1[1]*K_0[7]*n_01*w[1][6] + 0.5*J_0[2]*J_1[1]*K_0[8]*n_02*w[1][6] + 0.5*J_0[2]*J_1[4]*K_0[7]*n_00*w[1][6] + 0.5*J_0[2]*J_1[7]*K_0[8]*n_00*w[1][6] + 0.5*J_0[3]*J_1[1]*K_0[0]*n_01*w[1][6] + 0.5*J_0[3]*J_1[4]*K_0[0]*n_00*w[1][6] + 0.5*J_0[3]*J_1[4]*K_0[2]*n_02*w[1][6] + 0.5*J_0[3]*J_1[7]*K_0[2]*n_01*w[1][6] + 0.5*J_0[4]*J_1[1]*K_0[3]*n_01*w[1][6] + 0.5*J_0[4]*J_1[4]*K_0[3]*n_00*w[1][6] + 0.5*J_0[4]*J_1[4]*K_0[5]*n_02*w[1][6] + 0.5*J_0[4]*J_1[7]*K_0[5]*n_01*w[1][6] + 0.5*J_0[5]*J_1[1]*K_0[6]*n_01*w[1][6] + 0.5*J_0[5]*J_1[4]*K_0[6]*n_00*w[1][6] + 0.5*J_0[5]*J_1[4]*K_0[8]*n_02*w[1][6] + 0.5*J_0[5]*J_1[7]*K_0[8]*n_01*w[1][6] + 0.5*J_0[6]*J_1[1]*K_0[0]*n_02*w[1][6] + 0.5*J_0[6]*J_1[4]*K_0[1]*n_02*w[1][6] + 0.5*J_0[6]*J_1[7]*K_0[0]*n_00*w[1][6] + 0.5*J_0[6]*J_1[7]*K_0[1]*n_01*w[1][6] + 0.5*J_0[7]*J_1[1]*K_0[3]*n_02*w[1][6] + 0.5*J_0[7]*J_1[4]*K_0[4]*n_02*w[1][6] + 0.5*J_0[7]*J_1[7]*K_0[3]*n_00*w[1][6] + 0.5*J_0[7]*J_1[7]*K_0[4]*n_01*w[1][6] + 0.5*J_0[8]*J_1[1]*K_0[6]*n_02*w[1][6] + 0.5*J_0[8]*J_1[4]*K_0[7]*n_02*w[1][6] + 0.5*J_0[8]*J_1[7]*K_0[6]*n_00*w[1][6] + 0.5*J_0[8]*J_1[7]*K_0[7]*n_01*w[1][6] + J_0[0]*J_1[1]*K_0[0]*n_00*w[1][6] + J_0[1]*J_1[1]*K_0[3]*n_00*w[1][6] + J_0[2]*J_1[1]*K_0[6]*n_00*w[1][6] + J_0[3]*J_1[4]*K_0[1]*n_01*w[1][6] + J_0[4]*J_1[4]*K_0[4]*n_01*w[1][6] + J_0[5]*J_1[4]*K_0[7]*n_01*w[1][6] + J_0[6]*J_1[7]*K_0[2]*n_02*w[1][6] + J_0[7]*J_1[7]*K_0[5]*n_02*w[1][6] + J_0[8]*J_1[7]*K_0[8]*n_02*w[1][6])/(detJ_0*detJ_1));
    G[55] = det*w[7][0]*w[9][0]*((-2.0*J_0[1]*J_0[2]*w[1][2]-2.0*J_0[4]*J_0[5]*w[1][2]-2.0*J_0[7]*J_0[8]*w[1][2])/(circumradius_0*detJ_0*detJ_0 + circumradius_1*detJ_0*detJ_0) + (2.0*J_0[2]*J_1[1]*w[1][6] + 2.0*J_0[5]*J_1[4]*w[1][6] + 2.0*J_0[8]*J_1[7]*w[1][6])/(circumradius_0*detJ_0*detJ_1 + circumradius_1*detJ_0*detJ_1));
    G[56] = det*w[7][0]*w[9][0]*((-2.0*J_0[0]*J_0[1]*w[1][2]-2.0*J_0[3]*J_0[4]*w[1][2]-2.0*J_0[6]*J_0[7]*w[1][2])/(circumradius_0*detJ_0*detJ_0 + circumradius_1*detJ_0*detJ_0) + (2.0*J_0[0]*J_1[1]*w[1][6] + 2.0*J_0[3]*J_1[4]*w[1][6] + 2.0*J_0[6]*J_1[7]*w[1][6])/(circumradius_0*detJ_0*detJ_1 + circumradius_1*detJ_0*detJ_1));
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    switch (facet_0)
    {
    case 0:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 744
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 744
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          
          // Total number of operations to compute function values = 64
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE0_f0_C3[ip][r]*w[1][r + 4];
            F1 += FE0_f0_C4[ip][r]*w[1][r + 4];
            F2 += FE0_f0_C5[ip][r]*w[1][r + 4];
            F3 += FE0_f0_C3[ip][r]*w[1][r];
            F4 += FE0_f0_C4[ip][r]*w[1][r];
            F5 += FE0_f0_C5[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F7 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 120
          double I[8];
          // Number of operations: 16
          I[0] = W3[ip]*(F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5] + F6*G[6] + F7*G[7]);
          
          // Number of operations: 12
          I[1] = W3[ip]*(F0*G[7] + F1*G[8] + F2*G[9] + F3*G[10] + F4*G[11] + F5*G[12]);
          
          // Number of operations: 16
          I[2] = W3[ip]*(F0*G[1] + F1*G[13] + F2*G[14] + F3*G[15] + F4*G[16] + F5*G[17] + F6*G[18] + F7*G[8]);
          
          // Number of operations: 16
          I[3] = W3[ip]*(F0*G[2] + F1*G[14] + F2*G[19] + F3*G[20] + F4*G[21] + F5*G[22] + F6*G[23] + F7*G[9]);
          
          // Number of operations: 16
          I[4] = W3[ip]*(F0*G[3] + F1*G[15] + F2*G[20] + F3*G[24] + F4*G[25] + F5*G[26] + F6*G[27] + F7*G[10]);
          
          // Number of operations: 12
          I[5] = W3[ip]*(F0*G[6] + F1*G[18] + F2*G[23] + F3*G[27] + F4*G[28] + F5*G[29]);
          
          // Number of operations: 16
          I[6] = W3[ip]*(F0*G[4] + F1*G[16] + F2*G[21] + F3*G[25] + F4*G[30] + F5*G[31] + F6*G[28] + F7*G[11]);
          
          // Number of operations: 16
          I[7] = W3[ip]*(F0*G[5] + F1*G[17] + F2*G[22] + F3*G[26] + F4*G[31] + F5*G[32] + F6*G[29] + F7*G[12]);
          
          
          // Number of operations for primary indices: 64
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc12[j] + 17)] += FE0_f0_C3[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc14[j] + 17)] += FE0_f0_C4[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)] += FE0_f0_C5[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc12[j]] += FE0_f0_C3[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc14[j]] += FE0_f0_C4[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0_C5[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 708
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 708
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE0_f1_C3[ip][0]*w[1][5];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 56
          for (unsigned int r = 0; r < 4; r++)
          {
            F1 += FE0_f0_C4[ip][r]*w[1][r + 4];
            F2 += FE0_f0_C5[ip][r]*w[1][r + 4];
            F3 += FE0_f0_C3[ip][r]*w[1][r];
            F4 += FE0_f0_C4[ip][r]*w[1][r];
            F5 += FE0_f0_C5[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F7 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 120
          double I[8];
          // Number of operations: 16
          I[0] = W3[ip]*(F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5] + F6*G[6] + F7*G[7]);
          
          // Number of operations: 12
          I[1] = W3[ip]*(F0*G[7] + F1*G[8] + F2*G[9] + F3*G[10] + F4*G[11] + F5*G[12]);
          
          // Number of operations: 16
          I[2] = W3[ip]*(F0*G[1] + F1*G[13] + F2*G[14] + F3*G[15] + F4*G[16] + F5*G[17] + F6*G[18] + F7*G[8]);
          
          // Number of operations: 16
          I[3] = W3[ip]*(F0*G[2] + F1*G[14] + F2*G[19] + F3*G[20] + F4*G[21] + F5*G[22] + F6*G[23] + F7*G[9]);
          
          // Number of operations: 16
          I[4] = W3[ip]*(F0*G[3] + F1*G[15] + F2*G[20] + F3*G[24] + F4*G[25] + F5*G[26] + F6*G[27] + F7*G[10]);
          
          // Number of operations: 12
          I[5] = W3[ip]*(F0*G[6] + F1*G[18] + F2*G[23] + F3*G[27] + F4*G[28] + F5*G[29]);
          
          // Number of operations: 16
          I[6] = W3[ip]*(F0*G[4] + F1*G[16] + F2*G[21] + F3*G[25] + F4*G[30] + F5*G[31] + F6*G[28] + F7*G[11]);
          
          // Number of operations: 16
          I[7] = W3[ip]*(F0*G[5] + F1*G[17] + F2*G[22] + F3*G[26] + F4*G[31] + F5*G[32] + F6*G[29] + F7*G[12]);
          
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc20[j] + 17)] += FE0_f1_C3[ip][j]*I[0];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc14[j] + 17)] += FE0_f0_C4[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)] += FE0_f0_C5[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc12[j]] += FE0_f0_C3[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc14[j]] += FE0_f0_C4[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0_C5[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 675
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 675
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          
          // Total number of operations to compute function values = 56
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE0_f2_C3[ip][r]*w[1][r + 4];
            F1 += FE0_f0_C5[ip][r]*w[1][r + 4];
            F2 += FE0_f0_C3[ip][r]*w[1][r];
            F3 += FE0_f0_C4[ip][r]*w[1][r];
            F4 += FE0_f0_C5[ip][r]*w[1][r];
            F5 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 112
          double I[8];
          // Number of operations: 15
          I[0] = W3[ip]*(G[33] + F0*G[1] + F1*G[14] + F2*G[15] + F3*G[16] + F4*G[17] + F5*G[18] + F6*G[8]);
          
          // Number of operations: 11
          I[1] = W3[ip]*(G[34] + F0*G[7] + F1*G[9] + F2*G[10] + F3*G[11] + F4*G[12]);
          
          // Number of operations: 15
          I[2] = W3[ip]*(G[35] + F0*G[2] + F1*G[19] + F2*G[20] + F3*G[21] + F4*G[22] + F5*G[23] + F6*G[9]);
          
          // Number of operations: 15
          I[3] = W3[ip]*(G[36] + F0*G[0] + F1*G[2] + F2*G[3] + F3*G[4] + F4*G[5] + F5*G[6] + F6*G[7]);
          
          // Number of operations: 15
          I[4] = W3[ip]*(G[37] + F0*G[3] + F1*G[20] + F2*G[24] + F3*G[25] + F4*G[26] + F5*G[27] + F6*G[10]);
          
          // Number of operations: 11
          I[5] = W3[ip]*(G[38] + F0*G[6] + F1*G[23] + F2*G[27] + F3*G[28] + F4*G[29]);
          
          // Number of operations: 15
          I[6] = W3[ip]*(G[39] + F0*G[4] + F1*G[21] + F2*G[25] + F3*G[30] + F4*G[31] + F5*G[28] + F6*G[11]);
          
          // Number of operations: 15
          I[7] = W3[ip]*(G[40] + F0*G[5] + F1*G[22] + F2*G[26] + F3*G[31] + F4*G[32] + F5*G[29] + F6*G[12]);
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[31] += I[0];
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)] += FE0_f0_C5[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 17)] += FE0_f2_C3[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc12[j]] += FE0_f0_C3[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc14[j]] += FE0_f0_C4[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0_C5[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 708
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 708
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F2 += FE0_f1_C3[ip][0]*w[1][7];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 56
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE0_f2_C3[ip][r]*w[1][r + 4];
            F1 += FE0_f3_C4[ip][r]*w[1][r + 4];
            F3 += FE0_f0_C3[ip][r]*w[1][r];
            F4 += FE0_f0_C4[ip][r]*w[1][r];
            F5 += FE0_f0_C5[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F7 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 120
          double I[8];
          // Number of operations: 16
          I[0] = W3[ip]*(F0*G[2] + F1*G[14] + F2*G[19] + F3*G[20] + F4*G[21] + F5*G[22] + F6*G[23] + F7*G[9]);
          
          // Number of operations: 12
          I[1] = W3[ip]*(F0*G[7] + F1*G[8] + F2*G[9] + F3*G[10] + F4*G[11] + F5*G[12]);
          
          // Number of operations: 16
          I[2] = W3[ip]*(F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5] + F6*G[6] + F7*G[7]);
          
          // Number of operations: 16
          I[3] = W3[ip]*(F0*G[1] + F1*G[13] + F2*G[14] + F3*G[15] + F4*G[16] + F5*G[17] + F6*G[18] + F7*G[8]);
          
          // Number of operations: 16
          I[4] = W3[ip]*(F0*G[3] + F1*G[15] + F2*G[20] + F3*G[24] + F4*G[25] + F5*G[26] + F6*G[27] + F7*G[10]);
          
          // Number of operations: 12
          I[5] = W3[ip]*(F0*G[6] + F1*G[18] + F2*G[23] + F3*G[27] + F4*G[28] + F5*G[29]);
          
          // Number of operations: 16
          I[6] = W3[ip]*(F0*G[4] + F1*G[16] + F2*G[21] + F3*G[25] + F4*G[30] + F5*G[31] + F6*G[28] + F7*G[11]);
          
          // Number of operations: 16
          I[7] = W3[ip]*(F0*G[5] + F1*G[17] + F2*G[22] + F3*G[26] + F4*G[31] + F5*G[32] + F6*G[29] + F7*G[12]);
          
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc30[j] + 17)] += FE0_f1_C3[ip][j]*I[0];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 17)] += FE0_f2_C3[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc29[j] + 17)] += FE0_f3_C4[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[nzc12[j]] += FE0_f0_C3[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc14[j]] += FE0_f0_C4[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0_C5[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 708
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 708
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F3 += FE0_f1_C3[ip][0]*w[1][1];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 56
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE0_f0_C3[ip][r]*w[1][r + 4];
            F1 += FE0_f0_C4[ip][r]*w[1][r + 4];
            F2 += FE0_f0_C5[ip][r]*w[1][r + 4];
            F4 += FE0_f0_C4[ip][r]*w[1][r];
            F5 += FE0_f0_C5[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F7 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 120
          double I[8];
          // Number of operations: 16
          I[0] = W3[ip]*(F0*G[3] + F1*G[15] + F2*G[20] + F3*G[24] + F4*G[25] + F5*G[26] + F6*G[27] + F7*G[10]);
          
          // Number of operations: 16
          I[1] = W3[ip]*(F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5] + F6*G[6] + F7*G[7]);
          
          // Number of operations: 12
          I[2] = W3[ip]*(F0*G[7] + F1*G[8] + F2*G[9] + F3*G[10] + F4*G[11] + F5*G[12]);
          
          // Number of operations: 16
          I[3] = W3[ip]*(F0*G[1] + F1*G[13] + F2*G[14] + F3*G[15] + F4*G[16] + F5*G[17] + F6*G[18] + F7*G[8]);
          
          // Number of operations: 16
          I[4] = W3[ip]*(F0*G[2] + F1*G[14] + F2*G[19] + F3*G[20] + F4*G[21] + F5*G[22] + F6*G[23] + F7*G[9]);
          
          // Number of operations: 12
          I[5] = W3[ip]*(F0*G[6] + F1*G[18] + F2*G[23] + F3*G[27] + F4*G[28] + F5*G[29]);
          
          // Number of operations: 16
          I[6] = W3[ip]*(F0*G[4] + F1*G[16] + F2*G[21] + F3*G[25] + F4*G[30] + F5*G[31] + F6*G[28] + F7*G[11]);
          
          // Number of operations: 16
          I[7] = W3[ip]*(F0*G[5] + F1*G[17] + F2*G[22] + F3*G[26] + F4*G[31] + F5*G[32] + F6*G[29] + F7*G[12]);
          
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[nzc20[j]] += FE0_f1_C3[ip][j]*I[0];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc12[j] + 17)] += FE0_f0_C3[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc14[j] + 17)] += FE0_f0_C4[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)] += FE0_f0_C5[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc14[j]] += FE0_f0_C4[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0_C5[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 672
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 672
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          
          // Total number of operations to compute function values = 4
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE0_f1_C3[ip][0]*w[1][5];
            F3 += FE0_f1_C3[ip][0]*w[1][1];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 48
          for (unsigned int r = 0; r < 4; r++)
          {
            F1 += FE0_f0_C4[ip][r]*w[1][r + 4];
            F2 += FE0_f0_C5[ip][r]*w[1][r + 4];
            F4 += FE0_f0_C4[ip][r]*w[1][r];
            F5 += FE0_f0_C5[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F7 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 120
          double I[8];
          // Number of operations: 16
          I[0] = W3[ip]*(F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5] + F6*G[6] + F7*G[7]);
          
          // Number of operations: 16
          I[1] = W3[ip]*(F0*G[3] + F1*G[15] + F2*G[20] + F3*G[24] + F4*G[25] + F5*G[26] + F6*G[27] + F7*G[10]);
          
          // Number of operations: 12
          I[2] = W3[ip]*(F0*G[7] + F1*G[8] + F2*G[9] + F3*G[10] + F4*G[11] + F5*G[12]);
          
          // Number of operations: 16
          I[3] = W3[ip]*(F0*G[1] + F1*G[13] + F2*G[14] + F3*G[15] + F4*G[16] + F5*G[17] + F6*G[18] + F7*G[8]);
          
          // Number of operations: 16
          I[4] = W3[ip]*(F0*G[2] + F1*G[14] + F2*G[19] + F3*G[20] + F4*G[21] + F5*G[22] + F6*G[23] + F7*G[9]);
          
          // Number of operations: 12
          I[5] = W3[ip]*(F0*G[6] + F1*G[18] + F2*G[23] + F3*G[27] + F4*G[28] + F5*G[29]);
          
          // Number of operations: 16
          I[6] = W3[ip]*(F0*G[4] + F1*G[16] + F2*G[21] + F3*G[25] + F4*G[30] + F5*G[31] + F6*G[28] + F7*G[11]);
          
          // Number of operations: 16
          I[7] = W3[ip]*(F0*G[5] + F1*G[17] + F2*G[22] + F3*G[26] + F4*G[31] + F5*G[32] + F6*G[29] + F7*G[12]);
          
          
          // Number of operations for primary indices: 4
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc20[j] + 17)] += FE0_f1_C3[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc20[j]] += FE0_f1_C3[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc14[j] + 17)] += FE0_f0_C4[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)] += FE0_f0_C5[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc14[j]] += FE0_f0_C4[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0_C5[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 639
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 639
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F2 += FE0_f1_C3[ip][0]*w[1][1];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 48
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE0_f2_C3[ip][r]*w[1][r + 4];
            F1 += FE0_f0_C5[ip][r]*w[1][r + 4];
            F3 += FE0_f0_C4[ip][r]*w[1][r];
            F4 += FE0_f0_C5[ip][r]*w[1][r];
            F5 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 112
          double I[8];
          // Number of operations: 15
          I[0] = W3[ip]*(G[33] + F0*G[1] + F1*G[14] + F2*G[15] + F3*G[16] + F4*G[17] + F5*G[18] + F6*G[8]);
          
          // Number of operations: 15
          I[1] = W3[ip]*(G[37] + F0*G[3] + F1*G[20] + F2*G[24] + F3*G[25] + F4*G[26] + F5*G[27] + F6*G[10]);
          
          // Number of operations: 11
          I[2] = W3[ip]*(G[34] + F0*G[7] + F1*G[9] + F2*G[10] + F3*G[11] + F4*G[12]);
          
          // Number of operations: 15
          I[3] = W3[ip]*(G[35] + F0*G[2] + F1*G[19] + F2*G[20] + F3*G[21] + F4*G[22] + F5*G[23] + F6*G[9]);
          
          // Number of operations: 15
          I[4] = W3[ip]*(G[36] + F0*G[0] + F1*G[2] + F2*G[3] + F3*G[4] + F4*G[5] + F5*G[6] + F6*G[7]);
          
          // Number of operations: 11
          I[5] = W3[ip]*(G[38] + F0*G[6] + F1*G[23] + F2*G[27] + F3*G[28] + F4*G[29]);
          
          // Number of operations: 15
          I[6] = W3[ip]*(G[39] + F0*G[4] + F1*G[21] + F2*G[25] + F3*G[30] + F4*G[31] + F5*G[28] + F6*G[11]);
          
          // Number of operations: 15
          I[7] = W3[ip]*(G[40] + F0*G[5] + F1*G[22] + F2*G[26] + F3*G[31] + F4*G[32] + F5*G[29] + F6*G[12]);
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[31] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[nzc20[j]] += FE0_f1_C3[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)] += FE0_f0_C5[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 17)] += FE0_f2_C3[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc14[j]] += FE0_f0_C4[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0_C5[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 672
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 672
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          
          // Total number of operations to compute function values = 4
          for (unsigned int r = 0; r < 1; r++)
          {
            F2 += FE0_f1_C3[ip][0]*w[1][7];
            F3 += FE0_f1_C3[ip][0]*w[1][1];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 48
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE0_f2_C3[ip][r]*w[1][r + 4];
            F1 += FE0_f3_C4[ip][r]*w[1][r + 4];
            F4 += FE0_f0_C4[ip][r]*w[1][r];
            F5 += FE0_f0_C5[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F7 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 120
          double I[8];
          // Number of operations: 16
          I[0] = W3[ip]*(F0*G[2] + F1*G[14] + F2*G[19] + F3*G[20] + F4*G[21] + F5*G[22] + F6*G[23] + F7*G[9]);
          
          // Number of operations: 16
          I[1] = W3[ip]*(F0*G[3] + F1*G[15] + F2*G[20] + F3*G[24] + F4*G[25] + F5*G[26] + F6*G[27] + F7*G[10]);
          
          // Number of operations: 12
          I[2] = W3[ip]*(F0*G[7] + F1*G[8] + F2*G[9] + F3*G[10] + F4*G[11] + F5*G[12]);
          
          // Number of operations: 16
          I[3] = W3[ip]*(F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5] + F6*G[6] + F7*G[7]);
          
          // Number of operations: 16
          I[4] = W3[ip]*(F0*G[1] + F1*G[13] + F2*G[14] + F3*G[15] + F4*G[16] + F5*G[17] + F6*G[18] + F7*G[8]);
          
          // Number of operations: 12
          I[5] = W3[ip]*(F0*G[6] + F1*G[18] + F2*G[23] + F3*G[27] + F4*G[28] + F5*G[29]);
          
          // Number of operations: 16
          I[6] = W3[ip]*(F0*G[4] + F1*G[16] + F2*G[21] + F3*G[25] + F4*G[30] + F5*G[31] + F6*G[28] + F7*G[11]);
          
          // Number of operations: 16
          I[7] = W3[ip]*(F0*G[5] + F1*G[17] + F2*G[22] + F3*G[26] + F4*G[31] + F5*G[32] + F6*G[29] + F7*G[12]);
          
          
          // Number of operations for primary indices: 4
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc30[j] + 17)] += FE0_f1_C3[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc20[j]] += FE0_f1_C3[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 17)] += FE0_f2_C3[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc29[j] + 17)] += FE0_f3_C4[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc14[j]] += FE0_f0_C4[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0_C5[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 675
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 675
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          
          // Total number of operations to compute function values = 56
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE0_f0_C3[ip][r]*w[1][r + 4];
            F1 += FE0_f0_C4[ip][r]*w[1][r + 4];
            F2 += FE0_f0_C5[ip][r]*w[1][r + 4];
            F3 += FE0_f2_C3[ip][r]*w[1][r];
            F4 += FE0_f0_C5[ip][r]*w[1][r];
            F5 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 112
          double I[8];
          // Number of operations: 15
          I[0] = W3[ip]*(G[41] + F0*G[4] + F1*G[16] + F2*G[21] + F3*G[25] + F4*G[31] + F5*G[28] + F6*G[11]);
          
          // Number of operations: 15
          I[1] = W3[ip]*(G[42] + F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[5] + F5*G[6] + F6*G[7]);
          
          // Number of operations: 11
          I[2] = W3[ip]*(G[43] + F0*G[7] + F1*G[8] + F2*G[9] + F3*G[10] + F4*G[12]);
          
          // Number of operations: 15
          I[3] = W3[ip]*(G[44] + F0*G[1] + F1*G[13] + F2*G[14] + F3*G[15] + F4*G[17] + F5*G[18] + F6*G[8]);
          
          // Number of operations: 15
          I[4] = W3[ip]*(G[45] + F0*G[2] + F1*G[14] + F2*G[19] + F3*G[20] + F4*G[22] + F5*G[23] + F6*G[9]);
          
          // Number of operations: 11
          I[5] = W3[ip]*(G[46] + F0*G[6] + F1*G[18] + F2*G[23] + F3*G[27] + F4*G[29]);
          
          // Number of operations: 15
          I[6] = W3[ip]*(G[47] + F0*G[5] + F1*G[17] + F2*G[22] + F3*G[26] + F4*G[32] + F5*G[29] + F6*G[12]);
          
          // Number of operations: 15
          I[7] = W3[ip]*(G[48] + F0*G[3] + F1*G[15] + F2*G[20] + F3*G[24] + F4*G[26] + F5*G[27] + F6*G[10]);
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[14] += I[0];
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc12[j] + 17)] += FE0_f0_C3[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc14[j] + 17)] += FE0_f0_C4[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)] += FE0_f0_C5[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0_C5[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE0_f2_C3[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 639
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 639
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE0_f1_C3[ip][0]*w[1][5];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 48
          for (unsigned int r = 0; r < 4; r++)
          {
            F1 += FE0_f0_C4[ip][r]*w[1][r + 4];
            F2 += FE0_f0_C5[ip][r]*w[1][r + 4];
            F3 += FE0_f2_C3[ip][r]*w[1][r];
            F4 += FE0_f0_C5[ip][r]*w[1][r];
            F5 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 112
          double I[8];
          // Number of operations: 15
          I[0] = W3[ip]*(G[41] + F0*G[4] + F1*G[16] + F2*G[21] + F3*G[25] + F4*G[31] + F5*G[28] + F6*G[11]);
          
          // Number of operations: 15
          I[1] = W3[ip]*(G[42] + F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[5] + F5*G[6] + F6*G[7]);
          
          // Number of operations: 11
          I[2] = W3[ip]*(G[43] + F0*G[7] + F1*G[8] + F2*G[9] + F3*G[10] + F4*G[12]);
          
          // Number of operations: 15
          I[3] = W3[ip]*(G[44] + F0*G[1] + F1*G[13] + F2*G[14] + F3*G[15] + F4*G[17] + F5*G[18] + F6*G[8]);
          
          // Number of operations: 15
          I[4] = W3[ip]*(G[45] + F0*G[2] + F1*G[14] + F2*G[19] + F3*G[20] + F4*G[22] + F5*G[23] + F6*G[9]);
          
          // Number of operations: 11
          I[5] = W3[ip]*(G[46] + F0*G[6] + F1*G[18] + F2*G[23] + F3*G[27] + F4*G[29]);
          
          // Number of operations: 15
          I[6] = W3[ip]*(G[47] + F0*G[5] + F1*G[17] + F2*G[22] + F3*G[26] + F4*G[32] + F5*G[29] + F6*G[12]);
          
          // Number of operations: 15
          I[7] = W3[ip]*(G[48] + F0*G[3] + F1*G[15] + F2*G[20] + F3*G[24] + F4*G[26] + F5*G[27] + F6*G[10]);
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[14] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc20[j] + 17)] += FE0_f1_C3[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc14[j] + 17)] += FE0_f0_C4[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)] += FE0_f0_C5[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0_C5[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE0_f2_C3[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 582
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 582
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          
          // Total number of operations to compute function values = 48
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE0_f2_C3[ip][r]*w[1][r + 4];
            F1 += FE0_f0_C5[ip][r]*w[1][r + 4];
            F2 += FE0_f2_C3[ip][r]*w[1][r];
            F3 += FE0_f0_C5[ip][r]*w[1][r];
            F4 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F5 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 96
          double I[8];
          // Number of operations: 13
          I[0] = W3[ip]*(G[49] + F0*G[4] + F1*G[21] + F2*G[25] + F3*G[31] + F4*G[28] + F5*G[11]);
          
          // Number of operations: 13
          I[1] = W3[ip]*(G[50] + F0*G[1] + F1*G[14] + F2*G[15] + F3*G[17] + F4*G[18] + F5*G[8]);
          
          // Number of operations: 9
          I[2] = W3[ip]*(G[51] + F0*G[7] + F1*G[9] + F2*G[10] + F3*G[12]);
          
          // Number of operations: 13
          I[3] = W3[ip]*(G[52] + F0*G[2] + F1*G[19] + F2*G[20] + F3*G[22] + F4*G[23] + F5*G[9]);
          
          // Number of operations: 13
          I[4] = W3[ip]*(G[53] + F0*G[0] + F1*G[2] + F2*G[3] + F3*G[5] + F4*G[6] + F5*G[7]);
          
          // Number of operations: 9
          I[5] = W3[ip]*(G[54] + F0*G[6] + F1*G[23] + F2*G[27] + F3*G[29]);
          
          // Number of operations: 13
          I[6] = W3[ip]*(G[55] + F0*G[5] + F1*G[22] + F2*G[26] + F3*G[32] + F4*G[29] + F5*G[12]);
          
          // Number of operations: 13
          I[7] = W3[ip]*(G[56] + F0*G[3] + F1*G[20] + F2*G[24] + F3*G[26] + F4*G[27] + F5*G[10]);
          
          
          // Number of operations for primary indices: 2
          // Number of operations to compute entry: 1
          A[14] += I[0];
          // Number of operations to compute entry: 1
          A[31] += I[1];
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)] += FE0_f0_C5[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 17)] += FE0_f2_C3[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0_C5[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE0_f2_C3[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 639
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 639
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F2 += FE0_f1_C3[ip][0]*w[1][7];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 48
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE0_f2_C3[ip][r]*w[1][r + 4];
            F1 += FE0_f3_C4[ip][r]*w[1][r + 4];
            F3 += FE0_f2_C3[ip][r]*w[1][r];
            F4 += FE0_f0_C5[ip][r]*w[1][r];
            F5 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 112
          double I[8];
          // Number of operations: 15
          I[0] = W3[ip]*(G[41] + F0*G[4] + F1*G[16] + F2*G[21] + F3*G[25] + F4*G[31] + F5*G[28] + F6*G[11]);
          
          // Number of operations: 15
          I[1] = W3[ip]*(G[45] + F0*G[2] + F1*G[14] + F2*G[19] + F3*G[20] + F4*G[22] + F5*G[23] + F6*G[9]);
          
          // Number of operations: 11
          I[2] = W3[ip]*(G[43] + F0*G[7] + F1*G[8] + F2*G[9] + F3*G[10] + F4*G[12]);
          
          // Number of operations: 15
          I[3] = W3[ip]*(G[42] + F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[5] + F5*G[6] + F6*G[7]);
          
          // Number of operations: 15
          I[4] = W3[ip]*(G[44] + F0*G[1] + F1*G[13] + F2*G[14] + F3*G[15] + F4*G[17] + F5*G[18] + F6*G[8]);
          
          // Number of operations: 11
          I[5] = W3[ip]*(G[46] + F0*G[6] + F1*G[18] + F2*G[23] + F3*G[27] + F4*G[29]);
          
          // Number of operations: 15
          I[6] = W3[ip]*(G[47] + F0*G[5] + F1*G[17] + F2*G[22] + F3*G[26] + F4*G[32] + F5*G[29] + F6*G[12]);
          
          // Number of operations: 15
          I[7] = W3[ip]*(G[48] + F0*G[3] + F1*G[15] + F2*G[20] + F3*G[24] + F4*G[26] + F5*G[27] + F6*G[10]);
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[14] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc30[j] + 17)] += FE0_f1_C3[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 17)] += FE0_f2_C3[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc29[j] + 17)] += FE0_f3_C4[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc15[j]] += FE0_f0_C5[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE0_f2_C3[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        switch (facet_1)
      {
      case 0:
        {
          // Total number of operations to compute element tensor (from this point): 708
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 708
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F5 += FE0_f1_C3[ip][0]*w[1][3];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 56
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE0_f0_C3[ip][r]*w[1][r + 4];
            F1 += FE0_f0_C4[ip][r]*w[1][r + 4];
            F2 += FE0_f0_C5[ip][r]*w[1][r + 4];
            F3 += FE0_f2_C3[ip][r]*w[1][r];
            F4 += FE0_f3_C4[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F7 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 120
          double I[8];
          // Number of operations: 16
          I[0] = W3[ip]*(F0*G[5] + F1*G[17] + F2*G[22] + F3*G[26] + F4*G[31] + F5*G[32] + F6*G[29] + F7*G[12]);
          
          // Number of operations: 16
          I[1] = W3[ip]*(F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5] + F6*G[6] + F7*G[7]);
          
          // Number of operations: 12
          I[2] = W3[ip]*(F0*G[7] + F1*G[8] + F2*G[9] + F3*G[10] + F4*G[11] + F5*G[12]);
          
          // Number of operations: 16
          I[3] = W3[ip]*(F0*G[1] + F1*G[13] + F2*G[14] + F3*G[15] + F4*G[16] + F5*G[17] + F6*G[18] + F7*G[8]);
          
          // Number of operations: 16
          I[4] = W3[ip]*(F0*G[2] + F1*G[14] + F2*G[19] + F3*G[20] + F4*G[21] + F5*G[22] + F6*G[23] + F7*G[9]);
          
          // Number of operations: 12
          I[5] = W3[ip]*(F0*G[6] + F1*G[18] + F2*G[23] + F3*G[27] + F4*G[28] + F5*G[29]);
          
          // Number of operations: 16
          I[6] = W3[ip]*(F0*G[3] + F1*G[15] + F2*G[20] + F3*G[24] + F4*G[25] + F5*G[26] + F6*G[27] + F7*G[10]);
          
          // Number of operations: 16
          I[7] = W3[ip]*(F0*G[4] + F1*G[16] + F2*G[21] + F3*G[25] + F4*G[30] + F5*G[31] + F6*G[28] + F7*G[11]);
          
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[nzc30[j]] += FE0_f1_C3[ip][j]*I[0];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 56
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc12[j] + 17)] += FE0_f0_C3[ip][j]*I[1];
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc14[j] + 17)] += FE0_f0_C4[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)] += FE0_f0_C5[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE0_f2_C3[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc29[j]] += FE0_f3_C4[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 1:
        {
          // Total number of operations to compute element tensor (from this point): 672
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 672
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          
          // Total number of operations to compute function values = 4
          for (unsigned int r = 0; r < 1; r++)
          {
            F0 += FE0_f1_C3[ip][0]*w[1][5];
            F5 += FE0_f1_C3[ip][0]*w[1][3];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 48
          for (unsigned int r = 0; r < 4; r++)
          {
            F1 += FE0_f0_C4[ip][r]*w[1][r + 4];
            F2 += FE0_f0_C5[ip][r]*w[1][r + 4];
            F3 += FE0_f2_C3[ip][r]*w[1][r];
            F4 += FE0_f3_C4[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F7 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 120
          double I[8];
          // Number of operations: 16
          I[0] = W3[ip]*(F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5] + F6*G[6] + F7*G[7]);
          
          // Number of operations: 16
          I[1] = W3[ip]*(F0*G[5] + F1*G[17] + F2*G[22] + F3*G[26] + F4*G[31] + F5*G[32] + F6*G[29] + F7*G[12]);
          
          // Number of operations: 12
          I[2] = W3[ip]*(F0*G[7] + F1*G[8] + F2*G[9] + F3*G[10] + F4*G[11] + F5*G[12]);
          
          // Number of operations: 16
          I[3] = W3[ip]*(F0*G[1] + F1*G[13] + F2*G[14] + F3*G[15] + F4*G[16] + F5*G[17] + F6*G[18] + F7*G[8]);
          
          // Number of operations: 16
          I[4] = W3[ip]*(F0*G[2] + F1*G[14] + F2*G[19] + F3*G[20] + F4*G[21] + F5*G[22] + F6*G[23] + F7*G[9]);
          
          // Number of operations: 12
          I[5] = W3[ip]*(F0*G[6] + F1*G[18] + F2*G[23] + F3*G[27] + F4*G[28] + F5*G[29]);
          
          // Number of operations: 16
          I[6] = W3[ip]*(F0*G[3] + F1*G[15] + F2*G[20] + F3*G[24] + F4*G[25] + F5*G[26] + F6*G[27] + F7*G[10]);
          
          // Number of operations: 16
          I[7] = W3[ip]*(F0*G[4] + F1*G[16] + F2*G[21] + F3*G[25] + F4*G[30] + F5*G[31] + F6*G[28] + F7*G[11]);
          
          
          // Number of operations for primary indices: 4
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc20[j] + 17)] += FE0_f1_C3[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc30[j]] += FE0_f1_C3[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc14[j] + 17)] += FE0_f0_C4[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)] += FE0_f0_C5[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE0_f2_C3[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc29[j]] += FE0_f3_C4[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 2:
        {
          // Total number of operations to compute element tensor (from this point): 639
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 639
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          
          // Total number of operations to compute function values = 2
          for (unsigned int r = 0; r < 1; r++)
          {
            F4 += FE0_f1_C3[ip][0]*w[1][3];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 48
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE0_f2_C3[ip][r]*w[1][r + 4];
            F1 += FE0_f0_C5[ip][r]*w[1][r + 4];
            F2 += FE0_f2_C3[ip][r]*w[1][r];
            F3 += FE0_f3_C4[ip][r]*w[1][r];
            F5 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 112
          double I[8];
          // Number of operations: 15
          I[0] = W3[ip]*(G[33] + F0*G[1] + F1*G[14] + F2*G[15] + F3*G[16] + F4*G[17] + F5*G[18] + F6*G[8]);
          
          // Number of operations: 15
          I[1] = W3[ip]*(G[40] + F0*G[5] + F1*G[22] + F2*G[26] + F3*G[31] + F4*G[32] + F5*G[29] + F6*G[12]);
          
          // Number of operations: 11
          I[2] = W3[ip]*(G[34] + F0*G[7] + F1*G[9] + F2*G[10] + F3*G[11] + F4*G[12]);
          
          // Number of operations: 15
          I[3] = W3[ip]*(G[35] + F0*G[2] + F1*G[19] + F2*G[20] + F3*G[21] + F4*G[22] + F5*G[23] + F6*G[9]);
          
          // Number of operations: 15
          I[4] = W3[ip]*(G[36] + F0*G[0] + F1*G[2] + F2*G[3] + F3*G[4] + F4*G[5] + F5*G[6] + F6*G[7]);
          
          // Number of operations: 11
          I[5] = W3[ip]*(G[38] + F0*G[6] + F1*G[23] + F2*G[27] + F3*G[28] + F4*G[29]);
          
          // Number of operations: 15
          I[6] = W3[ip]*(G[37] + F0*G[3] + F1*G[20] + F2*G[24] + F3*G[25] + F4*G[26] + F5*G[27] + F6*G[10]);
          
          // Number of operations: 15
          I[7] = W3[ip]*(G[39] + F0*G[4] + F1*G[21] + F2*G[25] + F3*G[30] + F4*G[31] + F5*G[28] + F6*G[11]);
          
          
          // Number of operations for primary indices: 1
          // Number of operations to compute entry: 1
          A[31] += I[0];
          
          // Number of operations for primary indices: 2
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[nzc30[j]] += FE0_f1_C3[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc15[j] + 17)] += FE0_f0_C5[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 17)] += FE0_f2_C3[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE0_f2_C3[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc29[j]] += FE0_f3_C4[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      case 3:
        {
          // Total number of operations to compute element tensor (from this point): 672
        
        // Loop quadrature points for integral.
        // Number of operations to compute element tensor for following IP loop = 672
        for (unsigned int ip = 0; ip < 3; ip++)
        {
          
          // Coefficient declarations.
          double F0 = 0.0;
          double F1 = 0.0;
          double F2 = 0.0;
          double F3 = 0.0;
          double F4 = 0.0;
          double F5 = 0.0;
          double F6 = 0.0;
          double F7 = 0.0;
          
          // Total number of operations to compute function values = 4
          for (unsigned int r = 0; r < 1; r++)
          {
            F2 += FE0_f1_C3[ip][0]*w[1][7];
            F5 += FE0_f1_C3[ip][0]*w[1][3];
          } // end loop over 'r'
          
          // Total number of operations to compute function values = 48
          for (unsigned int r = 0; r < 4; r++)
          {
            F0 += FE0_f2_C3[ip][r]*w[1][r + 4];
            F1 += FE0_f3_C4[ip][r]*w[1][r + 4];
            F3 += FE0_f2_C3[ip][r]*w[1][r];
            F4 += FE0_f3_C4[ip][r]*w[1][r];
            F6 += FE0_f0_C3_D100[ip][r]*w[1][r];
            F7 += FE0_f0_C3_D100[ip][r]*w[1][r + 4];
          } // end loop over 'r'
          
          // Number of operations to compute ip constants: 120
          double I[8];
          // Number of operations: 16
          I[0] = W3[ip]*(F0*G[2] + F1*G[14] + F2*G[19] + F3*G[20] + F4*G[21] + F5*G[22] + F6*G[23] + F7*G[9]);
          
          // Number of operations: 16
          I[1] = W3[ip]*(F0*G[5] + F1*G[17] + F2*G[22] + F3*G[26] + F4*G[31] + F5*G[32] + F6*G[29] + F7*G[12]);
          
          // Number of operations: 12
          I[2] = W3[ip]*(F0*G[7] + F1*G[8] + F2*G[9] + F3*G[10] + F4*G[11] + F5*G[12]);
          
          // Number of operations: 16
          I[3] = W3[ip]*(F0*G[0] + F1*G[1] + F2*G[2] + F3*G[3] + F4*G[4] + F5*G[5] + F6*G[6] + F7*G[7]);
          
          // Number of operations: 16
          I[4] = W3[ip]*(F0*G[1] + F1*G[13] + F2*G[14] + F3*G[15] + F4*G[16] + F5*G[17] + F6*G[18] + F7*G[8]);
          
          // Number of operations: 12
          I[5] = W3[ip]*(F0*G[6] + F1*G[18] + F2*G[23] + F3*G[27] + F4*G[28] + F5*G[29]);
          
          // Number of operations: 16
          I[6] = W3[ip]*(F0*G[3] + F1*G[15] + F2*G[20] + F3*G[24] + F4*G[25] + F5*G[26] + F6*G[27] + F7*G[10]);
          
          // Number of operations: 16
          I[7] = W3[ip]*(F0*G[4] + F1*G[16] + F2*G[21] + F3*G[25] + F4*G[30] + F5*G[31] + F6*G[28] + F7*G[11]);
          
          
          // Number of operations for primary indices: 4
          for (unsigned int j = 0; j < 1; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc30[j] + 17)] += FE0_f1_C3[ip][j]*I[0];
            // Number of operations to compute entry: 2
            A[nzc30[j]] += FE0_f1_C3[ip][j]*I[1];
          } // end loop over 'j'
          
          // Number of operations for primary indices: 48
          for (unsigned int j = 0; j < 4; j++)
          {
            // Number of operations to compute entry: 2
            A[(nzc13[j] + 17)] += FE0_f0_C3_D100[ip][j]*I[2];
            // Number of operations to compute entry: 2
            A[(nzc24[j] + 17)] += FE0_f2_C3[ip][j]*I[3];
            // Number of operations to compute entry: 2
            A[(nzc29[j] + 17)] += FE0_f3_C4[ip][j]*I[4];
            // Number of operations to compute entry: 2
            A[nzc13[j]] += FE0_f0_C3_D100[ip][j]*I[5];
            // Number of operations to compute entry: 2
            A[nzc24[j]] += FE0_f2_C3[ip][j]*I[6];
            // Number of operations to compute entry: 2
            A[nzc29[j]] += FE0_f3_C4[ip][j]*I[7];
          } // end loop over 'j'
        } // end loop over 'ip'
          break;
        }
      }
      
        break;
      }
    }
    
  }

};


class vector_linear_pnp_forms_form_0: public ufc::form
{
public:

  vector_linear_pnp_forms_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "3912f0909f685cbb09c6e21b152dc12d5ff4d532c519fce95298c812ce0ab09badf2a7da89470c3d64b31ff89ec3808c7ef514f36658ba9c57e30a92b18c2911";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 8;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7});
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new vector_linear_pnp_forms_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new vector_linear_pnp_forms_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return nullptr;
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new vector_linear_pnp_forms_finite_element_4();
        break;
      }
    case 1:
      {
        return new vector_linear_pnp_forms_finite_element_4();
        break;
      }
    case 2:
      {
        return new vector_linear_pnp_forms_finite_element_4();
        break;
      }
    case 3:
      {
        return new vector_linear_pnp_forms_finite_element_2();
        break;
      }
    case 4:
      {
        return new vector_linear_pnp_forms_finite_element_0();
        break;
      }
    case 5:
      {
        return new vector_linear_pnp_forms_finite_element_5();
        break;
      }
    case 6:
      {
        return new vector_linear_pnp_forms_finite_element_5();
        break;
      }
    case 7:
      {
        return new vector_linear_pnp_forms_finite_element_6();
        break;
      }
    case 8:
      {
        return new vector_linear_pnp_forms_finite_element_6();
        break;
      }
    case 9:
      {
        return new vector_linear_pnp_forms_finite_element_6();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new vector_linear_pnp_forms_dofmap_4();
        break;
      }
    case 1:
      {
        return new vector_linear_pnp_forms_dofmap_4();
        break;
      }
    case 2:
      {
        return new vector_linear_pnp_forms_dofmap_4();
        break;
      }
    case 3:
      {
        return new vector_linear_pnp_forms_dofmap_2();
        break;
      }
    case 4:
      {
        return new vector_linear_pnp_forms_dofmap_0();
        break;
      }
    case 5:
      {
        return new vector_linear_pnp_forms_dofmap_5();
        break;
      }
    case 6:
      {
        return new vector_linear_pnp_forms_dofmap_5();
        break;
      }
    case 7:
      {
        return new vector_linear_pnp_forms_dofmap_6();
        break;
      }
    case 8:
      {
        return new vector_linear_pnp_forms_dofmap_6();
        break;
      }
    case 9:
      {
        return new vector_linear_pnp_forms_dofmap_6();
        break;
      }
    }
    
    return 0;
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return true;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new vector_linear_pnp_forms_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return new vector_linear_pnp_forms_exterior_facet_integral_0_otherwise();
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return new vector_linear_pnp_forms_interior_facet_integral_0_otherwise();
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return 0;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return 0;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return 0;
  }

};


class vector_linear_pnp_forms_form_1: public ufc::form
{
public:

  vector_linear_pnp_forms_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~vector_linear_pnp_forms_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "e5364aae25dd7fc56007aa87b60b216e38f0f0a76f9b3ca1245b4503c1108d7b5e0df0a65ab217affee6a3ea344e1c2d95e1d0ee521250ed4527ca6f963101ea";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 10;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7, 8, 9});
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new vector_linear_pnp_forms_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new vector_linear_pnp_forms_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return nullptr;
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new vector_linear_pnp_forms_finite_element_4();
        break;
      }
    case 1:
      {
        return new vector_linear_pnp_forms_finite_element_4();
        break;
      }
    case 2:
      {
        return new vector_linear_pnp_forms_finite_element_2();
        break;
      }
    case 3:
      {
        return new vector_linear_pnp_forms_finite_element_3();
        break;
      }
    case 4:
      {
        return new vector_linear_pnp_forms_finite_element_0();
        break;
      }
    case 5:
      {
        return new vector_linear_pnp_forms_finite_element_0();
        break;
      }
    case 6:
      {
        return new vector_linear_pnp_forms_finite_element_5();
        break;
      }
    case 7:
      {
        return new vector_linear_pnp_forms_finite_element_5();
        break;
      }
    case 8:
      {
        return new vector_linear_pnp_forms_finite_element_6();
        break;
      }
    case 9:
      {
        return new vector_linear_pnp_forms_finite_element_6();
        break;
      }
    case 10:
      {
        return new vector_linear_pnp_forms_finite_element_6();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new vector_linear_pnp_forms_dofmap_4();
        break;
      }
    case 1:
      {
        return new vector_linear_pnp_forms_dofmap_4();
        break;
      }
    case 2:
      {
        return new vector_linear_pnp_forms_dofmap_2();
        break;
      }
    case 3:
      {
        return new vector_linear_pnp_forms_dofmap_3();
        break;
      }
    case 4:
      {
        return new vector_linear_pnp_forms_dofmap_0();
        break;
      }
    case 5:
      {
        return new vector_linear_pnp_forms_dofmap_0();
        break;
      }
    case 6:
      {
        return new vector_linear_pnp_forms_dofmap_5();
        break;
      }
    case 7:
      {
        return new vector_linear_pnp_forms_dofmap_5();
        break;
      }
    case 8:
      {
        return new vector_linear_pnp_forms_dofmap_6();
        break;
      }
    case 9:
      {
        return new vector_linear_pnp_forms_dofmap_6();
        break;
      }
    case 10:
      {
        return new vector_linear_pnp_forms_dofmap_6();
        break;
      }
    }
    
    return 0;
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return true;
  }

  bool has_interior_facet_integrals() const final override
  {
    return true;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new vector_linear_pnp_forms_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return new vector_linear_pnp_forms_exterior_facet_integral_1_otherwise();
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return new vector_linear_pnp_forms_interior_facet_integral_1_otherwise();
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return 0;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return 0;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace vector_linear_pnp_forms
{

class CoefficientSpace_diffusivity: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_diffusivity(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_diffusivity(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_fixed_charge: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_fixed_charge(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_fixed_charge(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_mu: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_mu(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_mu(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_penalty1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_penalty1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_penalty1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_penalty2: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_penalty2(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_6>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_penalty2(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_6>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_6>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_permittivity: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_permittivity(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_permittivity(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_uu: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_uu(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_uu(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_uu3: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_uu3(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_uu3(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_uu4: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_uu4(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_uu4(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_valency: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_valency(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_5>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_valency(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_5>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_5>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_FunctionSpace_1: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_a_FunctionSpace_1(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_a_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

class Form_a_MultiMeshFunctionSpace_1: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_a_MultiMeshFunctionSpace_1(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_a_FunctionSpace_1(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_uu Form_a_FunctionSpace_2;

typedef CoefficientSpace_uu3 Form_a_FunctionSpace_3;

typedef CoefficientSpace_permittivity Form_a_FunctionSpace_4;

typedef CoefficientSpace_diffusivity Form_a_FunctionSpace_5;

typedef CoefficientSpace_valency Form_a_FunctionSpace_6;

typedef CoefficientSpace_mu Form_a_FunctionSpace_7;

typedef CoefficientSpace_penalty1 Form_a_FunctionSpace_8;

typedef CoefficientSpace_penalty2 Form_a_FunctionSpace_9;

class Form_a: public dolfin::Form
{
public:

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(2, 8), uu(*this, 0), uu3(*this, 1), permittivity(*this, 2), diffusivity(*this, 3), valency(*this, 4), mu(*this, 5), penalty1(*this, 6), penalty2(*this, 7)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    _ufc_form = std::make_shared<const vector_linear_pnp_forms_form_0>();
  }

  // Constructor
  Form_a(std::shared_ptr<const dolfin::FunctionSpace> V1, std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> uu, std::shared_ptr<const dolfin::GenericFunction> uu3, std::shared_ptr<const dolfin::GenericFunction> permittivity, std::shared_ptr<const dolfin::GenericFunction> diffusivity, std::shared_ptr<const dolfin::GenericFunction> valency, std::shared_ptr<const dolfin::GenericFunction> mu, std::shared_ptr<const dolfin::GenericFunction> penalty1, std::shared_ptr<const dolfin::GenericFunction> penalty2):
    dolfin::Form(2, 8), uu(*this, 0), uu3(*this, 1), permittivity(*this, 2), diffusivity(*this, 3), valency(*this, 4), mu(*this, 5), penalty1(*this, 6), penalty2(*this, 7)
  {
    _function_spaces[0] = V0;
    _function_spaces[1] = V1;

    this->uu = uu;
    this->uu3 = uu3;
    this->permittivity = permittivity;
    this->diffusivity = diffusivity;
    this->valency = valency;
    this->mu = mu;
    this->penalty1 = penalty1;
    this->penalty2 = penalty2;

    _ufc_form = std::make_shared<const vector_linear_pnp_forms_form_0>();
  }

  // Destructor
  ~Form_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "uu")
      return 0;
    else if (name == "uu3")
      return 1;
    else if (name == "permittivity")
      return 2;
    else if (name == "diffusivity")
      return 3;
    else if (name == "valency")
      return 4;
    else if (name == "mu")
      return 5;
    else if (name == "penalty1")
      return 6;
    else if (name == "penalty2")
      return 7;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "uu";
    case 1:
      return "uu3";
    case 2:
      return "permittivity";
    case 3:
      return "diffusivity";
    case 4:
      return "valency";
    case 5:
      return "mu";
    case 6:
      return "penalty1";
    case 7:
      return "penalty2";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_uu;
  typedef Form_a_FunctionSpace_3 CoefficientSpace_uu3;
  typedef Form_a_FunctionSpace_4 CoefficientSpace_permittivity;
  typedef Form_a_FunctionSpace_5 CoefficientSpace_diffusivity;
  typedef Form_a_FunctionSpace_6 CoefficientSpace_valency;
  typedef Form_a_FunctionSpace_7 CoefficientSpace_mu;
  typedef Form_a_FunctionSpace_8 CoefficientSpace_penalty1;
  typedef Form_a_FunctionSpace_9 CoefficientSpace_penalty2;

  // Coefficients
  dolfin::CoefficientAssigner uu;
  dolfin::CoefficientAssigner uu3;
  dolfin::CoefficientAssigner permittivity;
  dolfin::CoefficientAssigner diffusivity;
  dolfin::CoefficientAssigner valency;
  dolfin::CoefficientAssigner mu;
  dolfin::CoefficientAssigner penalty1;
  dolfin::CoefficientAssigner penalty2;
};

class MultiMeshForm_a: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V1, V0), uu(*this, 0), uu3(*this, 1), permittivity(*this, 2), diffusivity(*this, 3), valency(*this, 4), mu(*this, 5), penalty1(*this, 6), penalty2(*this, 7)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<const dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
      add(a);
    }

    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_a(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V1, std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> uu, std::shared_ptr<const dolfin::GenericFunction> uu3, std::shared_ptr<const dolfin::GenericFunction> permittivity, std::shared_ptr<const dolfin::GenericFunction> diffusivity, std::shared_ptr<const dolfin::GenericFunction> valency, std::shared_ptr<const dolfin::GenericFunction> mu, std::shared_ptr<const dolfin::GenericFunction> penalty1, std::shared_ptr<const dolfin::GenericFunction> penalty2):
    dolfin::MultiMeshForm(V1, V0), uu(*this, 0), uu3(*this, 1), permittivity(*this, 2), diffusivity(*this, 3), valency(*this, 4), mu(*this, 5), penalty1(*this, 6), penalty2(*this, 7)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<const dolfin::Form> a(new Form_a(V1->part(part), V0->part(part)));
      add(a);
    }

    // Build multimesh form
    build();

    /// Assign coefficients
    this->uu = uu;
    this->uu3 = uu3;
    this->permittivity = permittivity;
    this->diffusivity = diffusivity;
    this->valency = valency;
    this->mu = mu;
    this->penalty1 = penalty1;
    this->penalty2 = penalty2;

  }

  // Destructor
  ~MultiMeshForm_a()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "uu")
      return 0;
    else if (name == "uu3")
      return 1;
    else if (name == "permittivity")
      return 2;
    else if (name == "diffusivity")
      return 3;
    else if (name == "valency")
      return 4;
    else if (name == "mu")
      return 5;
    else if (name == "penalty1")
      return 6;
    else if (name == "penalty2")
      return 7;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "uu";
    case 1:
      return "uu3";
    case 2:
      return "permittivity";
    case 3:
      return "diffusivity";
    case 4:
      return "valency";
    case 5:
      return "mu";
    case 6:
      return "penalty1";
    case 7:
      return "penalty2";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_a_FunctionSpace_0 TestSpace;
  typedef Form_a_FunctionSpace_1 TrialSpace;
  typedef Form_a_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_a_MultiMeshFunctionSpace_1 MultiMeshTrialSpace;
  typedef Form_a_FunctionSpace_2 CoefficientSpace_uu;
  typedef Form_a_FunctionSpace_3 CoefficientSpace_uu3;
  typedef Form_a_FunctionSpace_4 CoefficientSpace_permittivity;
  typedef Form_a_FunctionSpace_5 CoefficientSpace_diffusivity;
  typedef Form_a_FunctionSpace_6 CoefficientSpace_valency;
  typedef Form_a_FunctionSpace_7 CoefficientSpace_mu;
  typedef Form_a_FunctionSpace_8 CoefficientSpace_penalty1;
  typedef Form_a_FunctionSpace_9 CoefficientSpace_penalty2;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner uu;
  dolfin::MultiMeshCoefficientAssigner uu3;
  dolfin::MultiMeshCoefficientAssigner permittivity;
  dolfin::MultiMeshCoefficientAssigner diffusivity;
  dolfin::MultiMeshCoefficientAssigner valency;
  dolfin::MultiMeshCoefficientAssigner mu;
  dolfin::MultiMeshCoefficientAssigner penalty1;
  dolfin::MultiMeshCoefficientAssigner penalty2;
};

class Form_L_FunctionSpace_0: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  Form_L_FunctionSpace_0(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<vector_linear_pnp_forms_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<vector_linear_pnp_forms_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class Form_L_MultiMeshFunctionSpace_0: public dolfin::MultiMeshFunctionSpace
{
public:

  // Constructor for multimesh function space
  Form_L_MultiMeshFunctionSpace_0(std::shared_ptr<const dolfin::MultiMesh> multimesh): dolfin::MultiMeshFunctionSpace(multimesh)
  {
    // Create and add standard function spaces
    for (std::size_t part = 0; part < multimesh->num_parts(); part++)
    {
      std::shared_ptr<const dolfin::FunctionSpace> V(new Form_L_FunctionSpace_0(multimesh->part(part)));
      add(V);
    }

    // Build multimesh function space
    build();
  }

};

typedef CoefficientSpace_uu Form_L_FunctionSpace_1;

typedef CoefficientSpace_uu3 Form_L_FunctionSpace_2;

typedef CoefficientSpace_uu4 Form_L_FunctionSpace_3;

typedef CoefficientSpace_permittivity Form_L_FunctionSpace_4;

typedef CoefficientSpace_fixed_charge Form_L_FunctionSpace_5;

typedef CoefficientSpace_diffusivity Form_L_FunctionSpace_6;

typedef CoefficientSpace_valency Form_L_FunctionSpace_7;

typedef CoefficientSpace_mu Form_L_FunctionSpace_8;

typedef CoefficientSpace_penalty1 Form_L_FunctionSpace_9;

typedef CoefficientSpace_penalty2 Form_L_FunctionSpace_10;

class Form_L: public dolfin::Form
{
public:

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0):
    dolfin::Form(1, 10), uu(*this, 0), uu3(*this, 1), uu4(*this, 2), permittivity(*this, 3), fixed_charge(*this, 4), diffusivity(*this, 5), valency(*this, 6), mu(*this, 7), penalty1(*this, 8), penalty2(*this, 9)
  {
    _function_spaces[0] = V0;

    _ufc_form = std::make_shared<const vector_linear_pnp_forms_form_1>();
  }

  // Constructor
  Form_L(std::shared_ptr<const dolfin::FunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> uu, std::shared_ptr<const dolfin::GenericFunction> uu3, std::shared_ptr<const dolfin::GenericFunction> uu4, std::shared_ptr<const dolfin::GenericFunction> permittivity, std::shared_ptr<const dolfin::GenericFunction> fixed_charge, std::shared_ptr<const dolfin::GenericFunction> diffusivity, std::shared_ptr<const dolfin::GenericFunction> valency, std::shared_ptr<const dolfin::GenericFunction> mu, std::shared_ptr<const dolfin::GenericFunction> penalty1, std::shared_ptr<const dolfin::GenericFunction> penalty2):
    dolfin::Form(1, 10), uu(*this, 0), uu3(*this, 1), uu4(*this, 2), permittivity(*this, 3), fixed_charge(*this, 4), diffusivity(*this, 5), valency(*this, 6), mu(*this, 7), penalty1(*this, 8), penalty2(*this, 9)
  {
    _function_spaces[0] = V0;

    this->uu = uu;
    this->uu3 = uu3;
    this->uu4 = uu4;
    this->permittivity = permittivity;
    this->fixed_charge = fixed_charge;
    this->diffusivity = diffusivity;
    this->valency = valency;
    this->mu = mu;
    this->penalty1 = penalty1;
    this->penalty2 = penalty2;

    _ufc_form = std::make_shared<const vector_linear_pnp_forms_form_1>();
  }

  // Destructor
  ~Form_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "uu")
      return 0;
    else if (name == "uu3")
      return 1;
    else if (name == "uu4")
      return 2;
    else if (name == "permittivity")
      return 3;
    else if (name == "fixed_charge")
      return 4;
    else if (name == "diffusivity")
      return 5;
    else if (name == "valency")
      return 6;
    else if (name == "mu")
      return 7;
    else if (name == "penalty1")
      return 8;
    else if (name == "penalty2")
      return 9;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "uu";
    case 1:
      return "uu3";
    case 2:
      return "uu4";
    case 3:
      return "permittivity";
    case 4:
      return "fixed_charge";
    case 5:
      return "diffusivity";
    case 6:
      return "valency";
    case 7:
      return "mu";
    case 8:
      return "penalty1";
    case 9:
      return "penalty2";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_uu;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_uu3;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_uu4;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_permittivity;
  typedef Form_L_FunctionSpace_5 CoefficientSpace_fixed_charge;
  typedef Form_L_FunctionSpace_6 CoefficientSpace_diffusivity;
  typedef Form_L_FunctionSpace_7 CoefficientSpace_valency;
  typedef Form_L_FunctionSpace_8 CoefficientSpace_mu;
  typedef Form_L_FunctionSpace_9 CoefficientSpace_penalty1;
  typedef Form_L_FunctionSpace_10 CoefficientSpace_penalty2;

  // Coefficients
  dolfin::CoefficientAssigner uu;
  dolfin::CoefficientAssigner uu3;
  dolfin::CoefficientAssigner uu4;
  dolfin::CoefficientAssigner permittivity;
  dolfin::CoefficientAssigner fixed_charge;
  dolfin::CoefficientAssigner diffusivity;
  dolfin::CoefficientAssigner valency;
  dolfin::CoefficientAssigner mu;
  dolfin::CoefficientAssigner penalty1;
  dolfin::CoefficientAssigner penalty2;
};

class MultiMeshForm_L: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0):
    dolfin::MultiMeshForm(V0), uu(*this, 0), uu3(*this, 1), uu4(*this, 2), permittivity(*this, 3), fixed_charge(*this, 4), diffusivity(*this, 5), valency(*this, 6), mu(*this, 7), penalty1(*this, 8), penalty2(*this, 9)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<const dolfin::Form> a(new Form_L(V0->part(part)));
      add(a);
    }

    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_L(std::shared_ptr<const dolfin::MultiMeshFunctionSpace> V0, std::shared_ptr<const dolfin::GenericFunction> uu, std::shared_ptr<const dolfin::GenericFunction> uu3, std::shared_ptr<const dolfin::GenericFunction> uu4, std::shared_ptr<const dolfin::GenericFunction> permittivity, std::shared_ptr<const dolfin::GenericFunction> fixed_charge, std::shared_ptr<const dolfin::GenericFunction> diffusivity, std::shared_ptr<const dolfin::GenericFunction> valency, std::shared_ptr<const dolfin::GenericFunction> mu, std::shared_ptr<const dolfin::GenericFunction> penalty1, std::shared_ptr<const dolfin::GenericFunction> penalty2):
    dolfin::MultiMeshForm(V0), uu(*this, 0), uu3(*this, 1), uu4(*this, 2), permittivity(*this, 3), fixed_charge(*this, 4), diffusivity(*this, 5), valency(*this, 6), mu(*this, 7), penalty1(*this, 8), penalty2(*this, 9)
  {
    // Create and add standard forms
    std::size_t num_parts = V0->num_parts(); // assume all equal and pick first
    for (std::size_t part = 0; part < num_parts; part++)
    {
      std::shared_ptr<const dolfin::Form> a(new Form_L(V0->part(part)));
      add(a);
    }

    // Build multimesh form
    build();

    /// Assign coefficients
    this->uu = uu;
    this->uu3 = uu3;
    this->uu4 = uu4;
    this->permittivity = permittivity;
    this->fixed_charge = fixed_charge;
    this->diffusivity = diffusivity;
    this->valency = valency;
    this->mu = mu;
    this->penalty1 = penalty1;
    this->penalty2 = penalty2;

  }

  // Destructor
  ~MultiMeshForm_L()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "uu")
      return 0;
    else if (name == "uu3")
      return 1;
    else if (name == "uu4")
      return 2;
    else if (name == "permittivity")
      return 3;
    else if (name == "fixed_charge")
      return 4;
    else if (name == "diffusivity")
      return 5;
    else if (name == "valency")
      return 6;
    else if (name == "mu")
      return 7;
    else if (name == "penalty1")
      return 8;
    else if (name == "penalty2")
      return 9;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "uu";
    case 1:
      return "uu3";
    case 2:
      return "uu4";
    case 3:
      return "permittivity";
    case 4:
      return "fixed_charge";
    case 5:
      return "diffusivity";
    case 6:
      return "valency";
    case 7:
      return "mu";
    case 8:
      return "penalty1";
    case 9:
      return "penalty2";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_L_FunctionSpace_0 TestSpace;
  typedef Form_L_MultiMeshFunctionSpace_0 MultiMeshTestSpace;
  typedef Form_L_FunctionSpace_1 CoefficientSpace_uu;
  typedef Form_L_FunctionSpace_2 CoefficientSpace_uu3;
  typedef Form_L_FunctionSpace_3 CoefficientSpace_uu4;
  typedef Form_L_FunctionSpace_4 CoefficientSpace_permittivity;
  typedef Form_L_FunctionSpace_5 CoefficientSpace_fixed_charge;
  typedef Form_L_FunctionSpace_6 CoefficientSpace_diffusivity;
  typedef Form_L_FunctionSpace_7 CoefficientSpace_valency;
  typedef Form_L_FunctionSpace_8 CoefficientSpace_mu;
  typedef Form_L_FunctionSpace_9 CoefficientSpace_penalty1;
  typedef Form_L_FunctionSpace_10 CoefficientSpace_penalty2;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner uu;
  dolfin::MultiMeshCoefficientAssigner uu3;
  dolfin::MultiMeshCoefficientAssigner uu4;
  dolfin::MultiMeshCoefficientAssigner permittivity;
  dolfin::MultiMeshCoefficientAssigner fixed_charge;
  dolfin::MultiMeshCoefficientAssigner diffusivity;
  dolfin::MultiMeshCoefficientAssigner valency;
  dolfin::MultiMeshCoefficientAssigner mu;
  dolfin::MultiMeshCoefficientAssigner penalty1;
  dolfin::MultiMeshCoefficientAssigner penalty2;
};

// Class typedefs
typedef Form_a BilinearForm;
typedef MultiMeshForm_a MultiMeshBilinearForm;
typedef Form_a JacobianForm;
typedef MultiMeshForm_a MultiMeshJacobianForm;
typedef Form_L LinearForm;
typedef MultiMeshForm_L MultiMeshLinearForm;
typedef Form_L ResidualForm;
typedef MultiMeshForm_L MultiMeshResidualForm;
typedef Form_a::TestSpace FunctionSpace;
typedef Form_a::MultiMeshTestSpace MultiMeshFunctionSpace;

}

#endif
