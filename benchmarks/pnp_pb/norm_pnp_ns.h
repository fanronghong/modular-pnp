// This code conforms with the UFC specification version 2016.2.0
// and was automatically generated by FFC version 2016.2.0.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   max_signature_length:           0
//   optimize:                       True
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   split:                          False

#ifndef __NORM_PNP_NS_H
#define __NORM_PNP_NS_H
#include <cmath>
#include <stdexcept>
#include <ufc.h>

class norm_pnp_ns_finite_element_0: public ufc::finite_element
{
public:

  norm_pnp_ns_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~norm_pnp_ns_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[3];
    for (unsigned int r = 0; r < 3; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new norm_pnp_ns_finite_element_0();
  }

};


class norm_pnp_ns_finite_element_1: public ufc::finite_element
{
public:

  norm_pnp_ns_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~norm_pnp_ns_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = coordinate_dofs[6];
    dof_coordinates[19] = coordinate_dofs[7];
    dof_coordinates[20] = coordinate_dofs[8];
    dof_coordinates[21] = coordinate_dofs[9];
    dof_coordinates[22] = coordinate_dofs[10];
    dof_coordinates[23] = coordinate_dofs[11];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[6];
    dof_coordinates[31] = coordinate_dofs[7];
    dof_coordinates[32] = coordinate_dofs[8];
    dof_coordinates[33] = coordinate_dofs[9];
    dof_coordinates[34] = coordinate_dofs[10];
    dof_coordinates[35] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new norm_pnp_ns_finite_element_0();
        break;
      }
    case 1:
      {
        return new norm_pnp_ns_finite_element_0();
        break;
      }
    case 2:
      {
        return new norm_pnp_ns_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new norm_pnp_ns_finite_element_1();
  }

};


class norm_pnp_ns_finite_element_2: public ufc::finite_element
{
public:

  norm_pnp_ns_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~norm_pnp_ns_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "MixedElement(FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Mixed";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[1] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, -0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.074535599249993};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[3];
      for (unsigned int r = 0; r < 3; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[2*num_derivatives + r] += transform[r][s]*derivatives[s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 5:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 6:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 7:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[1];
        break;
      }
    case 8:
      {
        y[0] = coordinate_dofs[0];
      y[1] = coordinate_dofs[1];
      y[2] = coordinate_dofs[2];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 9:
      {
        y[0] = coordinate_dofs[3];
      y[1] = coordinate_dofs[4];
      y[2] = coordinate_dofs[5];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 10:
      {
        y[0] = coordinate_dofs[6];
      y[1] = coordinate_dofs[7];
      y[2] = coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    case 11:
      {
        y[0] = coordinate_dofs[9];
      y[1] = coordinate_dofs[10];
      y[2] = coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[2];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    values[4] = vals[1];
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    values[5] = vals[1];
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    values[6] = vals[1];
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    values[7] = vals[1];
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[4] = coordinate_dofs[4];
    dof_coordinates[5] = coordinate_dofs[5];
    dof_coordinates[6] = coordinate_dofs[6];
    dof_coordinates[7] = coordinate_dofs[7];
    dof_coordinates[8] = coordinate_dofs[8];
    dof_coordinates[9] = coordinate_dofs[9];
    dof_coordinates[10] = coordinate_dofs[10];
    dof_coordinates[11] = coordinate_dofs[11];
    dof_coordinates[12] = coordinate_dofs[0];
    dof_coordinates[13] = coordinate_dofs[1];
    dof_coordinates[14] = coordinate_dofs[2];
    dof_coordinates[15] = coordinate_dofs[3];
    dof_coordinates[16] = coordinate_dofs[4];
    dof_coordinates[17] = coordinate_dofs[5];
    dof_coordinates[18] = coordinate_dofs[6];
    dof_coordinates[19] = coordinate_dofs[7];
    dof_coordinates[20] = coordinate_dofs[8];
    dof_coordinates[21] = coordinate_dofs[9];
    dof_coordinates[22] = coordinate_dofs[10];
    dof_coordinates[23] = coordinate_dofs[11];
    dof_coordinates[24] = coordinate_dofs[0];
    dof_coordinates[25] = coordinate_dofs[1];
    dof_coordinates[26] = coordinate_dofs[2];
    dof_coordinates[27] = coordinate_dofs[3];
    dof_coordinates[28] = coordinate_dofs[4];
    dof_coordinates[29] = coordinate_dofs[5];
    dof_coordinates[30] = coordinate_dofs[6];
    dof_coordinates[31] = coordinate_dofs[7];
    dof_coordinates[32] = coordinate_dofs[8];
    dof_coordinates[33] = coordinate_dofs[9];
    dof_coordinates[34] = coordinate_dofs[10];
    dof_coordinates[35] = coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new norm_pnp_ns_finite_element_0();
        break;
      }
    case 1:
      {
        return new norm_pnp_ns_finite_element_0();
        break;
      }
    case 2:
      {
        return new norm_pnp_ns_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new norm_pnp_ns_finite_element_2();
  }

};


class norm_pnp_ns_finite_element_3: public ufc::finite_element
{
public:

  norm_pnp_ns_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~norm_pnp_ns_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Real', tetrahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Real";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    // Compute constants
    
    // Compute subdeterminants
    
    // Get coordinates and map to the reference (FIAT) element
    
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    } // end loop over 'r'
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Element is constant, calling evaluate_basis.
    _evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
    {
    return ;
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Element is constant, calling evaluate_basis_derivatives.
    _evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
      y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
      y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    y[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    y[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = 0.25*coordinate_dofs[0] + 0.25*coordinate_dofs[3] + 0.25*coordinate_dofs[6] + 0.25*coordinate_dofs[9];
    dof_coordinates[1] = 0.25*coordinate_dofs[1] + 0.25*coordinate_dofs[4] + 0.25*coordinate_dofs[7] + 0.25*coordinate_dofs[10];
    dof_coordinates[2] = 0.25*coordinate_dofs[2] + 0.25*coordinate_dofs[5] + 0.25*coordinate_dofs[8] + 0.25*coordinate_dofs[11];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new norm_pnp_ns_finite_element_3();
  }

};


class norm_pnp_ns_finite_element_4: public ufc::finite_element
{
public:

  norm_pnp_ns_finite_element_4() : ufc::finite_element()
  {
    // Do nothing
  }

  ~norm_pnp_ns_finite_element_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Raviart-Thomas', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return 3;
        break;
      }
    }
    
    return 0;
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Raviart-Thomas";
  }

  static void _evaluate_basis(std::size_t i,
                              double * values,
                              const double * x,
                              const double * coordinate_dofs,
                              int cell_orientation)
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {-0.288675134594813, 0.0, -0.210818510677892, 0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.866025403784439, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.0745355992499929};
      
      static const double coefficients2[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.866025403784439, 0.0, -0.210818510677892, 0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.0745355992499929};
      
      static const double coefficients2[4] = \
      {-0.866025403784439, 0.0, 0.0, 0.223606797749979};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 4; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
        values[2] += coefficients2[r]*basisvalues[r];
      } // end loop over 'r'
      
      // Using contravariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      const double tmp_ref2 = values[2];
      values[0] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
      values[1] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
      values[2] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
        break;
      }
    }
    
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation) const final override
  {
    _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_all(double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation)
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3; s++)
      {
        values[r*3 + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation) const final override
  {
    _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double * values,
                                          const double * x,
                                          const double * coordinate_dofs,
                                          int cell_orientation)
  {
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Reset values. Assuming that values is always an array.
    for (unsigned int r = 0; r < 3*num_derivatives; r++)
    {
      values[r] = 0.0;
    } // end loop over 'r'
    
    // Call evaluate_basis if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
    return ;
    }
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Compute constants
    const double C0 = coordinate_dofs[9]  + coordinate_dofs[6] + coordinate_dofs[3]  - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4]  - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5]  - coordinate_dofs[2];
    
    // Compute subdeterminants
    const double d_00 = J[4]*J[8] - J[5]*J[7];
    const double d_01 = J[5]*J[6] - J[3]*J[8];
    const double d_02 = J[3]*J[7] - J[4]*J[6];
    const double d_10 = J[2]*J[7] - J[1]*J[8];
    const double d_11 = J[0]*J[8] - J[2]*J[6];
    const double d_12 = J[1]*J[6] - J[0]*J[7];
    const double d_20 = J[1]*J[5] - J[2]*J[4];
    const double d_21 = J[2]*J[3] - J[0]*J[5];
    const double d_22 = J[0]*J[4] - J[1]*J[3];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (d_00*(2.0*x[0] - C0) + d_10*(2.0*x[1] - C1) + d_20*(2.0*x[2] - C2)) / detJ;
    double Y = (d_01*(2.0*x[0] - C0) + d_11*(2.0*x[1] - C1) + d_21*(2.0*x[2] - C2)) / detJ;
    double Z = (d_02*(2.0*x[0] - C0) + d_12*(2.0*x[1] - C1) + d_22*(2.0*x[2] - C2)) / detJ;
    
    
    // Declare two dimensional array that holds combinations of derivatives and initialise
    unsigned int combinations[3][1];
    for (unsigned int row = 0; row < 3; row++)
    {
      for (unsigned int col = 0; col < 1; col++)
        combinations[row][col] = 0;
    }
    
    // Generate combinations of derivatives
    for (unsigned int row = 1; row < num_derivatives; row++)
    {
      for (unsigned int num = 0; num < row; num++)
      {
        for (unsigned int col = n-1; col+1 > 0; col--)
        {
          if (combinations[row][col] + 1 > 2)
            combinations[row][col] = 0;
          else
          {
            combinations[row][col] += 1;
            break;
          }
        }
      }
    }
    
    // Compute inverse of Jacobian
    const double Jinv[3][3] = {{K[0], K[1], K[2]}, {K[3], K[4], K[5]}, {K[6], K[7], K[8]}};
    
    // Declare transformation matrix
    // Declare pointer to two dimensional array and initialise
    double transform[3][3];
    for (unsigned int j = 0; j < num_derivatives; j++)
    {
      for (unsigned int k = 0; k < num_derivatives; k++)
        transform[j][k] = 1;
    }
    
    // Construct transformation matrix
    for (unsigned int row = 0; row < num_derivatives; row++)
    {
      for (unsigned int col = 0; col < num_derivatives; col++)
      {
        for (unsigned int k = 0; k < n; k++)
          transform[row][col] *= Jinv[combinations[col][k]][combinations[row][k]];
      }
    }
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {-0.288675134594813, 0.0, -0.210818510677892, 0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.866025403784439, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.0745355992499929};
      
      static const double coefficients2[4] = \
      {0.288675134594813, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {-0.288675134594813, -0.182574185835055, 0.105409255338946, 0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.866025403784439, 0.0, -0.210818510677892, 0.074535599249993};
      
      static const double coefficients2[4] = \
      {-0.288675134594813, 0.0, 0.0, -0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[4] = {0.0, 0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = 0.5*(2.0 + Y + Z + 2.0*X);
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = 0.5*(2.0 + 3.0*Y + Z)*basisvalues[0];
      basisvalues[3] = (2.0*Z + 1.0)*basisvalues[0];
      basisvalues[0] *= std::sqrt(0.75);
      basisvalues[3] *= std::sqrt(1.25);
      basisvalues[2] *= std::sqrt(2.5);
      basisvalues[1] *= std::sqrt(7.5);
      
      // Table(s) of coefficients
      static const double coefficients0[4] = \
      {0.288675134594813, 0.182574185835055, -0.105409255338946, -0.074535599249993};
      
      static const double coefficients1[4] = \
      {0.288675134594813, 0.0, 0.210818510677892, -0.0745355992499929};
      
      static const double coefficients2[4] = \
      {-0.866025403784439, 0.0, 0.0, 0.223606797749979};
      
      // Tables of derivatives of the polynomial base (transpose).
      static const double dmats0[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {6.32455532033676, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats1[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {5.47722557505166, 0.0, 0.0, 0.0},
      {0.0, 0.0, 0.0, 0.0}};
      
      static const double dmats2[4][4] = \
      {{0.0, 0.0, 0.0, 0.0},
      {3.16227766016838, 0.0, 0.0, 0.0},
      {1.82574185835055, 0.0, 0.0, 0.0},
      {5.16397779494322, 0.0, 0.0, 0.0}};
      
      // Compute reference derivatives.
      // Declare array of derivatives on FIAT element.
      double derivatives[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives[r] = 0.0;
      } // end loop over 'r'
      
      // Declare array of reference derivatives on physical element.
      double derivatives_p[9];
      for (unsigned int r = 0; r < 9; r++)
      {
        derivatives_p[r] = 0.0;
      } // end loop over 'r'
      
      // Declare derivative matrix (of polynomial basis).
      double dmats[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Declare (auxiliary) derivative matrix (of polynomial basis).
      double dmats_old[4][4] = \
      {{1.0, 0.0, 0.0, 0.0},
      {0.0, 1.0, 0.0, 0.0},
      {0.0, 0.0, 1.0, 0.0},
      {0.0, 0.0, 0.0, 1.0}};
      
      // Loop possible derivatives.
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        // Resetting dmats values to compute next derivative.
        for (unsigned int t = 0; t < 4; t++)
        {
          for (unsigned int u = 0; u < 4; u++)
          {
            dmats[t][u] = 0.0;
            if (t == u)
            {
            dmats[t][u] = 1.0;
            }
            
          } // end loop over 'u'
        } // end loop over 't'
        
        // Looping derivative order to generate dmats.
        for (unsigned int s = 0; s < n; s++)
        {
          // Updating dmats_old with new values and resetting dmats.
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              dmats_old[t][u] = dmats[t][u];
              dmats[t][u] = 0.0;
            } // end loop over 'u'
          } // end loop over 't'
          
          // Update dmats using an inner product.
          if (combinations[r][s] == 0)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats0[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 1)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats1[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
          if (combinations[r][s] == 2)
          {
          for (unsigned int t = 0; t < 4; t++)
          {
            for (unsigned int u = 0; u < 4; u++)
            {
              for (unsigned int tu = 0; tu < 4; tu++)
              {
                dmats[t][u] += dmats2[t][tu]*dmats_old[tu][u];
              } // end loop over 'tu'
            } // end loop over 'u'
          } // end loop over 't'
          }
          
        } // end loop over 's'
        for (unsigned int s = 0; s < 4; s++)
        {
          for (unsigned int t = 0; t < 4; t++)
          {
            derivatives[r] += coefficients0[s]*dmats[s][t]*basisvalues[t];
            derivatives[num_derivatives + r] += coefficients1[s]*dmats[s][t]*basisvalues[t];
            derivatives[2*num_derivatives + r] += coefficients2[s]*dmats[s][t]*basisvalues[t];
          } // end loop over 't'
        } // end loop over 's'
        
        // Using contravariant Piola transform to map values back to the physical element.
        const double tmp_ref0 = derivatives[r];
        const double tmp_ref1 = derivatives[num_derivatives + r];
        const double tmp_ref2 = derivatives[2*num_derivatives + r];
        derivatives_p[r] = (1.0/detJ)*(J[0]*tmp_ref0 + J[1]*tmp_ref1 + J[2]*tmp_ref2);
        derivatives_p[num_derivatives + r] = (1.0/detJ)*(J[3]*tmp_ref0 + J[4]*tmp_ref1 + J[5]*tmp_ref2);
        derivatives_p[2*num_derivatives + r] = (1.0/detJ)*(J[6]*tmp_ref0 + J[7]*tmp_ref1 + J[8]*tmp_ref2);
      } // end loop over 'r'
      
      // Transform derivatives back to physical element
      for (unsigned int r = 0; r < num_derivatives; r++)
      {
        for (unsigned int s = 0; s < num_derivatives; s++)
        {
          values[r] += transform[r][s]*derivatives_p[s];
          values[num_derivatives + r] += transform[r][s]*derivatives_p[num_derivatives + s];
          values[2*num_derivatives + r] += transform[r][s]*derivatives_p[2*num_derivatives + s];
        } // end loop over 's'
      } // end loop over 'r'
        break;
      }
    }
    
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation) const final override
  {
    _evaluate_basis_derivatives(i, n, values, x, coordinate_dofs, cell_orientation);
  }

  static void _evaluate_basis_derivatives_all(std::size_t n,
                                              double * values,
                                              const double * x,
                                              const double * coordinate_dofs,
                                              int cell_orientation)
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 3;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 4; r++)
    {
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[9];
    for (unsigned int r = 0; r < 9; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 4; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
      for (unsigned int s = 0; s < 3*num_derivatives; s++)
      {
        values[r*3*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation) const final override
  {
    _evaluate_basis_derivatives_all(n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
      y[1] = 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
      y[2] = 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2])) + (-1.0)*(detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2])) + (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
        break;
      }
    case 1:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
      y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2]));
        break;
      }
    case 2:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[9];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[10];
      y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[11];
      f.evaluate(vals, y, c);
      return (detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2]));
        break;
      }
    case 3:
      {
        y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6];
      y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7];
      y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8];
      f.evaluate(vals, y, c);
      return (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
        break;
      }
    }
    
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    
    // Declare variable for physical coordinates
    double y[3];
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    y[0] = 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
    y[1] = 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
    y[2] = 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2])) + (-1.0)*(detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2])) + (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
    y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[1] = (-1.0)*(detJ*(K[0]*vals[0] + K[1]*vals[1] + K[2]*vals[2]));
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[9];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[10];
    y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[2] = (detJ*(K[3]*vals[0] + K[4]*vals[1] + K[5]*vals[2]));
    y[0] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6];
    y[1] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7];
    y[2] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[3] = (-1.0)*(detJ*(K[6]*vals[0] + K[7]*vals[1] + K[8]*vals[2]));
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::cell& c) const final override
  {
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    
    
    // Evaluate function and change variables
    vertex_values[0] = dof_values[1]*((1.0/detJ)*(J[0]*(-1.0))) + dof_values[2]*(1.0/detJ)*J[1] + dof_values[3]*((1.0/detJ)*(J[2]*(-1.0)));
    vertex_values[3] = dof_values[0]*((1.0/detJ)*(J[0]*(-1.0))) + dof_values[2]*((1.0/detJ)*(J[0]*(-1.0) + J[1])) + dof_values[3]*((1.0/detJ)*(J[0] + J[2]*(-1.0)));
    vertex_values[6] = dof_values[0]*((1.0/detJ)*(J[1]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[0]*(-1.0) + J[1])) + dof_values[3]*((1.0/detJ)*(J[1] + J[2]*(-1.0)));
    vertex_values[9] = dof_values[0]*((1.0/detJ)*(J[2]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[0]*(-1.0) + J[2])) + dof_values[2]*((1.0/detJ)*(J[1] + J[2]*(-1.0)));
    vertex_values[1] = dof_values[1]*((1.0/detJ)*(J[3]*(-1.0))) + dof_values[2]*(1.0/detJ)*J[4] + dof_values[3]*((1.0/detJ)*(J[5]*(-1.0)));
    vertex_values[4] = dof_values[0]*((1.0/detJ)*(J[3]*(-1.0))) + dof_values[2]*((1.0/detJ)*(J[3]*(-1.0) + J[4])) + dof_values[3]*((1.0/detJ)*(J[3] + J[5]*(-1.0)));
    vertex_values[7] = dof_values[0]*((1.0/detJ)*(J[4]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[3]*(-1.0) + J[4])) + dof_values[3]*((1.0/detJ)*(J[4] + J[5]*(-1.0)));
    vertex_values[10] = dof_values[0]*((1.0/detJ)*(J[5]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[3]*(-1.0) + J[5])) + dof_values[2]*((1.0/detJ)*(J[4] + J[5]*(-1.0)));
    vertex_values[2] = dof_values[1]*((1.0/detJ)*(J[6]*(-1.0))) + dof_values[2]*(1.0/detJ)*J[7] + dof_values[3]*((1.0/detJ)*(J[8]*(-1.0)));
    vertex_values[5] = dof_values[0]*((1.0/detJ)*(J[6]*(-1.0))) + dof_values[2]*((1.0/detJ)*(J[6]*(-1.0) + J[7])) + dof_values[3]*((1.0/detJ)*(J[6] + J[8]*(-1.0)));
    vertex_values[8] = dof_values[0]*((1.0/detJ)*(J[7]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[6]*(-1.0) + J[7])) + dof_values[3]*((1.0/detJ)*(J[7] + J[8]*(-1.0)));
    vertex_values[11] = dof_values[0]*((1.0/detJ)*(J[8]*(-1.0))) + dof_values[1]*((1.0/detJ)*(J[6]*(-1.0) + J[8])) + dof_values[2]*((1.0/detJ)*(J[7] + J[8]*(-1.0)));
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs) const final override
  {
    dof_coordinates[0] = 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
    dof_coordinates[1] = 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
    dof_coordinates[2] = 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
    dof_coordinates[3] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[6] + 0.333333333333333*coordinate_dofs[9];
    dof_coordinates[4] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[7] + 0.333333333333333*coordinate_dofs[10];
    dof_coordinates[5] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[8] + 0.333333333333333*coordinate_dofs[11];
    dof_coordinates[6] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[9];
    dof_coordinates[7] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[10];
    dof_coordinates[8] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[11];
    dof_coordinates[9] = 0.333333333333333*coordinate_dofs[0] + 0.333333333333333*coordinate_dofs[3] + 0.333333333333333*coordinate_dofs[6];
    dof_coordinates[10] = 0.333333333333333*coordinate_dofs[1] + 0.333333333333333*coordinate_dofs[4] + 0.333333333333333*coordinate_dofs[7];
    dof_coordinates[11] = 0.333333333333333*coordinate_dofs[2] + 0.333333333333333*coordinate_dofs[5] + 0.333333333333333*coordinate_dofs[8];
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return 0;
  }

  ufc::finite_element * create() const final override
  {
    return new norm_pnp_ns_finite_element_4();
  }

};


class norm_pnp_ns_dofmap_0: public ufc::dofmap
{
public:

  norm_pnp_ns_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~norm_pnp_ns_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 3;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new norm_pnp_ns_dofmap_0();
  }

};


class norm_pnp_ns_dofmap_1: public ufc::dofmap
{
public:

  norm_pnp_ns_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~norm_pnp_ns_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3*num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 6;
        break;
      }
    case 2:
      {
        return 9;
        break;
      }
    case 3:
      {
        return 12;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 10;
        dofs[5] = 11;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        dofs[4] = 9;
        dofs[5] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 9;
        dofs[5] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 4;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 11;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        dofs[4] = 8;
        dofs[5] = 9;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new norm_pnp_ns_dofmap_0();
        break;
      }
    case 1:
      {
        return new norm_pnp_ns_dofmap_0();
        break;
      }
    case 2:
      {
        return new norm_pnp_ns_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new norm_pnp_ns_dofmap_1();
  }

};


class norm_pnp_ns_dofmap_2: public ufc::dofmap
{
public:

  norm_pnp_ns_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~norm_pnp_ns_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for MixedElement(FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1), FiniteElement('Lagrange', tetrahedron, 1))";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3*num_global_entities[0];
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 3;
        break;
      }
    case 1:
      {
        return 6;
        break;
      }
    case 2:
      {
        return 9;
        break;
      }
    case 3:
      {
        return 12;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    unsigned int offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 5;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 9;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 6;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 10;
      dofs[8] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 7;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 11;
        break;
      }
    case 3:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
      dofs[6] = 8;
      dofs[7] = 9;
      dofs[8] = 10;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 4;
        dofs[2] = 8;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 5;
        dofs[2] = 9;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 6;
        dofs[2] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
        dofs[1] = 7;
        dofs[2] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 2;
        dofs[1] = 3;
        dofs[2] = 6;
        dofs[3] = 7;
        dofs[4] = 10;
        dofs[5] = 11;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 3;
        dofs[2] = 5;
        dofs[3] = 7;
        dofs[4] = 9;
        dofs[5] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 5;
        dofs[3] = 6;
        dofs[4] = 9;
        dofs[5] = 10;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 3;
        dofs[2] = 4;
        dofs[3] = 7;
        dofs[4] = 8;
        dofs[5] = 11;
          break;
        }
      case 4:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 4;
        dofs[3] = 6;
        dofs[4] = 8;
        dofs[5] = 10;
          break;
        }
      case 5:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 4;
        dofs[3] = 5;
        dofs[4] = 8;
        dofs[5] = 9;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
          break;
        }
      case 1:
        {
          dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
          break;
        }
      case 2:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
          break;
        }
      case 3:
        {
          dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
      dofs[4] = 4;
      dofs[5] = 5;
      dofs[6] = 6;
      dofs[7] = 7;
      dofs[8] = 8;
      dofs[9] = 9;
      dofs[10] = 10;
      dofs[11] = 11;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new norm_pnp_ns_dofmap_0();
        break;
      }
    case 1:
      {
        return new norm_pnp_ns_dofmap_0();
        break;
      }
    case 2:
      {
        return new norm_pnp_ns_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new norm_pnp_ns_dofmap_2();
  }

};


class norm_pnp_ns_dofmap_3: public ufc::dofmap
{
public:

  norm_pnp_ns_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~norm_pnp_ns_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Real', tetrahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 1;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    case 3:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = 0;
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      case 4:
        {
          
          break;
        }
      case 5:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new norm_pnp_ns_dofmap_3();
  }

};


class norm_pnp_ns_dofmap_4: public ufc::dofmap
{
public:

  norm_pnp_ns_dofmap_4() : ufc::dofmap()
  {
    // Do nothing
  }

  ~norm_pnp_ns_dofmap_4() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Raviart-Thomas', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    case 3:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[2];
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 1;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    case 3:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    case 3:
      {
        return 4;
        break;
      }
    }
    
    return 0;
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[2][0];
    dofs[1] = entity_indices[2][1];
    dofs[2] = entity_indices[2][2];
    dofs[3] = entity_indices[2][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 0;
        break;
      }
    case 1:
      {
        dofs[0] = 1;
        break;
      }
    case 2:
      {
        dofs[0] = 2;
        break;
      }
    case 3:
      {
        dofs[0] = 3;
        break;
      }
    }
    
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        
        break;
      }
    }
    
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    if (d > 3)
    {
    throw std::runtime_error("d is larger than dimension (3)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 5)
      {
      throw std::runtime_error("i is larger than number of entities (5)");
      }
      
      switch (i)
      {
      case 0:
        {
          
          break;
        }
      case 1:
        {
          
          break;
        }
      case 2:
        {
          
          break;
        }
      case 3:
        {
          
          break;
        }
      case 4:
        {
          
          break;
        }
      case 5:
        {
          
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 3)
      {
      throw std::runtime_error("i is larger than number of entities (3)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      case 3:
        {
          dofs[0] = 3;
          break;
        }
      }
      
        break;
      }
    case 3:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 2;
      dofs[3] = 3;
        break;
      }
    }
    
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return 0;
  }

  ufc::dofmap * create() const final override
  {
    return new norm_pnp_ns_dofmap_4();
  }

};


class norm_pnp_ns_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  norm_pnp_ns_cell_integral_0_otherwise() : ufc::cell_integral()
  {
    
  }

  ~norm_pnp_ns_cell_integral_0_otherwise() override
  {
    
  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
    static const std::vector<bool> enabled({true, true, true, true, true, true, true, true, true});
    return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'quadrature' representation
    // with the following integrals metadata:
    // 
    //   num_cells:         None
    //   quadrature_degree: 8
    //   quadrature_rule:   'default'
    //   representation:    'quadrature'
    // 
    // and the following integral 0 metadata:
    // 
    //   estimated_polynomial_degree: 8
    //   quadrature_degree:           8
    //   quadrature_rule:             'default'
    //   representation:              'quadrature'
    
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    
    // Compute Jacobian inverse and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute cell volume
    
    
    // Compute circumradius
    
    
    // Array of quadrature weights.
    static const double W125[125] = {0.00093743982176699, 0.00144688123847005, 0.00102268701578054, 0.000367520038007326, 4.71653365059367e-05, 0.00161927658526932, 0.00249925473264393, 0.0017665274082244, 0.000634831781565256, 8.14705363128846e-05, 0.00141792453255092, 0.00218848010941899, 0.00154686516950306, 0.000555892406098535, 7.13399262170559e-05, 0.000715891501943866, 0.0011049349077046, 0.000780991938624514, 0.000280662785913663, 3.60185932012984e-05, 0.000152536470498618, 0.000235430746830113, 0.00016640755405279, 5.98013953892923e-05, 7.67455552179803e-06, 0.00189377231486029, 0.00292292216383616, 0.00206598473020028, 0.000742446882427909, 9.52812185081399e-05, 0.00327118722298824, 0.00504887813656487, 0.003568656484884, 0.00128245763045955, 0.000164582987156812, 0.00286442517370847, 0.00442106570107948, 0.00312490504969684, 0.00112298797668545, 0.00014411759995365, 0.00144621070637858, 0.00223213809499741, 0.00157772357985428, 0.000566981902660168, 7.27630862707138e-05, 0.00030814708115588, 0.000475606241660782, 0.000336168798819303, 0.000120807996789372, 1.55037800172007e-05, 0.00225090157446144, 0.00347412941301363, 0.00245558995953754, 0.000882458172768385, 0.000113249435042247, 0.00388807060532278, 0.00600100004508526, 0.00424163688396195, 0.00152430462570916, 0.000195620192572181, 0.00340460100870312, 0.00525479418474413, 0.00371420241029557, 0.00133476204345559, 0.000171295424533232, 0.00171893840164766, 0.00265307667295564, 0.00187525208922538, 0.000673903851785406, 8.64848134932768e-05, 0.000366257730507924, 0.000565296487744314, 0.000399563808494583, 0.000143590075769373, 1.84274965775891e-05, 0.00189377231486029, 0.00292292216383616, 0.00206598473020028, 0.000742446882427909, 9.52812185081399e-05, 0.00327118722298824, 0.00504887813656487, 0.003568656484884, 0.00128245763045955, 0.000164582987156812, 0.00286442517370847, 0.00442106570107948, 0.00312490504969684, 0.00112298797668545, 0.00014411759995365, 0.00144621070637858, 0.00223213809499741, 0.00157772357985428, 0.000566981902660168, 7.27630862707138e-05, 0.00030814708115588, 0.000475606241660782, 0.000336168798819303, 0.000120807996789372, 1.55037800172007e-05, 0.00093743982176699, 0.00144688123847005, 0.00102268701578054, 0.000367520038007326, 4.71653365059367e-05, 0.00161927658526932, 0.00249925473264393, 0.0017665274082244, 0.000634831781565256, 8.14705363128846e-05, 0.00141792453255092, 0.00218848010941899, 0.00154686516950306, 0.000555892406098535, 7.13399262170559e-05, 0.000715891501943866, 0.0011049349077046, 0.000780991938624514, 0.000280662785913663, 3.60185932012984e-05, 0.000152536470498618, 0.000235430746830113, 0.00016640755405279, 5.98013953892924e-05, 7.67455552179803e-06};
    // Quadrature points on the UFC reference element: (0.0434850684329929, 0.0384332743963333, 0.034578939918215), (0.0372285899889251, 0.0329036302803046, 0.173480320771696), (0.0274810994988124, 0.0242885357160768, 0.389886387065519), (0.0164705687743685, 0.0145571321830714, 0.634333472630887), (0.0067089045501621, 0.00592951049099777, 0.851054212947016), (0.0363203493206216, 0.191166323793956, 0.034578939918215), (0.0310947054204484, 0.163661986623795, 0.173480320771696), (0.0229532381913956, 0.120810681788372, 0.389886387065519), (0.0137568327003139, 0.0724068788863314, 0.634333472630887), (0.00560352704046152, 0.0294932643722359, 0.851054212947016), (0.025452983470971, 0.42283010559815, 0.034578939918215), (0.0217908978824722, 0.361994799675747, 0.173480320771696), (0.0160854287808059, 0.267214393854326, 0.389886387065519), (0.00964066816216436, 0.160152727938308, 0.634333472630887), (0.00392690279162666, 0.0652345028216781, 0.851054212947016), (0.0137918067694829, 0.671415856030076, 0.034578939918215), (0.0118074902013492, 0.574814908126993, 0.173480320771696), (0.00871595763232119, 0.42431222048264, 0.389886387065519), (0.00522383682733774, 0.254308005746508, 0.634333472630887), (0.00212780888992548, 0.103586473561889, 0.851054212947016), (0.00446245462992895, 0.870293213094632, 0.034578939918215), (0.00382041237943087, 0.745078491721125, 0.173480320771696), (0.00282012111543484, 0.54999601573695, 0.389886387065519), (0.00169021617151183, 0.329635544721039, 0.634333472630887), (0.000688470393412244, 0.134269401146344, 0.851054212947016), (0.213916656125506, 0.0384332743963333, 0.034578939918215), (0.183139081291086, 0.0329036302803046, 0.173480320771696), (0.135188126023001, 0.0242885357160768, 0.389886387065519), (0.0810238806942951, 0.0145571321830714, 0.634333472630887), (0.0330032003938849, 0.00592951049099777, 0.851054212947016), (0.178671161296432, 0.191166323793956, 0.034578939918215), (0.152964584084757, 0.163661986623795, 0.173480320771696), (0.112914159689587, 0.120810681788372, 0.389886387065519), (0.0676741639412116, 0.0724068788863314, 0.634333472630887), (0.027565502601231, 0.0294932643722359, 0.851054212947016), (0.125211188776624, 0.42283010559815, 0.034578939918215), (0.107196244066483, 0.361994799675747, 0.173480320771696), (0.0791292565731431, 0.267214393854326, 0.389886387065519), (0.0474254628170509, 0.160152727938308, 0.634333472630887), (0.0193176633816068, 0.0652345028216781, 0.851054212947016), (0.0678462123292524, 0.671415856030076, 0.034578939918215), (0.0580847383280397, 0.574814908126993, 0.173480320771696), (0.0428765224208113, 0.42431222048264, 0.389886387065519), (0.0256976876550462, 0.254308005746508, 0.634333472630887), (0.0104673576243388, 0.103586473561889, 0.851054212947016), (0.0219522104240708, 0.870293213094632, 0.034578939918215), (0.0187938037280005, 0.745078491721125, 0.173480320771696), (0.0138730580546826, 0.54999601573695, 0.389886387065519), (0.00831470213956798, 0.329635544721039, 0.634333472630887), (0.00338680125632329, 0.134269401146344, 0.851054212947016), (0.463493892842726, 0.0384332743963333, 0.034578939918215), (0.396808024474, 0.0329036302803046, 0.173480320771696), (0.292912538609202, 0.0242885357160768, 0.389886387065519), (0.175554697593021, 0.0145571321830714, 0.634333472630887), (0.0715081382809929, 0.00592951049099777, 0.851054212947016), (0.387127368143914, 0.191166323793956, 0.034578939918215), (0.331428846302255, 0.163661986623795, 0.173480320771696), (0.244651465573054, 0.120810681788372, 0.389886387065519), (0.146629824241391, 0.0724068788863314, 0.634333472630887), (0.0597262613403738, 0.0294932643722359, 0.851054212947016), (0.271295477241817, 0.42283010559815, 0.034578939918215), (0.232262439776279, 0.361994799675747, 0.173480320771696), (0.171449609540077, 0.267214393854326, 0.389886387065519), (0.102756899715403, 0.160152727938308, 0.634333472630887), (0.0418556421156527, 0.0652345028216781, 0.851054212947016), (0.147002602025855, 0.671415856030076, 0.034578939918215), (0.125852385550656, 0.574814908126993, 0.173480320771696), (0.0929006962259202, 0.42431222048264, 0.389886387065519), (0.0556792608113027, 0.254308005746508, 0.634333472630887), (0.0226796567455474, 0.103586473561889, 0.851054212947016), (0.0475639234935763, 0.870293213094632, 0.034578939918215), (0.0407205937535897, 0.745078491721125, 0.173480320771696), (0.0300587985987655, 0.54999601573695, 0.389886387065519), (0.0180154913240372, 0.329635544721039, 0.634333472630887), (0.00733819295331972, 0.134269401146344, 0.851054212947016), (0.713071129559946, 0.0384332743963333, 0.034578939918215), (0.610476967656914, 0.0329036302803046, 0.173480320771696), (0.450636951195403, 0.0242885357160768, 0.389886387065519), (0.270085514491747, 0.0145571321830714, 0.634333472630887), (0.110013076168101, 0.00592951049099777, 0.851054212947016), (0.595583574991397, 0.191166323793956, 0.034578939918215), (0.509893108519752, 0.163661986623795, 0.173480320771696), (0.376388771456521, 0.120810681788372, 0.389886387065519), (0.22558548454157, 0.0724068788863314, 0.634333472630887), (0.0918870200795167, 0.0294932643722359, 0.851054212947016), (0.417379765707011, 0.42283010559815, 0.034578939918215), (0.357328635486074, 0.361994799675747, 0.173480320771696), (0.263769962507011, 0.267214393854326, 0.389886387065519), (0.158088336613754, 0.160152727938308, 0.634333472630887), (0.0643936208496987, 0.0652345028216781, 0.851054212947016), (0.226158991722457, 0.671415856030076, 0.034578939918215), (0.193620032773272, 0.574814908126993, 0.173480320771696), (0.142924870031029, 0.42431222048264, 0.389886387065519), (0.0856608339675592, 0.254308005746508, 0.634333472630887), (0.0348919558667561, 0.103586473561889, 0.851054212947016), (0.0731756365630818, 0.870293213094632, 0.034578939918215), (0.062647383779179, 0.745078491721125, 0.173480320771696), (0.0462445391428484, 0.54999601573695, 0.389886387065519), (0.0277162805085065, 0.329635544721039, 0.634333472630887), (0.0112895846503162, 0.134269401146344, 0.851054212947016), (0.883502717252459, 0.0384332743963333, 0.034578939918215), (0.756387458959075, 0.0329036302803046, 0.173480320771696), (0.558343977719591, 0.0242885357160768, 0.389886387065519), (0.334638826411673, 0.0145571321830714, 0.634333472630887), (0.136307372011824, 0.00592951049099777, 0.851054212947016), (0.737934386967207, 0.191166323793956, 0.034578939918215), (0.631762987184061, 0.163661986623795, 0.173480320771696), (0.466349692954713, 0.120810681788372, 0.389886387065519), (0.279502815782468, 0.0724068788863314, 0.634333472630887), (0.113848995640286, 0.0294932643722359, 0.851054212947016), (0.517137971012664, 0.42283010559815, 0.034578939918215), (0.442733981670085, 0.361994799675747, 0.173480320771696), (0.326813790299348, 0.267214393854326, 0.389886387065519), (0.195873131268641, 0.160152727938308, 0.634333472630887), (0.0797843814396788, 0.0652345028216781, 0.851054212947016), (0.280213397282226, 0.671415856030076, 0.034578939918215), (0.239897280899962, 0.574814908126993, 0.173480320771696), (0.177085434819519, 0.42431222048264, 0.389886387065519), (0.106134684795268, 0.254308005746508, 0.634333472630887), (0.0432315046011695, 0.103586473561889, 0.851054212947016), (0.0906653923572237, 0.870293213094632, 0.034578939918215), (0.0776207751277486, 0.745078491721125, 0.173480320771696), (0.0572974760820962, 0.54999601573695, 0.389886387065519), (0.0343407664765626, 0.329635544721039, 0.634333472630887), (0.0139879155132272, 0.134269401146344, 0.851054212947016)
    
    // Values of basis functions at quadrature points.
    static const double FE0[125][4] = \
    {{0.883502717252459, 0.0434850684329927, 0.0384332743963333, 0.034578939918215},
    {0.756387458959075, 0.037228589988925, 0.0329036302803046, 0.173480320771696},
    {0.558343977719591, 0.0274810994988122, 0.0242885357160769, 0.389886387065519},
    {0.334638826411673, 0.0164705687743684, 0.0145571321830714, 0.634333472630887},
    {0.136307372011824, 0.00670890455016213, 0.00592951049099774, 0.851054212947016},
    {0.737934386967207, 0.0363203493206215, 0.191166323793956, 0.034578939918215},
    {0.631762987184061, 0.0310947054204485, 0.163661986623795, 0.173480320771696},
    {0.466349692954713, 0.0229532381913955, 0.120810681788372, 0.389886387065519},
    {0.279502815782468, 0.0137568327003139, 0.0724068788863314, 0.634333472630887},
    {0.113848995640286, 0.00560352704046155, 0.0294932643722359, 0.851054212947016},
    {0.517137971012664, 0.0254529834709709, 0.42283010559815, 0.034578939918215},
    {0.442733981670085, 0.0217908978824722, 0.361994799675747, 0.173480320771696},
    {0.326813790299348, 0.0160854287808059, 0.267214393854326, 0.389886387065519},
    {0.195873131268641, 0.00964066816216433, 0.160152727938308, 0.634333472630887},
    {0.0797843814396789, 0.00392690279162669, 0.0652345028216781, 0.851054212947016},
    {0.280213397282226, 0.0137918067694829, 0.671415856030076, 0.034578939918215},
    {0.239897280899962, 0.0118074902013492, 0.574814908126993, 0.173480320771696},
    {0.177085434819519, 0.00871595763232122, 0.42431222048264, 0.389886387065519},
    {0.106134684795268, 0.00522383682733774, 0.254308005746508, 0.634333472630887},
    {0.0432315046011695, 0.00212780888992553, 0.103586473561889, 0.851054212947016},
    {0.0906653923572237, 0.00446245462992891, 0.870293213094632, 0.034578939918215},
    {0.0776207751277486, 0.00382041237943086, 0.745078491721125, 0.173480320771696},
    {0.0572974760820963, 0.00282012111543484, 0.54999601573695, 0.389886387065519},
    {0.0343407664765628, 0.00169021617151183, 0.329635544721039, 0.634333472630887},
    {0.0139879155132273, 0.000688470393412272, 0.134269401146344, 0.851054212947016},
    {0.713071129559946, 0.213916656125506, 0.0384332743963333, 0.034578939918215},
    {0.610476967656914, 0.183139081291086, 0.0329036302803046, 0.173480320771696},
    {0.450636951195403, 0.135188126023001, 0.0242885357160769, 0.389886387065519},
    {0.270085514491747, 0.0810238806942951, 0.0145571321830714, 0.634333472630887},
    {0.110013076168101, 0.0330032003938849, 0.00592951049099774, 0.851054212947016},
    {0.595583574991397, 0.178671161296432, 0.191166323793956, 0.034578939918215},
    {0.509893108519752, 0.152964584084757, 0.163661986623795, 0.173480320771696},
    {0.376388771456521, 0.112914159689587, 0.120810681788372, 0.389886387065519},
    {0.22558548454157, 0.0676741639412116, 0.0724068788863314, 0.634333472630887},
    {0.0918870200795167, 0.0275655026012311, 0.0294932643722359, 0.851054212947016},
    {0.417379765707011, 0.125211188776624, 0.42283010559815, 0.034578939918215},
    {0.357328635486074, 0.107196244066483, 0.361994799675747, 0.173480320771696},
    {0.263769962507011, 0.0791292565731431, 0.267214393854326, 0.389886387065519},
    {0.158088336613754, 0.0474254628170509, 0.160152727938308, 0.634333472630887},
    {0.0643936208496987, 0.0193176633816069, 0.0652345028216781, 0.851054212947016},
    {0.226158991722457, 0.0678462123292524, 0.671415856030076, 0.034578939918215},
    {0.193620032773272, 0.0580847383280397, 0.574814908126993, 0.173480320771696},
    {0.142924870031029, 0.0428765224208113, 0.42431222048264, 0.389886387065519},
    {0.0856608339675594, 0.0256976876550462, 0.254308005746508, 0.634333472630887},
    {0.0348919558667562, 0.0104673576243389, 0.103586473561889, 0.851054212947016},
    {0.0731756365630819, 0.0219522104240708, 0.870293213094632, 0.034578939918215},
    {0.062647383779179, 0.0187938037280005, 0.745078491721125, 0.173480320771696},
    {0.0462445391428486, 0.0138730580546826, 0.54999601573695, 0.389886387065519},
    {0.0277162805085066, 0.00831470213956798, 0.329635544721039, 0.634333472630887},
    {0.0112895846503162, 0.00338680125632332, 0.134269401146344, 0.851054212947016},
    {0.463493892842726, 0.463493892842726, 0.0384332743963333, 0.034578939918215},
    {0.396808024474, 0.396808024474, 0.0329036302803046, 0.173480320771696},
    {0.292912538609202, 0.292912538609202, 0.0242885357160769, 0.389886387065519},
    {0.175554697593021, 0.175554697593021, 0.0145571321830714, 0.634333472630887},
    {0.071508138280993, 0.0715081382809929, 0.00592951049099774, 0.851054212947016},
    {0.387127368143914, 0.387127368143914, 0.191166323793956, 0.034578939918215},
    {0.331428846302255, 0.331428846302255, 0.163661986623795, 0.173480320771696},
    {0.244651465573054, 0.244651465573054, 0.120810681788372, 0.389886387065519},
    {0.146629824241391, 0.146629824241391, 0.0724068788863314, 0.634333472630887},
    {0.0597262613403739, 0.0597262613403739, 0.0294932643722359, 0.851054212947016},
    {0.271295477241817, 0.271295477241817, 0.42283010559815, 0.034578939918215},
    {0.232262439776279, 0.232262439776279, 0.361994799675747, 0.173480320771696},
    {0.171449609540077, 0.171449609540077, 0.267214393854326, 0.389886387065519},
    {0.102756899715403, 0.102756899715403, 0.160152727938308, 0.634333472630887},
    {0.0418556421156528, 0.0418556421156527, 0.0652345028216781, 0.851054212947016},
    {0.147002602025855, 0.147002602025855, 0.671415856030075, 0.034578939918215},
    {0.125852385550656, 0.125852385550656, 0.574814908126993, 0.173480320771696},
    {0.0929006962259204, 0.0929006962259202, 0.42431222048264, 0.389886387065519},
    {0.0556792608113028, 0.0556792608113027, 0.254308005746508, 0.634333472630887},
    {0.0226796567455476, 0.0226796567455475, 0.103586473561889, 0.851054212947016},
    {0.0475639234935764, 0.0475639234935763, 0.870293213094632, 0.034578939918215},
    {0.0407205937535898, 0.0407205937535897, 0.745078491721125, 0.173480320771696},
    {0.0300587985987656, 0.0300587985987655, 0.54999601573695, 0.389886387065519},
    {0.0180154913240373, 0.0180154913240372, 0.329635544721039, 0.634333472630887},
    {0.00733819295331981, 0.00733819295331975, 0.134269401146344, 0.851054212947016},
    {0.213916656125506, 0.713071129559945, 0.0384332743963333, 0.034578939918215},
    {0.183139081291086, 0.610476967656913, 0.0329036302803046, 0.173480320771696},
    {0.135188126023001, 0.450636951195403, 0.0242885357160769, 0.389886387065519},
    {0.0810238806942952, 0.270085514491747, 0.0145571321830714, 0.634333472630887},
    {0.0330032003938849, 0.110013076168101, 0.00592951049099774, 0.851054212947016},
    {0.178671161296432, 0.595583574991396, 0.191166323793956, 0.034578939918215},
    {0.152964584084757, 0.509893108519752, 0.163661986623795, 0.173480320771696},
    {0.112914159689588, 0.376388771456521, 0.120810681788372, 0.389886387065519},
    {0.0676741639412117, 0.22558548454157, 0.0724068788863314, 0.634333472630887},
    {0.0275655026012311, 0.0918870200795167, 0.0294932643722359, 0.851054212947016},
    {0.125211188776624, 0.417379765707011, 0.42283010559815, 0.034578939918215},
    {0.107196244066483, 0.357328635486074, 0.361994799675747, 0.173480320771696},
    {0.0791292565731432, 0.263769962507011, 0.267214393854326, 0.389886387065519},
    {0.047425462817051, 0.158088336613754, 0.160152727938308, 0.634333472630887},
    {0.0193176633816069, 0.0643936208496988, 0.0652345028216781, 0.851054212947016},
    {0.0678462123292526, 0.226158991722457, 0.671415856030076, 0.034578939918215},
    {0.0580847383280398, 0.193620032773272, 0.574814908126993, 0.173480320771696},
    {0.0428765224208115, 0.142924870031029, 0.42431222048264, 0.389886387065519},
    {0.0256976876550463, 0.0856608339675592, 0.254308005746508, 0.634333472630887},
    {0.0104673576243389, 0.0348919558667562, 0.103586473561889, 0.851054212947016},
    {0.0219522104240709, 0.0731756365630818, 0.870293213094632, 0.034578939918215},
    {0.0187938037280005, 0.062647383779179, 0.745078491721125, 0.173480320771696},
    {0.0138730580546828, 0.0462445391428484, 0.549996015736949, 0.389886387065519},
    {0.00831470213956809, 0.0277162805085065, 0.329635544721039, 0.634333472630887},
    {0.00338680125632332, 0.0112895846503162, 0.134269401146344, 0.851054212947016},
    {0.0434850684329929, 0.883502717252459, 0.0384332743963333, 0.034578939918215},
    {0.0372285899889251, 0.756387458959075, 0.0329036302803046, 0.173480320771696},
    {0.0274810994988124, 0.558343977719591, 0.0242885357160769, 0.389886387065519},
    {0.0164705687743686, 0.334638826411673, 0.0145571321830714, 0.634333472630887},
    {0.00670890455016213, 0.136307372011824, 0.00592951049099774, 0.851054212947016},
    {0.0363203493206218, 0.737934386967207, 0.191166323793956, 0.034578939918215},
    {0.0310947054204485, 0.631762987184061, 0.163661986623795, 0.173480320771696},
    {0.0229532381913957, 0.466349692954713, 0.120810681788372, 0.389886387065519},
    {0.013756832700314, 0.279502815782468, 0.0724068788863314, 0.634333472630887},
    {0.00560352704046149, 0.113848995640286, 0.0294932643722359, 0.851054212947016},
    {0.0254529834709711, 0.517137971012664, 0.42283010559815, 0.034578939918215},
    {0.0217908978824723, 0.442733981670085, 0.361994799675747, 0.173480320771696},
    {0.0160854287808061, 0.326813790299348, 0.267214393854326, 0.389886387065519},
    {0.00964066816216444, 0.195873131268641, 0.160152727938308, 0.634333472630887},
    {0.00392690279162675, 0.0797843814396788, 0.0652345028216781, 0.851054212947016},
    {0.0137918067694832, 0.280213397282226, 0.671415856030076, 0.034578939918215},
    {0.0118074902013494, 0.239897280899962, 0.574814908126993, 0.173480320771696},
    {0.00871595763232141, 0.177085434819519, 0.42431222048264, 0.389886387065519},
    {0.00522383682733785, 0.106134684795268, 0.254308005746508, 0.634333472630887},
    {0.00212780888992553, 0.0432315046011696, 0.103586473561889, 0.851054212947016},
    {0.004462454629929, 0.0906653923572237, 0.870293213094632, 0.034578939918215},
    {0.00382041237943098, 0.0776207751277486, 0.745078491721125, 0.173480320771696},
    {0.00282012111543502, 0.0572974760820962, 0.54999601573695, 0.389886387065519},
    {0.00169021617151194, 0.0343407664765626, 0.329635544721039, 0.634333472630887},
    {0.000688470393412327, 0.0139879155132273, 0.134269401146344, 0.851054212947016}};
    
    // Array of non-zero columns
    static const unsigned int nzc3[4] = {0, 1, 2, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc7[4] = {4, 5, 6, 7};
    
    static const double FE0_D001[125][2] = \
    {{-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0},
    {-1.0, 1.0}};
    
    // Array of non-zero columns
    static const unsigned int nzc0[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc1[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc2[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc4[2] = {0, 3};
    
    // Array of non-zero columns
    static const unsigned int nzc5[2] = {0, 2};
    
    // Array of non-zero columns
    static const unsigned int nzc6[2] = {0, 1};
    
    // Array of non-zero columns
    static const unsigned int nzc8[2] = {4, 7};
    
    // Array of non-zero columns
    static const unsigned int nzc9[2] = {4, 6};
    
    // Array of non-zero columns
    static const unsigned int nzc10[2] = {4, 5};
    
    // Array of non-zero columns
    static const unsigned int nzc12[2] = {8, 11};
    
    // Array of non-zero columns
    static const unsigned int nzc13[2] = {8, 10};
    
    // Array of non-zero columns
    static const unsigned int nzc14[2] = {8, 9};
    
    static const double FE3_C0[125][4] = \
    {{-0.0434850684329928, -0.956514931567007, -0.0434850684329927, 0.0434850684329927},
    {-0.037228589988925, -0.962771410011075, -0.037228589988925, 0.0372285899889249},
    {-0.0274810994988123, -0.972518900501187, -0.0274810994988122, 0.0274810994988122},
    {-0.0164705687743684, -0.983529431225631, -0.0164705687743684, 0.0164705687743684},
    {-0.00670890455016213, -0.993291095449838, -0.0067089045501621, 0.00670890455016207},
    {-0.0363203493206216, -0.963679650679378, -0.0363203493206215, 0.0363203493206215},
    {-0.0310947054204485, -0.968905294579552, -0.0310947054204484, 0.0310947054204484},
    {-0.0229532381913956, -0.977046761808604, -0.0229532381913955, 0.0229532381913955},
    {-0.0137568327003139, -0.986243167299686, -0.0137568327003139, 0.0137568327003139},
    {-0.00560352704046155, -0.994396472959538, -0.00560352704046152, 0.00560352704046146},
    {-0.0254529834709709, -0.974547016529029, -0.0254529834709709, 0.0254529834709709},
    {-0.0217908978824722, -0.978209102117527, -0.0217908978824722, 0.0217908978824721},
    {-0.016085428780806, -0.983914571219194, -0.0160854287808059, 0.0160854287808059},
    {-0.00964066816216436, -0.990359331837835, -0.0096406681621643, 0.00964066816216433},
    {-0.00392690279162672, -0.996073097208373, -0.00392690279162666, 0.00392690279162664},
    {-0.013791806769483, -0.986208193230517, -0.013791806769483, 0.0137918067694829},
    {-0.0118074902013493, -0.988192509798651, -0.0118074902013493, 0.0118074902013492},
    {-0.00871595763232126, -0.991284042367679, -0.00871595763232121, 0.0087159576323212},
    {-0.00522383682733774, -0.994776163172662, -0.00522383682733771, 0.00522383682733776},
    {-0.00212780888992556, -0.997872191110075, -0.00212780888992553, 0.00212780888992548},
    {-0.00446245462992906, -0.995537545370071, -0.00446245462992902, 0.00446245462992896},
    {-0.00382041237943093, -0.996179587620569, -0.00382041237943091, 0.0038204123794309},
    {-0.00282012111543492, -0.997179878884565, -0.00282012111543489, 0.00282012111543484},
    {-0.00169021617151188, -0.998309783828488, -0.00169021617151183, 0.00169021617151185},
    {-0.000688470393412299, -0.999311529606588, -0.000688470393412272, 0.000688470393412216},
    {-0.213916656125506, -0.786083343874494, -0.213916656125506, 0.213916656125506},
    {-0.183139081291086, -0.816860918708914, -0.183139081291086, 0.183139081291086},
    {-0.135188126023001, -0.864811873976999, -0.135188126023001, 0.135188126023001},
    {-0.0810238806942951, -0.918976119305705, -0.0810238806942951, 0.0810238806942951},
    {-0.0330032003938849, -0.966996799606115, -0.0330032003938849, 0.0330032003938849},
    {-0.178671161296432, -0.821328838703568, -0.178671161296432, 0.178671161296432},
    {-0.152964584084757, -0.847035415915243, -0.152964584084757, 0.152964584084757},
    {-0.112914159689587, -0.887085840310412, -0.112914159689587, 0.112914159689587},
    {-0.0676741639412116, -0.932325836058788, -0.0676741639412116, 0.0676741639412115},
    {-0.0275655026012311, -0.972434497398769, -0.027565502601231, 0.027565502601231},
    {-0.125211188776624, -0.874788811223376, -0.125211188776624, 0.125211188776624},
    {-0.107196244066483, -0.892803755933517, -0.107196244066483, 0.107196244066483},
    {-0.0791292565731431, -0.920870743426857, -0.0791292565731431, 0.079129256573143},
    {-0.0474254628170509, -0.952574537182949, -0.0474254628170509, 0.0474254628170509},
    {-0.0193176633816069, -0.980682336618393, -0.0193176633816069, 0.0193176633816068},
    {-0.0678462123292525, -0.932153787670747, -0.0678462123292525, 0.0678462123292524},
    {-0.0580847383280398, -0.94191526167196, -0.0580847383280398, 0.0580847383280397},
    {-0.0428765224208114, -0.957123477579188, -0.0428765224208113, 0.0428765224208113},
    {-0.0256976876550462, -0.974302312344954, -0.0256976876550461, 0.0256976876550462},
    {-0.0104673576243389, -0.989532642375661, -0.0104673576243389, 0.0104673576243388},
    {-0.0219522104240709, -0.978047789575929, -0.0219522104240709, 0.0219522104240708},
    {-0.0187938037280006, -0.981206196271999, -0.0187938037280006, 0.0187938037280005},
    {-0.0138730580546827, -0.986126941945317, -0.0138730580546827, 0.0138730580546826},
    {-0.00831470213956803, -0.991685297860432, -0.00831470213956798, 0.008314702139568},
    {-0.00338680125632335, -0.996613198743677, -0.00338680125632332, 0.00338680125632326},
    {-0.463493892842726, -0.536506107157274, -0.463493892842726, 0.463493892842726},
    {-0.396808024474, -0.603191975526, -0.396808024474, 0.396808024474},
    {-0.292912538609202, -0.707087461390798, -0.292912538609202, 0.292912538609202},
    {-0.175554697593021, -0.824445302406979, -0.175554697593021, 0.175554697593021},
    {-0.071508138280993, -0.928491861719007, -0.0715081382809929, 0.0715081382809929},
    {-0.387127368143914, -0.612872631856086, -0.387127368143914, 0.387127368143914},
    {-0.331428846302255, -0.668571153697745, -0.331428846302255, 0.331428846302255},
    {-0.244651465573054, -0.755348534426945, -0.244651465573054, 0.244651465573054},
    {-0.146629824241391, -0.853370175758609, -0.146629824241391, 0.146629824241391},
    {-0.0597262613403739, -0.940273738659626, -0.0597262613403739, 0.0597262613403738},
    {-0.271295477241817, -0.728704522758182, -0.271295477241817, 0.271295477241817},
    {-0.232262439776279, -0.767737560223721, -0.232262439776279, 0.232262439776279},
    {-0.171449609540077, -0.828550390459923, -0.171449609540077, 0.171449609540077},
    {-0.102756899715403, -0.897243100284597, -0.102756899715403, 0.102756899715403},
    {-0.0418556421156528, -0.958144357884347, -0.0418556421156527, 0.0418556421156527},
    {-0.147002602025855, -0.852997397974145, -0.147002602025855, 0.147002602025855},
    {-0.125852385550656, -0.874147614449344, -0.125852385550656, 0.125852385550656},
    {-0.0929006962259203, -0.90709930377408, -0.0929006962259203, 0.0929006962259202},
    {-0.0556792608113028, -0.944320739188697, -0.0556792608113027, 0.0556792608113027},
    {-0.0226796567455475, -0.977320343254452, -0.0226796567455475, 0.0226796567455474},
    {-0.0475639234935764, -0.952436076506424, -0.0475639234935764, 0.0475639234935763},
    {-0.0407205937535898, -0.95927940624641, -0.0407205937535898, 0.0407205937535897},
    {-0.0300587985987656, -0.969941201401234, -0.0300587985987656, 0.0300587985987655},
    {-0.0180154913240373, -0.981984508675962, -0.0180154913240372, 0.0180154913240373},
    {-0.00733819295331978, -0.99266180704668, -0.00733819295331975, 0.00733819295331969},
    {-0.713071129559946, -0.286928870440054, -0.713071129559946, 0.713071129559946},
    {-0.610476967656914, -0.389523032343086, -0.610476967656914, 0.610476967656914},
    {-0.450636951195403, -0.549363048804597, -0.450636951195403, 0.450636951195403},
    {-0.270085514491747, -0.729914485508253, -0.270085514491747, 0.270085514491747},
    {-0.110013076168101, -0.889986923831899, -0.110013076168101, 0.110013076168101},
    {-0.595583574991397, -0.404416425008603, -0.595583574991397, 0.595583574991397},
    {-0.509893108519752, -0.490106891480248, -0.509893108519752, 0.509893108519752},
    {-0.376388771456521, -0.623611228543479, -0.376388771456521, 0.376388771456521},
    {-0.22558548454157, -0.77441451545843, -0.22558548454157, 0.22558548454157},
    {-0.0918870200795167, -0.908112979920483, -0.0918870200795167, 0.0918870200795167},
    {-0.417379765707011, -0.582620234292989, -0.417379765707011, 0.417379765707011},
    {-0.357328635486074, -0.642671364513926, -0.357328635486074, 0.357328635486074},
    {-0.263769962507011, -0.736230037492989, -0.263769962507011, 0.263769962507011},
    {-0.158088336613754, -0.841911663386245, -0.158088336613754, 0.158088336613754},
    {-0.0643936208496988, -0.935606379150301, -0.0643936208496987, 0.0643936208496987},
    {-0.226158991722457, -0.773841008277543, -0.226158991722457, 0.226158991722457},
    {-0.193620032773272, -0.806379967226728, -0.193620032773272, 0.193620032773272},
    {-0.142924870031029, -0.857075129968971, -0.142924870031029, 0.142924870031029},
    {-0.0856608339675593, -0.91433916603244, -0.0856608339675593, 0.0856608339675593},
    {-0.0348919558667562, -0.965108044133244, -0.0348919558667562, 0.0348919558667561},
    {-0.073175636563082, -0.926824363436918, -0.073175636563082, 0.0731756365630819},
    {-0.0626473837791791, -0.937352616220821, -0.0626473837791791, 0.0626473837791791},
    {-0.0462445391428485, -0.953755460857151, -0.0462445391428485, 0.0462445391428485},
    {-0.0277162805085066, -0.972283719491493, -0.0277162805085065, 0.0277162805085065},
    {-0.0112895846503163, -0.988710415349684, -0.0112895846503162, 0.0112895846503162},
    {-0.883502717252459, -0.116497282747541, -0.883502717252459, 0.883502717252459},
    {-0.756387458959075, -0.243612541040925, -0.756387458959075, 0.756387458959075},
    {-0.558343977719591, -0.441656022280408, -0.558343977719592, 0.558343977719591},
    {-0.334638826411673, -0.665361173588326, -0.334638826411673, 0.334638826411673},
    {-0.136307372011824, -0.863692627988176, -0.136307372011824, 0.136307372011824},
    {-0.737934386967207, -0.262065613032793, -0.737934386967207, 0.737934386967207},
    {-0.631762987184061, -0.368237012815939, -0.631762987184061, 0.631762987184061},
    {-0.466349692954713, -0.533650307045287, -0.466349692954713, 0.466349692954713},
    {-0.279502815782468, -0.720497184217532, -0.279502815782468, 0.279502815782468},
    {-0.113848995640286, -0.886151004359714, -0.113848995640286, 0.113848995640286},
    {-0.517137971012664, -0.482862028987336, -0.517137971012664, 0.517137971012664},
    {-0.442733981670085, -0.557266018329915, -0.442733981670085, 0.442733981670085},
    {-0.326813790299348, -0.673186209700652, -0.326813790299348, 0.326813790299348},
    {-0.195873131268641, -0.804126868731359, -0.195873131268641, 0.195873131268641},
    {-0.0797843814396789, -0.920215618560321, -0.0797843814396789, 0.0797843814396788},
    {-0.280213397282226, -0.719786602717774, -0.280213397282226, 0.280213397282226},
    {-0.239897280899962, -0.760102719100038, -0.239897280899962, 0.239897280899962},
    {-0.177085434819519, -0.822914565180481, -0.177085434819519, 0.177085434819519},
    {-0.106134684795268, -0.893865315204732, -0.106134684795268, 0.106134684795268},
    {-0.0432315046011696, -0.95676849539883, -0.0432315046011695, 0.0432315046011695},
    {-0.0906653923572239, -0.909334607642776, -0.0906653923572238, 0.0906653923572237},
    {-0.0776207751277487, -0.922379224872251, -0.0776207751277487, 0.0776207751277486},
    {-0.0572974760820963, -0.942702523917904, -0.0572974760820963, 0.0572974760820962},
    {-0.0343407664765627, -0.965659233523437, -0.0343407664765626, 0.0343407664765627},
    {-0.0139879155132273, -0.986012084486773, -0.0139879155132272, 0.0139879155132272}};
    
    static const double FE3_C0_D100[125][4] = \
    {{-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0},
    {-1.0, 1.0, -1.0, 1.0}};
    
    static const double FE3_C1[125][4] = \
    {{-0.0384332743963331, 0.0384332743963331, 0.961566725603667, 0.0384332743963331},
    {-0.0329036302803044, 0.0329036302803044, 0.967096369719696, 0.0329036302803044},
    {-0.0242885357160768, 0.0242885357160767, 0.975711464283923, 0.0242885357160767},
    {-0.0145571321830713, 0.0145571321830713, 0.985442867816929, 0.0145571321830713},
    {-0.00592951049099782, 0.00592951049099782, 0.994070489509002, 0.00592951049099782},
    {-0.191166323793956, 0.191166323793956, 0.808833676206044, 0.191166323793956},
    {-0.163661986623795, 0.163661986623795, 0.836338013376205, 0.163661986623795},
    {-0.120810681788372, 0.120810681788372, 0.879189318211628, 0.120810681788372},
    {-0.0724068788863313, 0.0724068788863313, 0.927593121113669, 0.0724068788863313},
    {-0.029493264372236, 0.029493264372236, 0.970506735627764, 0.029493264372236},
    {-0.42283010559815, 0.42283010559815, 0.57716989440185, 0.42283010559815},
    {-0.361994799675747, 0.361994799675747, 0.638005200324253, 0.361994799675747},
    {-0.267214393854326, 0.267214393854326, 0.732785606145674, 0.267214393854326},
    {-0.160152727938308, 0.160152727938308, 0.839847272061692, 0.160152727938308},
    {-0.0652345028216781, 0.0652345028216781, 0.934765497178322, 0.0652345028216781},
    {-0.671415856030075, 0.671415856030075, 0.328584143969925, 0.671415856030075},
    {-0.574814908126993, 0.574814908126993, 0.425185091873007, 0.574814908126993},
    {-0.42431222048264, 0.42431222048264, 0.57568777951736, 0.42431222048264},
    {-0.254308005746508, 0.254308005746508, 0.745691994253492, 0.254308005746508},
    {-0.103586473561889, 0.103586473561889, 0.896413526438111, 0.103586473561889},
    {-0.870293213094632, 0.870293213094632, 0.129706786905368, 0.870293213094632},
    {-0.745078491721124, 0.745078491721124, 0.254921508278875, 0.745078491721124},
    {-0.549996015736949, 0.549996015736949, 0.45000398426305, 0.549996015736949},
    {-0.329635544721039, 0.329635544721039, 0.670364455278961, 0.329635544721039},
    {-0.134269401146344, 0.134269401146344, 0.865730598853656, 0.134269401146344},
    {-0.0384332743963332, 0.0384332743963332, 0.961566725603667, 0.0384332743963332},
    {-0.0329036302803045, 0.0329036302803045, 0.967096369719695, 0.0329036302803045},
    {-0.0242885357160768, 0.0242885357160768, 0.975711464283923, 0.0242885357160768},
    {-0.0145571321830714, 0.0145571321830714, 0.985442867816928, 0.0145571321830714},
    {-0.00592951049099782, 0.00592951049099782, 0.994070489509002, 0.00592951049099782},
    {-0.191166323793956, 0.191166323793956, 0.808833676206044, 0.191166323793956},
    {-0.163661986623795, 0.163661986623795, 0.836338013376205, 0.163661986623795},
    {-0.120810681788372, 0.120810681788372, 0.879189318211628, 0.120810681788372},
    {-0.0724068788863314, 0.0724068788863313, 0.927593121113668, 0.0724068788863313},
    {-0.029493264372236, 0.029493264372236, 0.970506735627764, 0.029493264372236},
    {-0.42283010559815, 0.42283010559815, 0.57716989440185, 0.42283010559815},
    {-0.361994799675747, 0.361994799675747, 0.638005200324253, 0.361994799675747},
    {-0.267214393854326, 0.267214393854326, 0.732785606145674, 0.267214393854326},
    {-0.160152727938308, 0.160152727938308, 0.839847272061692, 0.160152727938308},
    {-0.0652345028216781, 0.0652345028216781, 0.934765497178322, 0.0652345028216781},
    {-0.671415856030075, 0.671415856030075, 0.328584143969925, 0.671415856030075},
    {-0.574814908126993, 0.574814908126993, 0.425185091873007, 0.574814908126993},
    {-0.42431222048264, 0.42431222048264, 0.57568777951736, 0.42431222048264},
    {-0.254308005746508, 0.254308005746508, 0.745691994253492, 0.254308005746508},
    {-0.103586473561889, 0.103586473561889, 0.896413526438111, 0.103586473561889},
    {-0.870293213094632, 0.870293213094632, 0.129706786905368, 0.870293213094632},
    {-0.745078491721125, 0.745078491721125, 0.254921508278875, 0.745078491721125},
    {-0.549996015736949, 0.549996015736949, 0.45000398426305, 0.549996015736949},
    {-0.329635544721039, 0.329635544721039, 0.670364455278961, 0.329635544721039},
    {-0.134269401146344, 0.134269401146344, 0.865730598853656, 0.134269401146344},
    {-0.0384332743963333, 0.0384332743963333, 0.961566725603666, 0.0384332743963333},
    {-0.0329036302803046, 0.0329036302803046, 0.967096369719695, 0.0329036302803046},
    {-0.0242885357160769, 0.0242885357160769, 0.975711464283923, 0.0242885357160769},
    {-0.0145571321830714, 0.0145571321830714, 0.985442867816928, 0.0145571321830714},
    {-0.00592951049099785, 0.00592951049099785, 0.994070489509002, 0.00592951049099785},
    {-0.191166323793956, 0.191166323793956, 0.808833676206044, 0.191166323793956},
    {-0.163661986623795, 0.163661986623795, 0.836338013376205, 0.163661986623795},
    {-0.120810681788372, 0.120810681788372, 0.879189318211627, 0.120810681788372},
    {-0.0724068788863314, 0.0724068788863314, 0.927593121113668, 0.0724068788863314},
    {-0.029493264372236, 0.029493264372236, 0.970506735627764, 0.029493264372236},
    {-0.42283010559815, 0.42283010559815, 0.57716989440185, 0.42283010559815},
    {-0.361994799675747, 0.361994799675747, 0.638005200324253, 0.361994799675747},
    {-0.267214393854326, 0.267214393854326, 0.732785606145674, 0.267214393854326},
    {-0.160152727938308, 0.160152727938308, 0.839847272061692, 0.160152727938308},
    {-0.0652345028216781, 0.0652345028216781, 0.934765497178322, 0.0652345028216781},
    {-0.671415856030075, 0.671415856030075, 0.328584143969924, 0.671415856030075},
    {-0.574814908126993, 0.574814908126993, 0.425185091873007, 0.574814908126993},
    {-0.42431222048264, 0.42431222048264, 0.57568777951736, 0.42431222048264},
    {-0.254308005746508, 0.254308005746508, 0.745691994253492, 0.254308005746508},
    {-0.103586473561889, 0.103586473561889, 0.896413526438111, 0.103586473561889},
    {-0.870293213094632, 0.870293213094632, 0.129706786905368, 0.870293213094632},
    {-0.745078491721125, 0.745078491721125, 0.254921508278875, 0.745078491721125},
    {-0.549996015736949, 0.549996015736949, 0.45000398426305, 0.549996015736949},
    {-0.329635544721039, 0.329635544721039, 0.670364455278961, 0.329635544721039},
    {-0.134269401146344, 0.134269401146344, 0.865730598853656, 0.134269401146344},
    {-0.0384332743963335, 0.0384332743963335, 0.961566725603666, 0.0384332743963335},
    {-0.0329036302803048, 0.0329036302803048, 0.967096369719695, 0.0329036302803048},
    {-0.024288535716077, 0.024288535716077, 0.975711464283923, 0.024288535716077},
    {-0.0145571321830715, 0.0145571321830715, 0.985442867816928, 0.0145571321830715},
    {-0.00592951049099788, 0.00592951049099788, 0.994070489509002, 0.00592951049099788},
    {-0.191166323793956, 0.191166323793956, 0.808833676206044, 0.191166323793956},
    {-0.163661986623795, 0.163661986623795, 0.836338013376205, 0.163661986623795},
    {-0.120810681788372, 0.120810681788372, 0.879189318211627, 0.120810681788372},
    {-0.0724068788863315, 0.0724068788863315, 0.927593121113668, 0.0724068788863315},
    {-0.029493264372236, 0.029493264372236, 0.970506735627764, 0.029493264372236},
    {-0.42283010559815, 0.42283010559815, 0.57716989440185, 0.42283010559815},
    {-0.361994799675747, 0.361994799675747, 0.638005200324253, 0.361994799675747},
    {-0.267214393854326, 0.267214393854326, 0.732785606145674, 0.267214393854326},
    {-0.160152727938308, 0.160152727938308, 0.839847272061692, 0.160152727938308},
    {-0.0652345028216781, 0.0652345028216781, 0.934765497178322, 0.0652345028216781},
    {-0.671415856030075, 0.671415856030075, 0.328584143969925, 0.671415856030075},
    {-0.574814908126993, 0.574814908126993, 0.425185091873007, 0.574814908126993},
    {-0.42431222048264, 0.42431222048264, 0.57568777951736, 0.42431222048264},
    {-0.254308005746508, 0.254308005746508, 0.745691994253492, 0.254308005746508},
    {-0.103586473561889, 0.103586473561889, 0.896413526438111, 0.103586473561889},
    {-0.870293213094632, 0.870293213094632, 0.129706786905368, 0.870293213094632},
    {-0.745078491721125, 0.745078491721125, 0.254921508278875, 0.745078491721125},
    {-0.549996015736949, 0.549996015736949, 0.45000398426305, 0.549996015736949},
    {-0.329635544721039, 0.329635544721039, 0.670364455278961, 0.329635544721039},
    {-0.134269401146344, 0.134269401146344, 0.865730598853656, 0.134269401146344},
    {-0.0384332743963336, 0.0384332743963336, 0.961566725603666, 0.0384332743963336},
    {-0.0329036302803048, 0.0329036302803048, 0.967096369719695, 0.0329036302803048},
    {-0.024288535716077, 0.024288535716077, 0.975711464283923, 0.024288535716077},
    {-0.0145571321830716, 0.0145571321830715, 0.985442867816928, 0.0145571321830715},
    {-0.00592951049099788, 0.00592951049099788, 0.994070489509002, 0.00592951049099788},
    {-0.191166323793957, 0.191166323793956, 0.808833676206043, 0.191166323793956},
    {-0.163661986623795, 0.163661986623795, 0.836338013376205, 0.163661986623795},
    {-0.120810681788372, 0.120810681788372, 0.879189318211627, 0.120810681788372},
    {-0.0724068788863315, 0.0724068788863315, 0.927593121113668, 0.0724068788863315},
    {-0.029493264372236, 0.029493264372236, 0.970506735627764, 0.029493264372236},
    {-0.42283010559815, 0.42283010559815, 0.57716989440185, 0.42283010559815},
    {-0.361994799675747, 0.361994799675747, 0.638005200324253, 0.361994799675747},
    {-0.267214393854326, 0.267214393854326, 0.732785606145673, 0.267214393854326},
    {-0.160152727938308, 0.160152727938308, 0.839847272061692, 0.160152727938308},
    {-0.0652345028216782, 0.0652345028216782, 0.934765497178322, 0.0652345028216782},
    {-0.671415856030075, 0.671415856030075, 0.328584143969924, 0.671415856030075},
    {-0.574814908126993, 0.574814908126993, 0.425185091873007, 0.574814908126993},
    {-0.42431222048264, 0.42431222048264, 0.57568777951736, 0.42431222048264},
    {-0.254308005746508, 0.254308005746508, 0.745691994253492, 0.254308005746508},
    {-0.103586473561889, 0.103586473561889, 0.896413526438111, 0.103586473561889},
    {-0.870293213094632, 0.870293213094632, 0.129706786905368, 0.870293213094632},
    {-0.745078491721125, 0.745078491721125, 0.254921508278875, 0.745078491721125},
    {-0.549996015736949, 0.549996015736949, 0.45000398426305, 0.549996015736949},
    {-0.329635544721039, 0.329635544721039, 0.670364455278961, 0.329635544721039},
    {-0.134269401146344, 0.134269401146344, 0.865730598853656, 0.134269401146344}};
    
    static const double FE3_C2[125][4] = \
    {{-0.034578939918215, 0.034578939918215, -0.0345789399182149, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.034578939918215, -0.0345789399182149, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.034578939918215, -0.0345789399182149, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.034578939918215, -0.0345789399182149, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.034578939918215, -0.0345789399182149, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.0345789399182151, -0.0345789399182149, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.034578939918215, -0.0345789399182149, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.0345789399182151, -0.0345789399182149, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.034578939918215, -0.0345789399182149, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.034578939918215, -0.0345789399182149, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.0345789399182151, 0.0345789399182151, -0.034578939918215, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.0345789399182151, -0.034578939918215, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.0345789399182151, -0.034578939918215, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.0345789399182151, -0.0345789399182149, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.034578939918215, -0.0345789399182149, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.0345789399182151, 0.0345789399182152, -0.034578939918215, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.0345789399182151, 0.0345789399182151, -0.034578939918215, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.0345789399182151, 0.0345789399182151, -0.034578939918215, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.0345789399182151, -0.034578939918215, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.034578939918215, -0.0345789399182149, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.0345789399182151, 0.0345789399182152, -0.0345789399182151, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.0345789399182151, 0.0345789399182152, -0.034578939918215, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.0345789399182151, 0.0345789399182151, -0.034578939918215, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.0345789399182151, -0.034578939918215, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984},
    {-0.034578939918215, 0.034578939918215, -0.0345789399182149, -0.965421060081785},
    {-0.173480320771696, 0.173480320771696, -0.173480320771696, -0.826519679228304},
    {-0.389886387065519, 0.389886387065519, -0.389886387065519, -0.610113612934481},
    {-0.634333472630887, 0.634333472630886, -0.634333472630887, -0.365666527369113},
    {-0.851054212947016, 0.851054212947016, -0.851054212947016, -0.148945787052984}};
    
    // Reset values in the element tensor.
    A[0] = 0.0;
    // Number of operations to compute geometry constants: 6666.
    double G[62];
    G[0] = det*w[6][0]*w[6][0]*w[7][0]*w[7][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[1] = det*w[5][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[2] = 2.0*det*w[6][0]*w[6][0]*w[7][0]*w[7][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[3] = 2.0*det*w[5][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[4] = 2.0*det*w[6][0]*w[6][0]*w[7][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[5] = 2.0*det*w[6][0]*w[6][0]*w[7][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[6] = 2.0*det*w[6][0]*w[6][0]*w[7][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[7] = -2.0*det*w[6][0]*w[6][0]*w[7][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[8] = -2.0*det*w[6][0]*w[6][0]*w[7][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[9] = 2.0*det*w[6][0]*w[6][0]*w[7][0]*w[7][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[10] = 2.0*det*w[5][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[11] = -2.0*det*w[6][0]*w[6][0]*w[7][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[12] = -2.0*det*w[5][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[13] = -2.0*det*w[5][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[14] = -2.0*det*w[5][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[15] = det*w[6][0]*w[6][0]*w[7][0]*w[7][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[16] = det*w[5][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[17] = 2.0*det*w[6][0]*w[6][0]*w[7][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[18] = 2.0*det*w[6][0]*w[6][0]*w[7][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[19] = -2.0*det*w[6][0]*w[6][0]*w[7][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[20] = 2.0*det*w[6][0]*w[6][0]*w[7][0]*w[7][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[21] = 2.0*det*w[5][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[22] = -2.0*det*w[6][0]*w[6][0]*w[7][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[23] = -2.0*det*w[5][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[24] = -2.0*det*w[5][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[25] = det*w[3][0]*(2.0*(J[0]*J[0]*(J[0]*J[1]*K[0]*K[3] + K[6]*(J[0]*J[2]*K[0] + K[3]*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8]))) + J[3]*(J[0]*(J[0]*K[0]*(J[4]*K[3] + J[5]*K[6]) + K[1]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[3]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + K[4]*(J[1]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[3]*K[1]) + J[4]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[7]*(J[7]*K[3] + J[8]*K[6])) + K[7]*(J[2]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[3]*K[1]) + J[5]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[8]*(J[7]*K[3] + J[8]*K[6]))) + J[3]*(J[3]*J[4]*K[1]*K[4] + K[7]*(J[3]*J[5]*K[1] + K[4]*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8])))) + J[6]*(J[0]*(J[0]*K[0]*(J[7]*K[3] + J[8]*K[6]) + K[2]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[6]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6])) + K[5]*(J[1]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[6]*K[2]) + J[4]*(J[4]*K[3] + J[5]*K[6]) + J[7]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6])) + K[8]*(J[2]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[6]*K[2]) + J[5]*(J[4]*K[3] + J[5]*K[6]) + J[8]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]))) + J[3]*(J[0]*(K[0]*(J[4]*K[5] + J[5]*K[8] + J[7]*K[4] + J[8]*K[7]) + K[1]*(J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[2]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[3]*K[1]*(J[7]*K[4] + J[8]*K[7]) + K[2]*(J[3]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7]) + J[6]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7])) + K[5]*(J[1]*(J[1]*K[4] + J[2]*K[7]) + J[4]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[6]*K[2]) + J[7]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7])) + K[8]*(J[2]*(J[1]*K[4] + J[2]*K[7]) + J[5]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[6]*K[2]) + J[8]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]))) + J[6]*(J[6]*J[7]*K[2]*K[5] + K[8]*(J[6]*J[8]*K[2] + K[5]*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8]))))) + J[0]*J[0]*(J[0]*J[0]*K[0]*K[0] + K[3]*K[3]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[6]*K[6]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])) + J[3]*J[3]*(J[0]*J[0]*K[0]*K[0] + K[1]*K[1]*(J[0]*J[0] + J[3]*J[3]) + K[4]*K[4]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[7]*K[7]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])) + J[6]*J[6]*(J[0]*J[0]*K[0]*K[0] + J[3]*J[3]*K[1]*K[1] + K[2]*K[2]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[5]*K[5]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[8]*K[8]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])))/(detJ*detJ*detJ*detJ);
    G[26] = det*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6])/(detJ*detJ);
    G[27] = det*w[3][0]*(2.0*(J[1]*(J[0]*(J[0]*J[0]*K[0]*K[0] + J[1]*J[1]*K[3]*K[3]) + J[0]*K[6]*K[6]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8]) + J[3]*(J[0]*J[3]*K[0]*K[0] + J[1]*K[4]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[1]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[3]*(J[3]*K[0] + J[5]*K[6])) + K[7]*(J[1]*J[2]*K[3] + K[0]*(J[0]*J[2] + J[3]*J[5]) + K[6]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8]))) + J[6]*(J[1]*K[3]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + K[0]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[3]*(J[3]*K[2] + J[5]*K[8] + J[8]*K[7]) + J[6]*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2] + J[8]*K[8])) + K[6]*(J[1]*J[2]*K[5] + J[3]*J[8]*K[1] + K[2]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]) + K[8]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])))) + J[4]*(J[0]*(J[1]*J[4]*K[3]*K[3] + K[1]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[3]*(J[0]*K[1] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + K[4]*(J[1]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[4]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + K[7]*(K[0]*(J[0]*J[2] + J[3]*J[5]) + K[3]*(J[1]*J[2] + J[4]*J[5]) + K[6]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8]))) + J[3]*(J[1]*(K[3]*(J[3]*K[1] + J[5]*K[7]) + K[4]*(J[1]*K[4] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[3]*J[3]*K[1]*K[1] + J[4]*J[4]*K[4]*K[4] + K[7]*K[7]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])) + J[6]*(J[1]*(K[2]*(J[0]*K[4] + J[3]*K[3]) + K[5]*(J[1]*K[4] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + K[8]*(J[2]*K[4] + J[5]*K[3])) + J[4]*K[4]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + K[1]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[8]*K[6]) + J[3]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8] + J[6]*K[1]) + J[6]*(J[6]*K[2] + J[8]*K[8])) + K[7]*(J[0]*J[8]*K[0] + K[2]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]) + K[5]*(J[1]*J[2] + J[4]*J[5]) + K[8]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])))) + J[7]*(J[0]*(J[0]*J[6]*K[2]*K[2] + K[0]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[6]*(J[4]*K[4] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[3]*(J[1]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[4]*(J[4]*K[5] + J[5]*K[8] + J[6]*K[1] + J[8]*K[7]) + J[7]*(J[1]*K[3] + J[4]*K[4] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[6]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[5]*(J[4]*K[5] + J[5]*K[8]) + J[8]*(J[4]*K[4] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8]))) + J[3]*(J[0]*(K[0]*(J[4]*K[5] + J[5]*K[8]) + K[2]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[3]*J[6]*K[2]*K[2] + K[1]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[3]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + J[6]*(J[1]*K[3] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[4]*(J[1]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[4]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + J[7]*(J[4]*K[4] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[7]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[5]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + J[8]*(J[1]*K[3] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8]))) + J[6]*(J[6]*K[2]*(J[1]*K[3] + J[4]*K[4] + J[6]*K[2]) + K[5]*(J[1]*(J[1]*K[5] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[4]*(J[4]*K[5] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + J[7]*J[7]*K[5]) + K[8]*(J[8]*(J[1]*K[3] + J[4]*K[4]) + K[8]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8]))))) + 4.0*(J[0]*J[1]*(J[0]*J[1]*K[0]*K[3] + K[6]*(J[1]*J[2]*K[3] + K[0]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]))) + J[4]*(J[0]*J[1]*J[5]*K[3]*K[6] + J[3]*(J[0]*J[1]*K[0]*K[3] + K[1]*K[4]*(J[0]*J[1] + J[3]*J[4]) + K[7]*(K[1]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]) + K[4]*(J[1]*J[2] + J[4]*J[5])))) + J[7]*(J[6]*(J[0]*J[1]*K[0]*K[3] + J[3]*J[4]*K[1]*K[4] + K[2]*K[5]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[8]*(K[2]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]) + K[5]*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8]))) + J[8]*(J[0]*J[1]*K[3]*K[6] + J[3]*J[4]*K[4]*K[7]))))/(detJ*detJ*detJ*detJ);
    G[28] = 2.0*det*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7])/(detJ*detJ);
    G[29] = det*w[3][0]*(2.0*(J[2]*(J[0]*(J[0]*J[0]*K[0]*K[0] + J[2]*J[2]*K[6]*K[6]) + J[0]*K[3]*K[3]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + J[3]*(J[0]*J[3]*K[0]*K[0] + J[2]*K[7]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[1]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[3]*(J[3]*K[0] + J[4]*K[3])) + K[4]*(J[1]*J[2]*K[6] + K[0]*(J[0]*J[1] + J[3]*J[4]) + K[3]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]))) + J[6]*(J[2]*K[6]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + K[0]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[3]*(J[3]*K[2] + J[4]*K[5] + J[7]*K[4]) + J[6]*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2] + J[7]*K[5])) + K[3]*(J[1]*J[2]*K[8] + J[3]*J[7]*K[1] + K[2]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[5]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7])))) + J[5]*(J[0]*(J[0]*J[3]*K[1]*K[1] + K[0]*(J[0]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + J[3]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7])) + K[3]*(K[1]*(J[0]*J[1] + J[3]*J[4]) + K[4]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[7]*(J[1]*J[2] + J[4]*J[5])) + K[6]*(J[2]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + J[5]*(J[2]*K[6] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7]))) + J[3]*(J[2]*(K[6]*(J[3]*K[1] + J[4]*K[4]) + K[7]*(J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[3]*J[3]*K[1]*K[1] + J[5]*J[5]*K[7]*K[7] + K[4]*K[4]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7])) + J[6]*(J[2]*(K[6]*(J[3]*K[2] + J[4]*K[5]) + K[7]*(J[0]*K[2] + J[1]*K[5]) + K[8]*(J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[5]*K[7]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + K[1]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3]) + J[3]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8] + J[6]*K[1]) + J[6]*(J[6]*K[2] + J[7]*K[5])) + K[4]*(J[0]*J[7]*K[0] + K[2]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[5]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[8]*(J[1]*J[2] + J[4]*J[5])))) + J[8]*(J[0]*(J[0]*J[6]*K[2]*K[2] + K[0]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[6]*(J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[3]*(J[1]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[4]*(J[4]*K[5] + J[5]*K[8]) + J[7]*(J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[6]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[5]*(J[4]*K[5] + J[5]*K[8] + J[6]*K[1] + J[7]*K[4]) + J[8]*(J[2]*K[6] + J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8]))) + J[3]*(J[0]*(K[0]*(J[4]*K[5] + J[5]*K[8]) + K[2]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[3]*J[6]*K[2]*K[2] + K[1]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[3]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + J[6]*(J[2]*K[6] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[4]*(J[1]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[4]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + J[7]*(J[2]*K[6] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[7]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[5]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + J[8]*(J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8]))) + J[6]*(J[6]*K[2]*(J[2]*K[6] + J[5]*K[7] + J[6]*K[2]) + K[5]*(J[7]*(J[2]*K[6] + J[5]*K[7]) + K[5]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7])) + K[8]*(J[2]*(J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[5]*(J[5]*K[8] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + J[8]*J[8]*K[8])))) + 4.0*(J[0]*J[2]*(J[0]*J[2]*K[0]*K[6] + K[3]*(J[1]*J[2]*K[6] + K[0]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]))) + J[5]*(J[0]*J[2]*J[4]*K[3]*K[6] + J[3]*(J[0]*J[2]*K[0]*K[6] + K[1]*K[7]*(J[0]*J[2] + J[3]*J[5]) + K[4]*(K[1]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[7]*(J[1]*J[2] + J[4]*J[5])))) + J[8]*(J[6]*(J[0]*J[2]*K[0]*K[6] + J[3]*J[5]*K[1]*K[7] + K[2]*K[5]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[8]*(K[2]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]) + K[5]*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8]))) + J[7]*(J[0]*J[2]*K[3]*K[6] + J[3]*J[5]*K[4]*K[7]))))/(detJ*detJ*detJ*detJ);
    G[30] = 2.0*det*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8])/(detJ*detJ);
    G[31] = det*w[3][0]*(-2.0*(J[0]*J[0]*(J[0]*J[0]*K[0]*K[0] + K[3]*K[3]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[6]*K[6]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])) + J[3]*J[3]*(J[0]*J[0]*K[0]*K[0] + K[1]*K[1]*(J[0]*J[0] + J[3]*J[3]) + K[4]*K[4]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[7]*K[7]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])) + J[6]*J[6]*(J[0]*J[0]*K[0]*K[0] + J[3]*J[3]*K[1]*K[1] + K[2]*K[2]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[5]*K[5]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[8]*K[8]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])))-4.0*(J[0]*J[0]*(J[0]*J[1]*K[0]*K[3] + K[6]*(J[0]*J[2]*K[0] + K[3]*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8]))) + J[3]*(J[0]*(J[0]*K[0]*(J[4]*K[3] + J[5]*K[6]) + K[1]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[3]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + K[4]*(J[1]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[3]*K[1]) + J[4]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[7]*(J[7]*K[3] + J[8]*K[6])) + K[7]*(J[2]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[3]*K[1]) + J[5]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[8]*(J[7]*K[3] + J[8]*K[6]))) + J[3]*(J[3]*J[4]*K[1]*K[4] + K[7]*(J[3]*J[5]*K[1] + K[4]*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8])))) + J[6]*(J[0]*(J[0]*K[0]*(J[7]*K[3] + J[8]*K[6]) + K[2]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[6]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6])) + K[5]*(J[1]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[6]*K[2]) + J[4]*(J[4]*K[3] + J[5]*K[6]) + J[7]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6])) + K[8]*(J[2]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[6]*K[2]) + J[5]*(J[4]*K[3] + J[5]*K[6]) + J[8]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]))) + J[3]*(J[0]*(K[0]*(J[4]*K[5] + J[5]*K[8] + J[7]*K[4] + J[8]*K[7]) + K[1]*(J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[2]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[3]*K[1]*(J[7]*K[4] + J[8]*K[7]) + K[2]*(J[3]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7]) + J[6]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7])) + K[5]*(J[1]*(J[1]*K[4] + J[2]*K[7]) + J[4]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[6]*K[2]) + J[7]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7])) + K[8]*(J[2]*(J[1]*K[4] + J[2]*K[7]) + J[5]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[6]*K[2]) + J[8]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]))) + J[6]*(J[6]*J[7]*K[2]*K[5] + K[8]*(J[6]*J[8]*K[2] + K[5]*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8]))))))/(detJ*detJ*detJ*detJ);
    G[32] = det*w[3][0]*(-2.0*(J[1]*(J[0]*(J[0]*J[0]*K[0]*K[0] + J[1]*J[1]*K[3]*K[3]) + J[0]*K[6]*K[6]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8]) + J[3]*(J[0]*J[3]*K[0]*K[0] + J[1]*K[4]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[1]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[3]*(J[3]*K[0] + J[5]*K[6])) + K[7]*(J[1]*J[2]*K[3] + K[0]*(J[0]*J[2] + J[3]*J[5]) + K[6]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8]))) + J[6]*(J[1]*K[3]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + K[0]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[3]*(J[3]*K[2] + J[5]*K[8] + J[8]*K[7]) + J[6]*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2] + J[8]*K[8])) + K[6]*(J[1]*J[2]*K[5] + J[3]*J[8]*K[1] + K[2]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]) + K[8]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])))) + J[4]*(J[0]*(J[1]*J[4]*K[3]*K[3] + K[1]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[3]*(J[0]*K[1] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + K[4]*(J[1]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[4]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + K[7]*(K[0]*(J[0]*J[2] + J[3]*J[5]) + K[3]*(J[1]*J[2] + J[4]*J[5]) + K[6]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8]))) + J[3]*(J[1]*(K[3]*(J[3]*K[1] + J[5]*K[7]) + K[4]*(J[1]*K[4] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[3]*J[3]*K[1]*K[1] + J[4]*J[4]*K[4]*K[4] + K[7]*K[7]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])) + J[6]*(J[1]*(K[2]*(J[0]*K[4] + J[3]*K[3]) + K[5]*(J[1]*K[4] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + K[8]*(J[2]*K[4] + J[5]*K[3])) + J[4]*K[4]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + K[1]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[8]*K[6]) + J[3]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8] + J[6]*K[1]) + J[6]*(J[6]*K[2] + J[8]*K[8])) + K[7]*(J[0]*J[8]*K[0] + K[2]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]) + K[5]*(J[1]*J[2] + J[4]*J[5]) + K[8]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])))) + J[7]*(J[0]*(J[0]*J[6]*K[2]*K[2] + K[0]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[6]*(J[4]*K[4] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[3]*(J[1]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[4]*(J[4]*K[5] + J[5]*K[8] + J[6]*K[1] + J[8]*K[7]) + J[7]*(J[1]*K[3] + J[4]*K[4] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[6]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[5]*(J[4]*K[5] + J[5]*K[8]) + J[8]*(J[4]*K[4] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8]))) + J[3]*(J[0]*(K[0]*(J[4]*K[5] + J[5]*K[8]) + K[2]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[3]*J[6]*K[2]*K[2] + K[1]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[3]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + J[6]*(J[1]*K[3] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[4]*(J[1]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[4]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + J[7]*(J[4]*K[4] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[7]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[5]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + J[8]*(J[1]*K[3] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8]))) + J[6]*(J[6]*K[2]*(J[1]*K[3] + J[4]*K[4] + J[6]*K[2]) + K[5]*(J[1]*(J[1]*K[5] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[4]*(J[4]*K[5] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + J[7]*J[7]*K[5]) + K[8]*(J[8]*(J[1]*K[3] + J[4]*K[4]) + K[8]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])))))-4.0*(J[0]*J[1]*(J[0]*J[1]*K[0]*K[3] + K[6]*(J[1]*J[2]*K[3] + K[0]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]))) + J[4]*(J[0]*J[1]*J[5]*K[3]*K[6] + J[3]*(J[0]*J[1]*K[0]*K[3] + K[1]*K[4]*(J[0]*J[1] + J[3]*J[4]) + K[7]*(K[1]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]) + K[4]*(J[1]*J[2] + J[4]*J[5])))) + J[7]*(J[6]*(J[0]*J[1]*K[0]*K[3] + J[3]*J[4]*K[1]*K[4] + K[2]*K[5]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[8]*(K[2]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]) + K[5]*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8]))) + J[8]*(J[0]*J[1]*K[3]*K[6] + J[3]*J[4]*K[4]*K[7]))))/(detJ*detJ*detJ*detJ);
    G[33] = det*w[3][0]*(-2.0*(J[2]*(J[0]*(J[0]*J[0]*K[0]*K[0] + J[2]*J[2]*K[6]*K[6]) + J[0]*K[3]*K[3]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + J[3]*(J[0]*J[3]*K[0]*K[0] + J[2]*K[7]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + K[1]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[3]*(J[3]*K[0] + J[4]*K[3])) + K[4]*(J[1]*J[2]*K[6] + K[0]*(J[0]*J[1] + J[3]*J[4]) + K[3]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]))) + J[6]*(J[2]*K[6]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + K[0]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[3]*(J[3]*K[2] + J[4]*K[5] + J[7]*K[4]) + J[6]*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2] + J[7]*K[5])) + K[3]*(J[1]*J[2]*K[8] + J[3]*J[7]*K[1] + K[2]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[5]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7])))) + J[5]*(J[0]*(J[0]*J[3]*K[1]*K[1] + K[0]*(J[0]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + J[3]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7])) + K[3]*(K[1]*(J[0]*J[1] + J[3]*J[4]) + K[4]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[7]*(J[1]*J[2] + J[4]*J[5])) + K[6]*(J[2]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + J[5]*(J[2]*K[6] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7]))) + J[3]*(J[2]*(K[6]*(J[3]*K[1] + J[4]*K[4]) + K[7]*(J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[3]*J[3]*K[1]*K[1] + J[5]*J[5]*K[7]*K[7] + K[4]*K[4]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7])) + J[6]*(J[2]*(K[6]*(J[3]*K[2] + J[4]*K[5]) + K[7]*(J[0]*K[2] + J[1]*K[5]) + K[8]*(J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[5]*K[7]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + K[1]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3]) + J[3]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8] + J[6]*K[1]) + J[6]*(J[6]*K[2] + J[7]*K[5])) + K[4]*(J[0]*J[7]*K[0] + K[2]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[5]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[8]*(J[1]*J[2] + J[4]*J[5])))) + J[8]*(J[0]*(J[0]*J[6]*K[2]*K[2] + K[0]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[6]*(J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[3]*(J[1]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[4]*(J[4]*K[5] + J[5]*K[8]) + J[7]*(J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[6]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[5]*(J[4]*K[5] + J[5]*K[8] + J[6]*K[1] + J[7]*K[4]) + J[8]*(J[2]*K[6] + J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8]))) + J[3]*(J[0]*(K[0]*(J[4]*K[5] + J[5]*K[8]) + K[2]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[3]*J[6]*K[2]*K[2] + K[1]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[3]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + J[6]*(J[2]*K[6] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[4]*(J[1]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[4]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + J[7]*(J[2]*K[6] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[7]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[5]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + J[8]*(J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8]))) + J[6]*(J[6]*K[2]*(J[2]*K[6] + J[5]*K[7] + J[6]*K[2]) + K[5]*(J[7]*(J[2]*K[6] + J[5]*K[7]) + K[5]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7])) + K[8]*(J[2]*(J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[5]*(J[5]*K[8] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + J[8]*J[8]*K[8]))))-4.0*(J[0]*J[2]*(J[0]*J[2]*K[0]*K[6] + K[3]*(J[1]*J[2]*K[6] + K[0]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]))) + J[5]*(J[0]*J[2]*J[4]*K[3]*K[6] + J[3]*(J[0]*J[2]*K[0]*K[6] + K[1]*K[7]*(J[0]*J[2] + J[3]*J[5]) + K[4]*(K[1]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[7]*(J[1]*J[2] + J[4]*J[5])))) + J[8]*(J[6]*(J[0]*J[2]*K[0]*K[6] + J[3]*J[5]*K[1]*K[7] + K[2]*K[5]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[8]*(K[2]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]) + K[5]*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8]))) + J[7]*(J[0]*J[2]*K[3]*K[6] + J[3]*J[5]*K[4]*K[7]))))/(detJ*detJ*detJ*detJ);
    G[34] = -2.0*det*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6])/(detJ*detJ);
    G[35] = -2.0*det*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7])/(detJ*detJ);
    G[36] = -2.0*det*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8])/(detJ*detJ);
    G[37] = det*w[3][0]*(2.0*(J[1]*J[1]*(J[0]*J[1]*K[0]*K[3] + K[6]*(J[1]*J[2]*K[3] + K[0]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]))) + J[4]*(J[1]*(J[1]*K[3]*(J[3]*K[0] + J[5]*K[6]) + K[1]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[4]*K[4]) + J[3]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[6]*(J[6]*K[0] + J[8]*K[6])) + K[4]*(J[1]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[4]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + K[7]*(J[2]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[4]*K[4]) + J[5]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[8]*(J[6]*K[0] + J[8]*K[6]))) + J[4]*(J[3]*J[4]*K[1]*K[4] + K[7]*(J[4]*J[5]*K[4] + K[1]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8])))) + J[7]*(J[1]*(J[1]*K[3]*(J[6]*K[0] + J[8]*K[6]) + K[2]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[7]*K[5]) + J[3]*(J[3]*K[0] + J[5]*K[6]) + J[6]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6])) + K[5]*(J[1]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[7]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6])) + K[8]*(J[2]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[7]*K[5]) + J[5]*(J[3]*K[0] + J[5]*K[6]) + J[8]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]))) + J[4]*(J[1]*(K[3]*(J[3]*K[2] + J[5]*K[8] + J[6]*K[1] + J[8]*K[7]) + K[4]*(J[0]*K[2] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[5]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[4]*K[4]*(J[6]*K[1] + J[8]*K[7]) + K[2]*(J[0]*(J[0]*K[1] + J[2]*K[7]) + J[3]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[7]*K[5]) + J[6]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7])) + K[5]*(J[4]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7]) + J[7]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7])) + K[8]*(J[2]*(J[0]*K[1] + J[2]*K[7]) + J[5]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[7]*K[5]) + J[8]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]))) + J[7]*(J[6]*J[7]*K[2]*K[5] + K[8]*(J[7]*J[8]*K[5] + K[2]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]))))) + J[1]*J[1]*(J[1]*J[1]*K[3]*K[3] + K[0]*K[0]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[6]*K[6]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])) + J[4]*J[4]*(J[1]*J[1]*K[3]*K[3] + K[1]*K[1]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[4]*K[4]*(J[1]*J[1] + J[4]*J[4]) + K[7]*K[7]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])) + J[7]*J[7]*(J[1]*J[1]*K[3]*K[3] + J[4]*J[4]*K[4]*K[4] + K[2]*K[2]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[5]*K[5]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[8]*K[8]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])))/(detJ*detJ*detJ*detJ);
    G[38] = det*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7])/(detJ*detJ);
    G[39] = det*w[3][0]*(2.0*(J[2]*(J[1]*(J[1]*J[1]*K[3]*K[3] + J[2]*J[2]*K[6]*K[6]) + J[1]*K[0]*K[0]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + J[4]*(J[2]*K[6]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + K[0]*(J[0]*J[2]*K[7] + K[1]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[4]*(J[0]*J[1] + J[3]*J[4])) + K[3]*(J[1]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7] + J[4]*K[3]) + J[4]*(J[3]*K[1] + J[4]*K[4]))) + J[7]*(J[2]*K[6]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + K[0]*(J[0]*J[2]*K[8] + J[4]*J[6]*K[4] + K[2]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[5]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7])) + K[3]*(J[1]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[4]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1]) + J[7]*(J[1]*K[3] + J[4]*K[4] + J[6]*K[2] + J[7]*K[5])))) + J[5]*(J[1]*(J[1]*J[4]*K[4]*K[4] + K[0]*(K[1]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[4]*(J[0]*J[1] + J[3]*J[4]) + K[7]*(J[0]*J[2] + J[3]*J[5])) + K[3]*(J[1]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + J[4]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7])) + K[6]*(J[2]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + J[5]*(J[2]*K[6] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7]))) + J[4]*(J[2]*(K[6]*(J[3]*K[1] + J[4]*K[4]) + K[7]*(J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[4]*J[4]*K[4]*K[4] + J[5]*J[5]*K[7]*K[7] + K[1]*K[1]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6])) + J[7]*(J[2]*(K[6]*(J[3]*K[2] + J[4]*K[5]) + K[7]*(J[0]*K[2] + J[1]*K[5]) + K[8]*(J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[5]*K[7]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + K[1]*(J[1]*J[6]*K[3] + K[2]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[5]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[8]*(J[0]*J[2] + J[3]*J[5])) + K[4]*(J[1]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3]) + J[4]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8] + J[7]*K[4]) + J[7]*(J[6]*K[2] + J[7]*K[5])))) + J[8]*(J[1]*(J[1]*J[7]*K[5]*K[5] + K[0]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[3]*(J[3]*K[2] + J[5]*K[8]) + J[6]*(J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[3]*(J[1]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[7]*(J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[6]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[5]*(J[3]*K[2] + J[5]*K[8] + J[6]*K[1] + J[7]*K[4]) + J[8]*(J[2]*K[6] + J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8]))) + J[4]*(J[2]*K[6]*(J[6]*K[1] + J[7]*K[4]) + K[2]*(J[1]*J[3]*K[3] + K[1]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[4]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7])) + K[5]*(J[1]*(J[0]*K[1] + J[1]*K[4] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[4]*(J[3]*K[1] + J[4]*K[4]) + J[7]*(J[4]*K[5] + J[6]*K[1] + J[7]*K[4])) + K[7]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[5]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + J[8]*(J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[8]*(J[1]*J[5]*K[3] + K[1]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]) + K[4]*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8]))) + J[7]*(J[7]*K[5]*(J[2]*K[6] + J[5]*K[7] + J[7]*K[5]) + K[2]*(J[6]*(J[2]*K[6] + J[5]*K[7]) + K[2]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6])) + K[8]*(J[2]*(J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[5]*(J[5]*K[8] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + J[8]*J[8]*K[8])))) + 4.0*(J[1]*J[2]*(J[0]*J[2]*K[0]*K[6] + K[3]*(J[1]*J[2]*K[6] + K[0]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]))) + J[5]*(J[1]*J[2]*J[3]*K[0]*K[6] + J[4]*(J[1]*J[2]*K[3]*K[6] + K[1]*K[7]*(J[0]*J[2] + J[3]*J[5]) + K[4]*(K[1]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[7]*(J[1]*J[2] + J[4]*J[5])))) + J[8]*(J[6]*(J[1]*J[2]*K[0]*K[6] + J[4]*J[5]*K[1]*K[7]) + J[7]*(J[1]*J[2]*K[3]*K[6] + J[4]*J[5]*K[4]*K[7] + K[2]*K[5]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[8]*(K[2]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]) + K[5]*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8]))))))/(detJ*detJ*detJ*detJ);
    G[40] = 2.0*det*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8])/(detJ*detJ);
    G[41] = det*w[3][0]*(-2.0*(J[1]*J[1]*(J[1]*J[1]*K[3]*K[3] + K[0]*K[0]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[6]*K[6]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])) + J[4]*J[4]*(J[1]*J[1]*K[3]*K[3] + K[1]*K[1]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[4]*K[4]*(J[1]*J[1] + J[4]*J[4]) + K[7]*K[7]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])) + J[7]*J[7]*(J[1]*J[1]*K[3]*K[3] + J[4]*J[4]*K[4]*K[4] + K[2]*K[2]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[5]*K[5]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[8]*K[8]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])))-4.0*(J[1]*J[1]*(J[0]*J[1]*K[0]*K[3] + K[6]*(J[1]*J[2]*K[3] + K[0]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]))) + J[4]*(J[1]*(J[1]*K[3]*(J[3]*K[0] + J[5]*K[6]) + K[1]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[4]*K[4]) + J[3]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[6]*(J[6]*K[0] + J[8]*K[6])) + K[4]*(J[1]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[4]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + K[7]*(J[2]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[4]*K[4]) + J[5]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[8]*(J[6]*K[0] + J[8]*K[6]))) + J[4]*(J[3]*J[4]*K[1]*K[4] + K[7]*(J[4]*J[5]*K[4] + K[1]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8])))) + J[7]*(J[1]*(J[1]*K[3]*(J[6]*K[0] + J[8]*K[6]) + K[2]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[7]*K[5]) + J[3]*(J[3]*K[0] + J[5]*K[6]) + J[6]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6])) + K[5]*(J[1]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[7]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6])) + K[8]*(J[2]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[7]*K[5]) + J[5]*(J[3]*K[0] + J[5]*K[6]) + J[8]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]))) + J[4]*(J[1]*(K[3]*(J[3]*K[2] + J[5]*K[8] + J[6]*K[1] + J[8]*K[7]) + K[4]*(J[0]*K[2] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[5]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[4]*K[4]*(J[6]*K[1] + J[8]*K[7]) + K[2]*(J[0]*(J[0]*K[1] + J[2]*K[7]) + J[3]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[7]*K[5]) + J[6]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7])) + K[5]*(J[4]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7]) + J[7]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7])) + K[8]*(J[2]*(J[0]*K[1] + J[2]*K[7]) + J[5]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[7]*K[5]) + J[8]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]))) + J[7]*(J[6]*J[7]*K[2]*K[5] + K[8]*(J[7]*J[8]*K[5] + K[2]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]))))))/(detJ*detJ*detJ*detJ);
    G[42] = det*w[3][0]*(-2.0*(J[2]*(J[1]*(J[1]*J[1]*K[3]*K[3] + J[2]*J[2]*K[6]*K[6]) + J[1]*K[0]*K[0]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + J[4]*(J[2]*K[6]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + K[0]*(J[0]*J[2]*K[7] + K[1]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[4]*(J[0]*J[1] + J[3]*J[4])) + K[3]*(J[1]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7] + J[4]*K[3]) + J[4]*(J[3]*K[1] + J[4]*K[4]))) + J[7]*(J[2]*K[6]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + K[0]*(J[0]*J[2]*K[8] + J[4]*J[6]*K[4] + K[2]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[5]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7])) + K[3]*(J[1]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[4]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1]) + J[7]*(J[1]*K[3] + J[4]*K[4] + J[6]*K[2] + J[7]*K[5])))) + J[5]*(J[1]*(J[1]*J[4]*K[4]*K[4] + K[0]*(K[1]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[4]*(J[0]*J[1] + J[3]*J[4]) + K[7]*(J[0]*J[2] + J[3]*J[5])) + K[3]*(J[1]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + J[4]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7])) + K[6]*(J[2]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7]) + J[5]*(J[2]*K[6] + J[3]*K[1] + J[4]*K[4] + J[5]*K[7]))) + J[4]*(J[2]*(K[6]*(J[3]*K[1] + J[4]*K[4]) + K[7]*(J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[4]*J[4]*K[4]*K[4] + J[5]*J[5]*K[7]*K[7] + K[1]*K[1]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6])) + J[7]*(J[2]*(K[6]*(J[3]*K[2] + J[4]*K[5]) + K[7]*(J[0]*K[2] + J[1]*K[5]) + K[8]*(J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[5]*K[7]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + K[1]*(J[1]*J[6]*K[3] + K[2]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[5]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[8]*(J[0]*J[2] + J[3]*J[5])) + K[4]*(J[1]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3]) + J[4]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8] + J[7]*K[4]) + J[7]*(J[6]*K[2] + J[7]*K[5])))) + J[8]*(J[1]*(J[1]*J[7]*K[5]*K[5] + K[0]*(J[0]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[3]*(J[3]*K[2] + J[5]*K[8]) + J[6]*(J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[3]*(J[1]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[7]*(J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[6]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8]) + J[5]*(J[3]*K[2] + J[5]*K[8] + J[6]*K[1] + J[7]*K[4]) + J[8]*(J[2]*K[6] + J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8]))) + J[4]*(J[2]*K[6]*(J[6]*K[1] + J[7]*K[4]) + K[2]*(J[1]*J[3]*K[3] + K[1]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[4]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7])) + K[5]*(J[1]*(J[0]*K[1] + J[1]*K[4] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[4]*(J[3]*K[1] + J[4]*K[4]) + J[7]*(J[4]*K[5] + J[6]*K[1] + J[7]*K[4])) + K[7]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[5]*(J[3]*K[2] + J[4]*K[5] + J[5]*K[8]) + J[8]*(J[5]*K[7] + J[6]*K[2] + J[7]*K[5] + J[8]*K[8])) + K[8]*(J[1]*J[5]*K[3] + K[1]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]) + K[4]*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8]))) + J[7]*(J[7]*K[5]*(J[2]*K[6] + J[5]*K[7] + J[7]*K[5]) + K[2]*(J[6]*(J[2]*K[6] + J[5]*K[7]) + K[2]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6])) + K[8]*(J[2]*(J[2]*K[8] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[5]*(J[5]*K[8] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + J[8]*J[8]*K[8]))))-4.0*(J[1]*J[2]*(J[0]*J[2]*K[0]*K[6] + K[3]*(J[1]*J[2]*K[6] + K[0]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]))) + J[5]*(J[1]*J[2]*J[3]*K[0]*K[6] + J[4]*(J[1]*J[2]*K[3]*K[6] + K[1]*K[7]*(J[0]*J[2] + J[3]*J[5]) + K[4]*(K[1]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[7]*(J[1]*J[2] + J[4]*J[5])))) + J[8]*(J[6]*(J[1]*J[2]*K[0]*K[6] + J[4]*J[5]*K[1]*K[7]) + J[7]*(J[1]*J[2]*K[3]*K[6] + J[4]*J[5]*K[4]*K[7] + K[2]*K[5]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]) + K[8]*(K[2]*(J[0]*J[2] + J[3]*J[5] + J[6]*J[8]) + K[5]*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8]))))))/(detJ*detJ*detJ*detJ);
    G[43] = -2.0*det*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7])/(detJ*detJ);
    G[44] = -2.0*det*(J[1]*J[2] + J[4]*J[5] + J[7]*J[8])/(detJ*detJ);
    G[45] = det*w[3][0]*(2.0*(J[2]*J[2]*(J[0]*J[2]*K[0]*K[6] + K[3]*(J[1]*J[2]*K[6] + K[0]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]))) + J[5]*(J[2]*(J[2]*K[6]*(J[3]*K[0] + J[4]*K[3]) + K[1]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[5]*K[7]) + J[3]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[6]*(J[6]*K[0] + J[7]*K[3])) + K[4]*(J[1]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[5]*K[7]) + J[4]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[7]*(J[6]*K[0] + J[7]*K[3])) + K[7]*(J[2]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[5]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]))) + J[5]*(J[3]*J[5]*K[1]*K[7] + K[4]*(J[4]*J[5]*K[7] + K[1]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7])))) + J[8]*(J[2]*(J[2]*K[6]*(J[6]*K[0] + J[7]*K[3]) + K[2]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[8]*K[8]) + J[3]*(J[3]*K[0] + J[4]*K[3]) + J[6]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6])) + K[5]*(J[1]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[8]*K[8]) + J[4]*(J[3]*K[0] + J[4]*K[3]) + J[7]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6])) + K[8]*(J[2]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[8]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]))) + J[5]*(J[2]*(K[6]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1] + J[7]*K[4]) + K[7]*(J[0]*K[2] + J[1]*K[5] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[8]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[5]*K[7]*(J[6]*K[1] + J[7]*K[4]) + K[2]*(J[0]*(J[0]*K[1] + J[1]*K[4]) + J[3]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[8]*K[8]) + J[6]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7])) + K[5]*(J[1]*(J[0]*K[1] + J[1]*K[4]) + J[4]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[8]*K[8]) + J[7]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7])) + K[8]*(J[5]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7]) + J[8]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]))) + J[8]*(J[6]*J[8]*K[2]*K[8] + K[5]*(J[7]*J[8]*K[8] + K[2]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]))))) + J[2]*J[2]*(J[2]*J[2]*K[6]*K[6] + K[0]*K[0]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[3]*K[3]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7])) + J[5]*J[5]*(J[2]*J[2]*K[6]*K[6] + K[1]*K[1]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[4]*K[4]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[7]*K[7]*(J[2]*J[2] + J[5]*J[5])) + J[8]*J[8]*(J[2]*J[2]*K[6]*K[6] + J[5]*J[5]*K[7]*K[7] + K[2]*K[2]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[5]*K[5]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[8]*K[8]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])))/(detJ*detJ*detJ*detJ);
    G[46] = det*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])/(detJ*detJ);
    G[47] = det*w[3][0]*(-2.0*(J[2]*J[2]*(J[2]*J[2]*K[6]*K[6] + K[0]*K[0]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[3]*K[3]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7])) + J[5]*J[5]*(J[2]*J[2]*K[6]*K[6] + K[1]*K[1]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[4]*K[4]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[7]*K[7]*(J[2]*J[2] + J[5]*J[5])) + J[8]*J[8]*(J[2]*J[2]*K[6]*K[6] + J[5]*J[5]*K[7]*K[7] + K[2]*K[2]*(J[0]*J[0] + J[3]*J[3] + J[6]*J[6]) + K[5]*K[5]*(J[1]*J[1] + J[4]*J[4] + J[7]*J[7]) + K[8]*K[8]*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])))-4.0*(J[2]*J[2]*(J[0]*J[2]*K[0]*K[6] + K[3]*(J[1]*J[2]*K[6] + K[0]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]))) + J[5]*(J[2]*(J[2]*K[6]*(J[3]*K[0] + J[4]*K[3]) + K[1]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[5]*K[7]) + J[3]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[6]*(J[6]*K[0] + J[7]*K[3])) + K[4]*(J[1]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[5]*K[7]) + J[4]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[7]*(J[6]*K[0] + J[7]*K[3])) + K[7]*(J[2]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[5]*(J[3]*K[0] + J[4]*K[3] + J[5]*K[6]))) + J[5]*(J[3]*J[5]*K[1]*K[7] + K[4]*(J[4]*J[5]*K[7] + K[1]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7])))) + J[8]*(J[2]*(J[2]*K[6]*(J[6]*K[0] + J[7]*K[3]) + K[2]*(J[0]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[8]*K[8]) + J[3]*(J[3]*K[0] + J[4]*K[3]) + J[6]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6])) + K[5]*(J[1]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6] + J[8]*K[8]) + J[4]*(J[3]*K[0] + J[4]*K[3]) + J[7]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6])) + K[8]*(J[2]*(J[0]*K[0] + J[1]*K[3] + J[2]*K[6]) + J[8]*(J[6]*K[0] + J[7]*K[3] + J[8]*K[6]))) + J[5]*(J[2]*(K[6]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1] + J[7]*K[4]) + K[7]*(J[0]*K[2] + J[1]*K[5] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + K[8]*(J[0]*K[1] + J[1]*K[4] + J[2]*K[7] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6])) + J[5]*K[7]*(J[6]*K[1] + J[7]*K[4]) + K[2]*(J[0]*(J[0]*K[1] + J[1]*K[4]) + J[3]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[8]*K[8]) + J[6]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7])) + K[5]*(J[1]*(J[0]*K[1] + J[1]*K[4]) + J[4]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7] + J[8]*K[8]) + J[7]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7])) + K[8]*(J[5]*(J[3]*K[1] + J[4]*K[4] + J[5]*K[7]) + J[8]*(J[6]*K[1] + J[7]*K[4] + J[8]*K[7]))) + J[8]*(J[6]*J[8]*K[2]*K[8] + K[5]*(J[7]*J[8]*K[8] + K[2]*(J[0]*J[1] + J[3]*J[4] + J[6]*J[7]))))))/(detJ*detJ*detJ*detJ);
    G[48] = -2.0*det*(J[2]*J[2] + J[5]*J[5] + J[8]*J[8])/(detJ*detJ);
    G[49] = det*w[4][0]*(2.0*(J[0]*J[0]*K[0]*K[0] + J[3]*K[1]*(J[0]*K[0] + J[3]*K[1]) + J[6]*K[2]*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2]) + K[3]*(J[0]*(J[4]*K[1] + J[7]*K[2]) + J[1]*J[1]*K[3] + K[0]*(J[3]*J[4] + J[6]*J[7])) + K[4]*(J[1]*(J[0]*K[1] + J[3]*K[0] + J[4]*K[3]) + J[4]*J[4]*K[4] + J[7]*(J[3]*K[2] + J[6]*K[1])) + K[5]*(J[6]*(J[1]*K[0] + J[4]*K[1]) + J[7]*(J[1]*K[3] + J[4]*K[4] + J[7]*K[5]) + K[2]*(J[0]*J[1] + J[3]*J[4])) + K[6]*(J[2]*J[2]*K[6] + J[5]*(J[0]*K[1] + J[1]*K[4] + J[3]*K[0] + J[4]*K[3]) + J[8]*(J[0]*K[2] + J[1]*K[5] + J[6]*K[0] + J[7]*K[3])) + K[7]*(J[2]*(J[0]*K[1] + J[1]*K[4] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[5]*J[5]*K[7] + J[8]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1] + J[7]*K[4])) + K[8]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[5]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + J[8]*J[8]*K[8])) + 4.0*(J[0]*J[1]*K[0]*K[3] + J[2]*K[6]*(J[0]*K[0] + J[1]*K[3]) + J[3]*J[4]*K[1]*K[4] + J[5]*K[7]*(J[3]*K[1] + J[4]*K[4]) + J[6]*J[7]*K[2]*K[5] + J[8]*K[8]*(J[6]*K[2] + J[7]*K[5])) + K[0]*K[0]*(J[3]*J[3] + J[6]*J[6]) + K[1]*K[1]*(J[0]*J[0] + J[6]*J[6]) + K[2]*K[2]*(J[0]*J[0] + J[3]*J[3]) + K[3]*K[3]*(J[4]*J[4] + J[7]*J[7]) + K[4]*K[4]*(J[1]*J[1] + J[7]*J[7]) + K[5]*K[5]*(J[1]*J[1] + J[4]*J[4]) + K[6]*K[6]*(J[5]*J[5] + J[8]*J[8]) + K[7]*K[7]*(J[2]*J[2] + J[8]*J[8]) + K[8]*K[8]*(J[2]*J[2] + J[5]*J[5]))/(detJ*detJ);
    G[50] = det*w[4][0]*(-2.0*(K[0]*K[0]*(J[3]*J[3] + J[6]*J[6]) + K[1]*K[1]*(J[0]*J[0] + J[6]*J[6]) + K[2]*K[2]*(J[0]*J[0] + J[3]*J[3]) + K[3]*K[3]*(J[4]*J[4] + J[7]*J[7]) + K[4]*K[4]*(J[1]*J[1] + J[7]*J[7]) + K[5]*K[5]*(J[1]*J[1] + J[4]*J[4]) + K[6]*K[6]*(J[5]*J[5] + J[8]*J[8]) + K[7]*K[7]*(J[2]*J[2] + J[8]*J[8]) + K[8]*K[8]*(J[2]*J[2] + J[5]*J[5]))-4.0*(J[0]*J[0]*K[0]*K[0] + J[3]*K[1]*(J[0]*K[0] + J[3]*K[1]) + J[6]*K[2]*(J[0]*K[0] + J[3]*K[1] + J[6]*K[2]) + K[3]*(J[0]*(J[4]*K[1] + J[7]*K[2]) + J[1]*J[1]*K[3] + K[0]*(J[3]*J[4] + J[6]*J[7])) + K[4]*(J[1]*(J[0]*K[1] + J[3]*K[0] + J[4]*K[3]) + J[4]*J[4]*K[4] + J[7]*(J[3]*K[2] + J[6]*K[1])) + K[5]*(J[6]*(J[1]*K[0] + J[4]*K[1]) + J[7]*(J[1]*K[3] + J[4]*K[4] + J[7]*K[5]) + K[2]*(J[0]*J[1] + J[3]*J[4])) + K[6]*(J[2]*J[2]*K[6] + J[5]*(J[0]*K[1] + J[1]*K[4] + J[3]*K[0] + J[4]*K[3]) + J[8]*(J[0]*K[2] + J[1]*K[5] + J[6]*K[0] + J[7]*K[3])) + K[7]*(J[2]*(J[0]*K[1] + J[1]*K[4] + J[3]*K[0] + J[4]*K[3] + J[5]*K[6]) + J[5]*J[5]*K[7] + J[8]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1] + J[7]*K[4])) + K[8]*(J[2]*(J[0]*K[2] + J[1]*K[5] + J[6]*K[0] + J[7]*K[3] + J[8]*K[6]) + J[5]*(J[3]*K[2] + J[4]*K[5] + J[6]*K[1] + J[7]*K[4] + J[8]*K[7]) + J[8]*J[8]*K[8]))-8.0*(J[0]*J[1]*K[0]*K[3] + J[2]*K[6]*(J[0]*K[0] + J[1]*K[3]) + J[3]*J[4]*K[1]*K[4] + J[5]*K[7]*(J[3]*K[1] + J[4]*K[4]) + J[6]*J[7]*K[2]*K[5] + J[8]*K[8]*(J[6]*K[2] + J[7]*K[5])))/(detJ*detJ);
    G[51] = det*w[6][0]*w[6][0]*(K[0]*K[0] + K[1]*K[1] + K[2]*K[2]);
    G[52] = 2.0*det*w[6][0]*w[6][0]*(K[0]*K[3] + K[1]*K[4] + K[2]*K[5]);
    G[53] = 2.0*det*w[6][0]*w[6][0]*(K[0]*K[6] + K[1]*K[7] + K[2]*K[8]);
    G[54] = det*w[6][0]*w[6][0]*(K[3]*K[3] + K[4]*K[4] + K[5]*K[5]);
    G[55] = 2.0*det*w[6][0]*w[6][0]*(K[3]*K[6] + K[4]*K[7] + K[5]*K[8]);
    G[56] = det*w[6][0]*w[6][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[57] = 2.0*det*w[6][0]*w[6][0]*w[7][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[58] = det*w[6][0]*w[6][0]*w[7][0]*w[7][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[59] = det*w[5][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[60] = -2.0*det*w[6][0]*w[6][0]*w[7][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    G[61] = -2.0*det*w[5][0]*(K[6]*K[6] + K[7]*K[7] + K[8]*K[8]);
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', True), ('ignore ones', True), ('ignore zero tables', True), ('optimisation', 'simplify_expressions'), ('remove zero terms', True)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 60000
    for (unsigned int ip = 0; ip < 125; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      double F4 = 0.0;
      double F5 = 0.0;
      double F6 = 0.0;
      double F7 = 0.0;
      double F8 = 0.0;
      double F9 = 0.0;
      double F10 = 0.0;
      double F11 = 0.0;
      double F12 = 0.0;
      double F13 = 0.0;
      double F14 = 0.0;
      double F15 = 0.0;
      double F16 = 0.0;
      double F17 = 0.0;
      double F18 = 0.0;
      double F19 = 0.0;
      double F20 = 0.0;
      double F21 = 0.0;
      double F22 = 0.0;
      
      // Total number of operations to compute function values = 48
      for (unsigned int r = 0; r < 2; r++)
      {
        F0 += FE0_D001[ip][r]*w[0][nzc14[r]];
        F1 += FE0_D001[ip][r]*w[0][nzc13[r]];
        F2 += FE0_D001[ip][r]*w[0][nzc12[r]];
        F3 += FE0_D001[ip][r]*w[8][nzc2[r]];
        F4 += FE0_D001[ip][r]*w[8][nzc1[r]];
        F5 += FE0_D001[ip][r]*w[8][nzc0[r]];
        F14 += FE0_D001[ip][r]*w[0][nzc6[r]];
        F15 += FE0_D001[ip][r]*w[0][nzc5[r]];
        F16 += FE0_D001[ip][r]*w[0][nzc4[r]];
        F18 += FE0_D001[ip][r]*w[0][nzc10[r]];
        F19 += FE0_D001[ip][r]*w[0][nzc9[r]];
        F20 += FE0_D001[ip][r]*w[0][nzc8[r]];
      } // end loop over 'r'
      
      // Total number of operations to compute function values = 88
      for (unsigned int r = 0; r < 4; r++)
      {
        F6 += FE3_C0[ip][r]*w[2][r];
        F7 += FE3_C1[ip][r]*w[2][r];
        F8 += FE3_C2[ip][r]*w[2][r];
        F9 += FE3_C0_D100[ip][r]*w[2][r];
        F10 += FE3_C0[ip][r]*w[1][r];
        F11 += FE3_C1[ip][r]*w[1][r];
        F12 += FE3_C2[ip][r]*w[1][r];
        F13 += FE3_C0_D100[ip][r]*w[1][r];
        F17 += FE0[ip][r]*w[0][nzc3[r]];
        F21 += FE0[ip][r]*w[0][nzc7[r]];
        F22 += FE0[ip][r]*w[8][r];
      } // end loop over 'r'
      
      // Number of operations to compute ip constants: 343
      double I[1];
      // Number of operations: 343
      I[0] = W125[ip]*(F0*F0*G[1] + F1*(F0*G[3] + F1*G[16]) + F13*F13*(G[49] + F10*F10*G[25] + F11*(F10*G[27] + F11*G[37]) + F12*(F10*G[29] + F11*G[39] + F12*G[45])) + F2*(F0*G[10] + F1*G[21] + F2*G[59]) + F3*(F0*G[12] + F1*G[13] + F2*G[14] + F3*G[1]) + F4*(F0*G[13] + F1*G[23] + F2*G[24] + F3*G[3] + F4*G[16]) + F5*(F0*G[14] + F1*G[24] + F2*G[61] + F3*G[10] + F4*G[21] + F5*G[59]) + F6*(F9*(F13*(F10*G[31] + F11*G[32] + F12*G[33]) + F6*F9*G[25]) + std::exp( - F22)*(F6*G[26]*std::exp( - F22) + std::exp(F17)*(F10*G[34] + F11*G[35] + F12*G[36])) + std::exp(F22)*(F6*G[26]*std::exp(F22) + std::exp(F21)*(F10*G[34] + F11*G[35] + F12*G[36]))) + F7*(F9*(F13*(F10*G[32] + F11*G[41] + F12*G[42]) + F9*(F6*G[27] + F7*G[37])) + std::exp( - F22)*(std::exp( - F22)*(F6*G[28] + F7*G[38]) + std::exp(F17)*(F10*G[35] + F11*G[43] + F12*G[44])) + std::exp(F22)*(std::exp(F21)*(F10*G[35] + F11*G[43] + F12*G[44]) + std::exp(F22)*(F6*G[28] + F7*G[38]))) + F8*(F9*(F13*(F10*G[33] + F11*G[42] + F12*G[47]) + F9*(F6*G[29] + F7*G[39] + F8*G[45])) + std::exp( - F22)*(std::exp( - F22)*(F6*G[30] + F7*G[40] + F8*G[46]) + std::exp(F17)*(F10*G[36] + F11*G[44] + F12*G[48])) + std::exp(F22)*(std::exp(F21)*(F10*G[36] + F11*G[44] + F12*G[48]) + std::exp(F22)*(F6*G[30] + F7*G[40] + F8*G[46]))) + F9*(F13*G[50] + F9*G[49]) + std::exp(F17)*std::exp(F17)*(F0*F0*G[0] + F1*(F0*G[2] + F1*G[15]) + F10*F10*G[26] + F11*(F10*G[28] + F11*G[38]) + F12*(F10*G[30] + F11*G[40] + F12*G[46]) + F14*(F0*G[4] + F1*G[5] + F14*G[51]) + F15*(F0*G[5] + F1*G[17] + F14*G[52] + F15*G[54]) + F16*(F0*G[6] + F1*G[18] + F14*G[53] + F15*G[55] + F16*G[56]) + F2*(F0*G[9] + F1*G[20] + F14*G[6] + F15*G[18] + F16*G[57] + F2*G[58])) + std::exp(F21)*std::exp(F21)*(F0*F0*G[0] + F1*(F0*G[2] + F1*G[15]) + F10*F10*G[26] + F11*(F10*G[28] + F11*G[38]) + F12*(F10*G[30] + F11*G[40] + F12*G[46]) + F18*(F0*G[7] + F1*G[8] + F18*G[51]) + F19*(F0*G[8] + F1*G[19] + F18*G[52] + F19*G[54]) + F2*(F0*G[9] + F1*G[20] + F18*G[11] + F19*G[22] + F2*G[58]) + F20*(F0*G[11] + F1*G[22] + F18*G[53] + F19*G[55] + F2*G[60] + F20*G[56])));
      
      
      // Number of operations for primary indices: 1
      // Number of operations to compute entry: 1
      A[0] += I[0];
    } // end loop over 'ip'
  }

};


class norm_pnp_ns_form_0: public ufc::form
{
public:

  norm_pnp_ns_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~norm_pnp_ns_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "e00a950719a23e0c6103c16149457f42015a6132f546a989f0200840c4a77fcf30c0d1988028d9e080839df2502efde521385c9a4e056f27b3aba7ae87b0b41b";
  }

  std::size_t rank() const final override
  {
    return 0;
  }

  std::size_t num_coefficients() const final override
  {
    return 9;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    static const std::vector<std::size_t> position({0, 1, 2, 3, 4, 5, 6, 7, 8});
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new norm_pnp_ns_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new norm_pnp_ns_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return nullptr;
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new norm_pnp_ns_finite_element_2();
        break;
      }
    case 1:
      {
        return new norm_pnp_ns_finite_element_4();
        break;
      }
    case 2:
      {
        return new norm_pnp_ns_finite_element_4();
        break;
      }
    case 3:
      {
        return new norm_pnp_ns_finite_element_3();
        break;
      }
    case 4:
      {
        return new norm_pnp_ns_finite_element_3();
        break;
      }
    case 5:
      {
        return new norm_pnp_ns_finite_element_3();
        break;
      }
    case 6:
      {
        return new norm_pnp_ns_finite_element_3();
        break;
      }
    case 7:
      {
        return new norm_pnp_ns_finite_element_3();
        break;
      }
    case 8:
      {
        return new norm_pnp_ns_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
      {
        return new norm_pnp_ns_dofmap_2();
        break;
      }
    case 1:
      {
        return new norm_pnp_ns_dofmap_4();
        break;
      }
    case 2:
      {
        return new norm_pnp_ns_dofmap_4();
        break;
      }
    case 3:
      {
        return new norm_pnp_ns_dofmap_3();
        break;
      }
    case 4:
      {
        return new norm_pnp_ns_dofmap_3();
        break;
      }
    case 5:
      {
        return new norm_pnp_ns_dofmap_3();
        break;
      }
    case 6:
      {
        return new norm_pnp_ns_dofmap_3();
        break;
      }
    case 7:
      {
        return new norm_pnp_ns_dofmap_3();
        break;
      }
    case 8:
      {
        return new norm_pnp_ns_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return 0;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new norm_pnp_ns_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return 0;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return 0;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return 0;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return 0;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return 0;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return 0;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return 0;
  }

};

// DOLFIN wrappers

// Standard library includes
#include <string>

// DOLFIN includes
#include <dolfin/common/NoDeleter.h>
#include <dolfin/mesh/Mesh.h>
#include <dolfin/mesh/MultiMesh.h>
#include <dolfin/fem/FiniteElement.h>
#include <dolfin/fem/DofMap.h>
#include <dolfin/fem/Form.h>
#include <dolfin/fem/MultiMeshForm.h>
#include <dolfin/function/FunctionSpace.h>
#include <dolfin/function/MultiMeshFunctionSpace.h>
#include <dolfin/function/GenericFunction.h>
#include <dolfin/function/CoefficientAssigner.h>
#include <dolfin/function/MultiMeshCoefficientAssigner.h>
#include <dolfin/adaptivity/ErrorControl.h>
#include <dolfin/adaptivity/GoalFunctional.h>
#include <dolfin/la/GenericVector.h>

namespace norm_pnp_ns
{

class CoefficientSpace_Re: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_Re(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_Re(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_diffusivity: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_diffusivity(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_diffusivity(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_mu: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_mu(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_mu(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_permittivity: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_permittivity(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_permittivity(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_phib: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_phib(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_0>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_phib(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_0>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_0>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_ub: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_ub(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_ub(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_uu: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_uu(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_2>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_uu(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_2>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_2>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_valency: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_valency(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_3>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_valency(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_3>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_3>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

class CoefficientSpace_vel: public dolfin::FunctionSpace
{
public:

  // Constructor for standard function space
  CoefficientSpace_vel(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_4>(), *mesh))
  {
    // Do nothing
  }

  // Constructor for constrained function space
  CoefficientSpace_vel(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::SubDomain> constrained_domain):
    dolfin::FunctionSpace(mesh,
                          std::make_shared<const dolfin::FiniteElement>(std::make_shared<norm_pnp_ns_finite_element_4>()),
                          std::make_shared<const dolfin::DofMap>(std::make_shared<norm_pnp_ns_dofmap_4>(), *mesh, constrained_domain))
  {
    // Do nothing
  }

};

typedef CoefficientSpace_uu Form_M_FunctionSpace_0;

typedef CoefficientSpace_vel Form_M_FunctionSpace_1;

typedef CoefficientSpace_ub Form_M_FunctionSpace_2;

typedef CoefficientSpace_Re Form_M_FunctionSpace_3;

typedef CoefficientSpace_mu Form_M_FunctionSpace_4;

typedef CoefficientSpace_permittivity Form_M_FunctionSpace_5;

typedef CoefficientSpace_diffusivity Form_M_FunctionSpace_6;

typedef CoefficientSpace_valency Form_M_FunctionSpace_7;

typedef CoefficientSpace_phib Form_M_FunctionSpace_8;

class Form_M: public dolfin::Form
{
public:

  // Constructor
  Form_M(std::shared_ptr<const dolfin::Mesh> mesh):
    dolfin::Form(0, 9), uu(*this, 0), vel(*this, 1), ub(*this, 2), Re(*this, 3), mu(*this, 4), permittivity(*this, 5), diffusivity(*this, 6), valency(*this, 7), phib(*this, 8)
  {
    _mesh = mesh;
    _ufc_form = std::make_shared<const norm_pnp_ns_form_0>();
  }

  // Constructor
  Form_M(std::shared_ptr<const dolfin::Mesh> mesh, std::shared_ptr<const dolfin::GenericFunction> uu, std::shared_ptr<const dolfin::GenericFunction> vel, std::shared_ptr<const dolfin::GenericFunction> ub, std::shared_ptr<const dolfin::GenericFunction> Re, std::shared_ptr<const dolfin::GenericFunction> mu, std::shared_ptr<const dolfin::GenericFunction> permittivity, std::shared_ptr<const dolfin::GenericFunction> diffusivity, std::shared_ptr<const dolfin::GenericFunction> valency, std::shared_ptr<const dolfin::GenericFunction> phib):
    dolfin::Form(0, 9), uu(*this, 0), vel(*this, 1), ub(*this, 2), Re(*this, 3), mu(*this, 4), permittivity(*this, 5), diffusivity(*this, 6), valency(*this, 7), phib(*this, 8)
  {
    _mesh = mesh;
    this->uu = uu;
    this->vel = vel;
    this->ub = ub;
    this->Re = Re;
    this->mu = mu;
    this->permittivity = permittivity;
    this->diffusivity = diffusivity;
    this->valency = valency;
    this->phib = phib;

    _ufc_form = std::make_shared<const norm_pnp_ns_form_0>();
  }

  // Destructor
  ~Form_M()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "uu")
      return 0;
    else if (name == "vel")
      return 1;
    else if (name == "ub")
      return 2;
    else if (name == "Re")
      return 3;
    else if (name == "mu")
      return 4;
    else if (name == "permittivity")
      return 5;
    else if (name == "diffusivity")
      return 6;
    else if (name == "valency")
      return 7;
    else if (name == "phib")
      return 8;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "uu";
    case 1:
      return "vel";
    case 2:
      return "ub";
    case 3:
      return "Re";
    case 4:
      return "mu";
    case 5:
      return "permittivity";
    case 6:
      return "diffusivity";
    case 7:
      return "valency";
    case 8:
      return "phib";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_M_FunctionSpace_0 CoefficientSpace_uu;
  typedef Form_M_FunctionSpace_1 CoefficientSpace_vel;
  typedef Form_M_FunctionSpace_2 CoefficientSpace_ub;
  typedef Form_M_FunctionSpace_3 CoefficientSpace_Re;
  typedef Form_M_FunctionSpace_4 CoefficientSpace_mu;
  typedef Form_M_FunctionSpace_5 CoefficientSpace_permittivity;
  typedef Form_M_FunctionSpace_6 CoefficientSpace_diffusivity;
  typedef Form_M_FunctionSpace_7 CoefficientSpace_valency;
  typedef Form_M_FunctionSpace_8 CoefficientSpace_phib;

  // Coefficients
  dolfin::CoefficientAssigner uu;
  dolfin::CoefficientAssigner vel;
  dolfin::CoefficientAssigner ub;
  dolfin::CoefficientAssigner Re;
  dolfin::CoefficientAssigner mu;
  dolfin::CoefficientAssigner permittivity;
  dolfin::CoefficientAssigner diffusivity;
  dolfin::CoefficientAssigner valency;
  dolfin::CoefficientAssigner phib;
};

class MultiMeshForm_M: public dolfin::MultiMeshForm
{
public:

  // Constructor
  MultiMeshForm_M(std::shared_ptr<const dolfin::MultiMesh> mesh):
    dolfin::MultiMeshForm(mesh), uu(*this, 0), vel(*this, 1), ub(*this, 2), Re(*this, 3), mu(*this, 4), permittivity(*this, 5), diffusivity(*this, 6), valency(*this, 7), phib(*this, 8)
  {
    // Creating a form for each part of the mesh
    for (std::size_t i=0; i< mesh->num_parts(); i++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_M(mesh->part(i)));       add(a);    }
    // Build multimesh form
    build();

    /// Assign coefficients

  }

  // Constructor
  MultiMeshForm_M(std::shared_ptr<const dolfin::MultiMesh> mesh, std::shared_ptr<const dolfin::GenericFunction> uu, std::shared_ptr<const dolfin::GenericFunction> vel, std::shared_ptr<const dolfin::GenericFunction> ub, std::shared_ptr<const dolfin::GenericFunction> Re, std::shared_ptr<const dolfin::GenericFunction> mu, std::shared_ptr<const dolfin::GenericFunction> permittivity, std::shared_ptr<const dolfin::GenericFunction> diffusivity, std::shared_ptr<const dolfin::GenericFunction> valency, std::shared_ptr<const dolfin::GenericFunction> phib):
    dolfin::MultiMeshForm(mesh), uu(*this, 0), vel(*this, 1), ub(*this, 2), Re(*this, 3), mu(*this, 4), permittivity(*this, 5), diffusivity(*this, 6), valency(*this, 7), phib(*this, 8)
  {
    // Creating a form for each part of the mesh
    for (std::size_t i=0; i< mesh->num_parts(); i++)
    {
      std::shared_ptr<dolfin::Form> a(new Form_M(mesh->part(i)));       add(a);    }
    // Build multimesh form
    build();

    /// Assign coefficients    this->uu = uu;
    this->vel = vel;
    this->ub = ub;
    this->Re = Re;
    this->mu = mu;
    this->permittivity = permittivity;
    this->diffusivity = diffusivity;
    this->valency = valency;
    this->phib = phib;

  }

  // Destructor
  ~MultiMeshForm_M()
  {}

  /// Return the number of the coefficient with this name
  virtual std::size_t coefficient_number(const std::string& name) const
  {
    if (name == "uu")
      return 0;
    else if (name == "vel")
      return 1;
    else if (name == "ub")
      return 2;
    else if (name == "Re")
      return 3;
    else if (name == "mu")
      return 4;
    else if (name == "permittivity")
      return 5;
    else if (name == "diffusivity")
      return 6;
    else if (name == "valency")
      return 7;
    else if (name == "phib")
      return 8;

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return 0;
  }

  /// Return the name of the coefficient with this number
  virtual std::string coefficient_name(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      return "uu";
    case 1:
      return "vel";
    case 2:
      return "ub";
    case 3:
      return "Re";
    case 4:
      return "mu";
    case 5:
      return "permittivity";
    case 6:
      return "diffusivity";
    case 7:
      return "valency";
    case 8:
      return "phib";
    }

    dolfin::dolfin_error("generated code for class Form",
                         "access coefficient data",
                         "Invalid coefficient");
    return "unnamed";
  }

  // Typedefs
  typedef Form_M_FunctionSpace_0 CoefficientSpace_uu;
  typedef Form_M_FunctionSpace_1 CoefficientSpace_vel;
  typedef Form_M_FunctionSpace_2 CoefficientSpace_ub;
  typedef Form_M_FunctionSpace_3 CoefficientSpace_Re;
  typedef Form_M_FunctionSpace_4 CoefficientSpace_mu;
  typedef Form_M_FunctionSpace_5 CoefficientSpace_permittivity;
  typedef Form_M_FunctionSpace_6 CoefficientSpace_diffusivity;
  typedef Form_M_FunctionSpace_7 CoefficientSpace_valency;
  typedef Form_M_FunctionSpace_8 CoefficientSpace_phib;

  // Coefficients
  dolfin::MultiMeshCoefficientAssigner uu;
  dolfin::MultiMeshCoefficientAssigner vel;
  dolfin::MultiMeshCoefficientAssigner ub;
  dolfin::MultiMeshCoefficientAssigner Re;
  dolfin::MultiMeshCoefficientAssigner mu;
  dolfin::MultiMeshCoefficientAssigner permittivity;
  dolfin::MultiMeshCoefficientAssigner diffusivity;
  dolfin::MultiMeshCoefficientAssigner valency;
  dolfin::MultiMeshCoefficientAssigner phib;
};

// Class typedefs
typedef Form_M Functional;
typedef MultiMeshForm_M MultiMeshFunctional;

}

#endif
